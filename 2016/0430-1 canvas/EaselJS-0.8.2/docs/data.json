{
    "project": {
        "name": "EaselJS",
        "version": "0.8.2",
        "description": "EaselJS Docs",
        "url": "http://www.createjs.com/easeljs",
        "logo": "assets/docs-icon-EaselJS.png"
    },
    "files": {
        "createjs/events/Event.js": {
            "name": "createjs/events/Event.js",
            "modules": {
                "CreateJS": 1
            },
            "classes": {
                "Event": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "createjs/events/EventDispatcher.js": {
            "name": "createjs/events/EventDispatcher.js",
            "modules": {},
            "classes": {
                "EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/Ticker.js": {
            "name": "createjs/utils/Ticker.js",
            "modules": {},
            "classes": {
                "Ticker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/extend.js": {
            "name": "createjs/utils/extend.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/indexOf.js": {
            "name": "createjs/utils/indexOf.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/promote.js": {
            "name": "createjs/utils/promote.js",
            "modules": {},
            "classes": {
                "Utility Methods": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Bitmap.js": {
            "name": "easeljs/display/Bitmap.js",
            "modules": {},
            "classes": {
                "Bitmap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/BitmapText.js": {
            "name": "easeljs/display/BitmapText.js",
            "modules": {},
            "classes": {
                "BitmapText": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Container.js": {
            "name": "easeljs/display/Container.js",
            "modules": {},
            "classes": {
                "Container": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/DOMElement.js": {
            "name": "easeljs/display/DOMElement.js",
            "modules": {},
            "classes": {
                "DOMElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/DisplayObject.js": {
            "name": "easeljs/display/DisplayObject.js",
            "modules": {
                "EaselJS": 1
            },
            "classes": {
                "DisplayObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Graphics.js": {
            "name": "easeljs/display/Graphics.js",
            "modules": {},
            "classes": {
                "Graphics": 1,
                "Graphics.LineTo": 1,
                "Graphics.MoveTo": 1,
                "Graphics.ArcTo": 1,
                "Graphics.Arc": 1,
                "Graphics.QuadraticCurveTo": 1,
                "Graphics.BezierCurveTo": 1,
                "Graphics.Rect": 1,
                "Graphics.ClosePath": 1,
                "Graphics.BeginPath": 1,
                "Graphics.Fill": 1,
                "Graphics.Stroke": 1,
                "Graphics.StrokeStyle": 1,
                "Graphics.StrokeDash": 1,
                "Graphics.RoundRect": 1,
                "Graphics.Circle": 1,
                "Graphics.Ellipse": 1,
                "Graphics.PolyStar": 1
            },
            "fors": {},
            "namespaces": {
                "Graphics": 1
            }
        },
        "easeljs/display/MovieClip.js": {
            "name": "easeljs/display/MovieClip.js",
            "modules": {},
            "classes": {
                "MovieClip": 1,
                "MovieClipPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Shadow.js": {
            "name": "easeljs/display/Shadow.js",
            "modules": {},
            "classes": {
                "Shadow": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Shape.js": {
            "name": "easeljs/display/Shape.js",
            "modules": {},
            "classes": {
                "Shape": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Sprite.js": {
            "name": "easeljs/display/Sprite.js",
            "modules": {},
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/SpriteContainer.js": {
            "name": "easeljs/display/SpriteContainer.js",
            "modules": {},
            "classes": {
                "SpriteContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/SpriteSheet.js": {
            "name": "easeljs/display/SpriteSheet.js",
            "modules": {},
            "classes": {
                "SpriteSheet": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/SpriteStage.js": {
            "name": "easeljs/display/SpriteStage.js",
            "modules": {},
            "classes": {
                "SpriteStage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Stage.js": {
            "name": "easeljs/display/Stage.js",
            "modules": {},
            "classes": {
                "Stage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/display/Text.js": {
            "name": "easeljs/display/Text.js",
            "modules": {},
            "classes": {
                "Text": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/events/MouseEvent.js": {
            "name": "easeljs/events/MouseEvent.js",
            "modules": {},
            "classes": {
                "MouseEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/filters/AlphaMapFilter.js": {
            "name": "easeljs/filters/AlphaMapFilter.js",
            "modules": {},
            "classes": {
                "AlphaMapFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/filters/AlphaMaskFilter.js": {
            "name": "easeljs/filters/AlphaMaskFilter.js",
            "modules": {},
            "classes": {
                "AlphaMaskFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/filters/BlurFilter.js": {
            "name": "easeljs/filters/BlurFilter.js",
            "modules": {},
            "classes": {
                "BlurFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/filters/ColorFilter.js": {
            "name": "easeljs/filters/ColorFilter.js",
            "modules": {},
            "classes": {
                "ColorFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/filters/ColorMatrix.js": {
            "name": "easeljs/filters/ColorMatrix.js",
            "modules": {},
            "classes": {
                "ColorMatrix": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/filters/ColorMatrixFilter.js": {
            "name": "easeljs/filters/ColorMatrixFilter.js",
            "modules": {},
            "classes": {
                "ColorMatrixFilter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/filters/Filter.js": {
            "name": "easeljs/filters/Filter.js",
            "modules": {},
            "classes": {
                "Filter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/geom/DisplayProps.js": {
            "name": "easeljs/geom/DisplayProps.js",
            "modules": {},
            "classes": {
                "DisplayProps": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/geom/Matrix2D.js": {
            "name": "easeljs/geom/Matrix2D.js",
            "modules": {},
            "classes": {
                "Matrix2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/geom/Point.js": {
            "name": "easeljs/geom/Point.js",
            "modules": {},
            "classes": {
                "Point": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/geom/Rectangle.js": {
            "name": "easeljs/geom/Rectangle.js",
            "modules": {},
            "classes": {
                "Rectangle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/ui/ButtonHelper.js": {
            "name": "easeljs/ui/ButtonHelper.js",
            "modules": {},
            "classes": {
                "ButtonHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/ui/Touch.js": {
            "name": "easeljs/ui/Touch.js",
            "modules": {},
            "classes": {
                "Touch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/utils/SpriteSheetBuilder.js": {
            "name": "easeljs/utils/SpriteSheetBuilder.js",
            "modules": {},
            "classes": {
                "SpriteSheetBuilder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/utils/SpriteSheetUtils.js": {
            "name": "easeljs/utils/SpriteSheetUtils.js",
            "modules": {},
            "classes": {
                "SpriteSheetUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/utils/UID.js": {
            "name": "easeljs/utils/UID.js",
            "modules": {},
            "classes": {
                "UID": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "easeljs/version.js": {
            "name": "easeljs/version.js",
            "modules": {},
            "classes": {
                "EaselJS": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "CreateJS": {
            "name": "CreateJS",
            "submodules": {},
            "classes": {
                "Event": 1,
                "EventDispatcher": 1,
                "Ticker": 1,
                "Utility Methods": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "createjs/utils/promote.js",
            "line": 36,
            "description": "A collection of Classes that are shared across all the CreateJS libraries.  The classes are included in the minified\nfiles of each library and are available on the createsjs namespace directly.\n\n<h4>Example</h4>\n\n     myObject.addEventListener(\"change\", createjs.proxy(myMethod, scope));",
            "itemtype": "main"
        },
        "EaselJS": {
            "name": "EaselJS",
            "submodules": {},
            "classes": {
                "Bitmap": 1,
                "BitmapText": 1,
                "Container": 1,
                "DOMElement": 1,
                "DisplayObject": 1,
                "Graphics": 1,
                "Graphics.LineTo": 1,
                "Graphics.MoveTo": 1,
                "Graphics.ArcTo": 1,
                "Graphics.Arc": 1,
                "Graphics.QuadraticCurveTo": 1,
                "Graphics.BezierCurveTo": 1,
                "Graphics.Rect": 1,
                "Graphics.ClosePath": 1,
                "Graphics.BeginPath": 1,
                "Graphics.Fill": 1,
                "Graphics.Stroke": 1,
                "Graphics.StrokeStyle": 1,
                "Graphics.StrokeDash": 1,
                "Graphics.RoundRect": 1,
                "Graphics.Circle": 1,
                "Graphics.Ellipse": 1,
                "Graphics.PolyStar": 1,
                "MovieClip": 1,
                "MovieClipPlugin": 1,
                "Shadow": 1,
                "Shape": 1,
                "Sprite": 1,
                "SpriteContainer": 1,
                "SpriteSheet": 1,
                "SpriteStage": 1,
                "Stage": 1,
                "Text": 1,
                "MouseEvent": 1,
                "AlphaMapFilter": 1,
                "AlphaMaskFilter": 1,
                "BlurFilter": 1,
                "ColorFilter": 1,
                "ColorMatrix": 1,
                "ColorMatrixFilter": 1,
                "Filter": 1,
                "DisplayProps": 1,
                "Matrix2D": 1,
                "Point": 1,
                "Rectangle": 1,
                "ButtonHelper": 1,
                "Touch": 1,
                "SpriteSheetBuilder": 1,
                "SpriteSheetUtils": 1,
                "UID": 1,
                "EaselJS": 1
            },
            "fors": {},
            "namespaces": {
                "Graphics": 1
            },
            "tag": "main",
            "file": "easeljs/version.js",
            "line": 9,
            "description": "The EaselJS Javascript library provides a retained graphics mode for canvas including a full hierarchical display\nlist, a core interaction model, and helper classes to make working with 2D graphics in Canvas much easier.\nEaselJS provides straight forward solutions for working with rich graphics and interactivity with HTML5 Canvas...\n\n<h4>Getting Started</h4>\nTo get started with Easel, create a {{#crossLink \"Stage\"}}{{/crossLink}} that wraps a CANVAS element, and add\n{{#crossLink \"DisplayObject\"}}{{/crossLink}} instances as children. EaselJS supports:\n<ul>\n     <li>Images using {{#crossLink \"Bitmap\"}}{{/crossLink}}</li>\n     <li>Vector graphics using {{#crossLink \"Shape\"}}{{/crossLink}} and {{#crossLink \"Graphics\"}}{{/crossLink}}</li>\n     <li>Animated bitmaps using {{#crossLink \"SpriteSheet\"}}{{/crossLink}} and {{#crossLink \"Sprite\"}}{{/crossLink}}\n     <li>Simple text instances using {{#crossLink \"Text\"}}{{/crossLink}}</li>\n     <li>Containers that hold other DisplayObjects using {{#crossLink \"Container\"}}{{/crossLink}}</li>\n     <li>Control HTML DOM elements using {{#crossLink \"DOMElement\"}}{{/crossLink}}</li>\n</ul>\n\nAll display objects can be added to the stage as children, or drawn to a canvas directly.\n\n<b>User Interactions</b><br />\nAll display objects on stage (except DOMElement) will dispatch events when interacted with using a mouse or\ntouch. EaselJS supports hover, press, and release events, as well as an easy-to-use drag-and-drop model. Check out\n{{#crossLink \"MouseEvent\"}}{{/crossLink}} for more information.\n\n<h4>Simple Example</h4>\nThis example illustrates how to create and position a {{#crossLink \"Shape\"}}{{/crossLink}} on the {{#crossLink \"Stage\"}}{{/crossLink}}\nusing EaselJS' drawing API.\n\n\t    //Create a stage by getting a reference to the canvas\n\t    stage = new createjs.Stage(\"demoCanvas\");\n\t    //Create a Shape DisplayObject.\n\t    circle = new createjs.Shape();\n\t    circle.graphics.beginFill(\"red\").drawCircle(0, 0, 40);\n\t    //Set position of Shape instance.\n\t    circle.x = circle.y = 50;\n\t    //Add Shape instance to stage display list.\n\t    stage.addChild(circle);\n\t    //Update stage will render next frame\n\t    stage.update();\n\n<b>Simple Interaction Example</b><br>\n\n     displayObject.addEventListener(\"click\", handleClick);\n     function handleClick(event){\n         // Click happenened\n     }\n\n     displayObject.addEventListener(\"mousedown\", handlePress);\n     function handlePress(event) {\n         // A mouse press happened.\n         // Listen for mouse move while the mouse is down:\n         event.addEventListener(\"mousemove\", handleMove);\n     }\n     function handleMove(event) {\n         // Check out the DragAndDrop example in GitHub for more\n     }\n\n<b>Simple Animation Example</b><br />\nThis example moves the shape created in the previous demo across the screen.\n\n\t    //Update stage will render next frame\n\t    createjs.Ticker.addEventListener(\"tick\", handleTick);\n\n\t    function handleTick() {\n         //Circle will move 10 units to the right.\n\t    \tcircle.x += 10;\n\t    \t//Will cause the circle to wrap back\n\t    \tif (circle.x > stage.canvas.width) { circle.x = 0; }\n\t    \tstage.update();\n\t    }\n\n<h4>Other Features</h4>\nEaselJS also has built in support for\n<ul><li>Canvas features such as {{#crossLink \"Shadow\"}}{{/crossLink}} and CompositeOperation</li>\n     <li>{{#crossLink \"Ticker\"}}{{/crossLink}}, a global heartbeat that objects can subscribe to</li>\n     <li>Filters, including a provided {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}, {{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}},\n     {{#crossLink \"AlphaMapFilter\"}}{{/crossLink}}, and {{#crossLink \"BlurFilter\"}}{{/crossLink}}. See {{#crossLink \"Filter\"}}{{/crossLink}}\n     for more information</li>\n     <li>A {{#crossLink \"ButtonHelper\"}}{{/crossLink}} utility, to easily create interactive buttons</li>\n     <li>{{#crossLink \"SpriteSheetUtils\"}}{{/crossLink}} and a {{#crossLink \"SpriteSheetBuilder\"}}{{/crossLink}} to\n     help build and manage {{#crossLink \"SpriteSheet\"}}{{/crossLink}} functionality at run-time.</li>\n</ul>\n\n<h4>Browser Support</h4>\nAll modern browsers that support Canvas will support EaselJS (<a href=\"http://caniuse.com/canvas\">http://caniuse.com/canvas</a>).\nBrowser performance may vary between platforms, for example, Android Canvas has poor hardware support, and is much\nslower on average than most other browsers.",
            "itemtype": "main"
        }
    },
    "classes": {
        "Event": {
            "name": "Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CreateJS",
            "namespace": "",
            "file": "createjs/events/Event.js",
            "line": 48,
            "description": "Contains properties and methods shared by all events for use with\n{{#crossLink \"EventDispatcher\"}}{{/crossLink}}.\n\nNote that Event objects are often reused, so you should never\nrely on an event object's state outside of the call stack it was received in.",
            "params": [
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether the event will bubble through the display list.",
                    "type": "Boolean"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the default behaviour of this event can be cancelled.",
                    "type": "Boolean"
                }
            ],
            "is_constructor": 1
        },
        "EventDispatcher": {
            "name": "EventDispatcher",
            "shortname": "EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ticker"
            ],
            "module": "CreateJS",
            "namespace": "",
            "file": "createjs/events/EventDispatcher.js",
            "line": 41,
            "description": "EventDispatcher provides methods for managing queues of event listeners and dispatching events.\n\nYou can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\nEventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\n\nTogether with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\nDOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\nbubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\n\nEventDispatcher also exposes a {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} method, which makes it easier\nto create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The \n{{#crossLink \"EventDispatcher/off\"}}{{/crossLink}} method is merely an alias to\n{{#crossLink \"EventDispatcher/removeEventListener\"}}{{/crossLink}}.\n\nAnother addition to the DOM Level 2 model is the {{#crossLink \"EventDispatcher/removeAllEventListeners\"}}{{/crossLink}}\nmethod, which can be used to listeners for all events, or listeners for a specific event. The Event object also \nincludes a {{#crossLink \"Event/remove\"}}{{/crossLink}} method which removes the active listener.\n\n<h4>Example</h4>\nAdd EventDispatcher capabilities to the \"MyClass\" class.\n\n     EventDispatcher.initialize(MyClass.prototype);\n\nAdd an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\n\n     instance.addEventListener(\"eventName\", handlerMethod);\n     function handlerMethod(event) {\n         console.log(event.target + \" Was Clicked\");\n     }\n\n<b>Maintaining proper scope</b><br />\nScope (ie. \"this\") can be be a challenge with events. Using the {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}}\nmethod to subscribe to events simplifies this.\n\n     instance.addEventListener(\"click\", function(event) {\n         console.log(instance == this); // false, scope is ambiguous.\n     });\n     \n     instance.on(\"click\", function(event) {\n         console.log(instance == this); // true, \"on\" uses dispatcher scope by default.\n     });\n\nIf you want to use addEventListener instead, you may want to use function.bind() or a similar proxy to manage\nscope.\n\n<b>Browser support</b>\nThe event model in CreateJS can be used separately from the suite in any project, however the inheritance model\nrequires modern browsers (IE9+).",
            "is_constructor": 1
        },
        "Ticker": {
            "name": "Ticker",
            "shortname": "Ticker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CreateJS",
            "namespace": "",
            "file": "createjs/utils/Ticker.js",
            "line": 41,
            "description": "The Ticker provides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe to the tick\nevent to be notified when a set time interval has elapsed.\n\nNote that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval\nwhen under high CPU load. The Ticker class uses a static interface (ex. `Ticker.framerate = 30;`) and\ncan not be instantiated.\n\n<h4>Example</h4>\n\n     createjs.Ticker.addEventListener(\"tick\", handleTick);\n     function handleTick(event) {\n         // Actions carried out each tick (aka frame)\n         if (!event.paused) {\n             // Actions carried out when the Ticker is not paused.\n         }\n     }",
            "uses": [
                "EventDispatcher"
            ],
            "static": 1
        },
        "Utility Methods": {
            "name": "Utility Methods",
            "shortname": "Utility Methods",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CreateJS",
            "namespace": "",
            "file": "createjs/utils/promote.js",
            "line": 36
        },
        "Bitmap": {
            "name": "Bitmap",
            "shortname": "Bitmap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Bitmap.js",
            "line": 38,
            "description": "A Bitmap represents an Image, Canvas, or Video in the display list. A Bitmap can be instantiated using an existing\nHTML element, or a string.\n\n<h4>Example</h4>\n\n     var bitmap = new createjs.Bitmap(\"imagePath.jpg\");\n\n<strong>Notes:</strong>\n<ol>\n    <li>When a string path or image tag that is not yet loaded is used, the stage may need to be redrawn before it\n     will be displayed.</li>\n    <li>Bitmaps with an SVG source currently will not respect an alpha value other than 0 or 1. To get around this,\n    the Bitmap can be cached.</li>\n    <li>Bitmaps with an SVG source will taint the canvas with cross-origin data, which prevents interactivity. This\n    happens in all browsers except recent Firefox builds.</li>\n    <li>Images loaded cross-origin will throw cross-origin security errors when interacted with using a mouse, using\n    methods such as `getObjectUnderPoint`, or using filters, or caching. You can get around this by setting\n    `crossOrigin` flags on your images before passing them to EaselJS, eg: `img.crossOrigin=\"Anonymous\";`</li>\n</ol>",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "imageOrUri",
                    "description": "The source object or URI to an image to\ndisplay. This can be either an Image, Canvas, or Video object, or a string URI to an image file to load and use.\nIf it is a URI, a new Image object will be constructed and assigned to the .image property.",
                    "type": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | String"
                }
            ]
        },
        "BitmapText": {
            "name": "BitmapText",
            "shortname": "BitmapText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/BitmapText.js",
            "line": 36,
            "description": "Displays text using bitmap glyphs defined in a sprite sheet. Multi-line text is supported\nusing new line characters, but automatic wrapping is not supported. See the \n{{#crossLink \"BitmapText/spriteSheet:property\"}}{{/crossLink}}\nproperty for more information on defining glyphs.\n\n<strong>Important:</strong> BitmapText extends Container, but is not designed to be used as one.\nAs such, methods like addChild and removeChild are disabled.",
            "extends": "DisplayObject",
            "params": [
                {
                    "name": "text",
                    "description": "The text to display.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                },
                {
                    "name": "spriteSheet",
                    "description": "The spritesheet that defines the character glyphs.",
                    "type": "SpriteSheet",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "is_constructor": 1
        },
        "Container": {
            "name": "Container",
            "shortname": "Container",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Container.js",
            "line": 37,
            "description": "A Container is a nestable display list that allows you to work with compound display elements. For  example you could\ngroup arm, leg, torso and head {{#crossLink \"Bitmap\"}}{{/crossLink}} instances together into a Person Container, and\ntransform them as a group, while still being able to move the individual parts relative to each other. Children of\ncontainers have their <code>transform</code> and <code>alpha</code> properties concatenated with their parent\nContainer.\n\nFor example, a {{#crossLink \"Shape\"}}{{/crossLink}} with x=100 and alpha=0.5, placed in a Container with <code>x=50</code>\nand <code>alpha=0.7</code> will be rendered to the canvas at <code>x=150</code> and <code>alpha=0.35</code>.\nContainers have some overhead, so you generally shouldn't create a Container to hold a single child.\n\n<h4>Example</h4>\n\n     var container = new createjs.Container();\n     container.addChild(bitmapInstance, shapeInstance);\n     container.x = 100;",
            "extends": "DisplayObject",
            "is_constructor": 1
        },
        "DOMElement": {
            "name": "DOMElement",
            "shortname": "DOMElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/DOMElement.js",
            "line": 41,
            "description": "<b>This class is still experimental, and more advanced use is likely to be buggy. Please report bugs.</b>\n\nA DOMElement allows you to associate a HTMLElement with the display list. It will be transformed\nwithin the DOM as though it is child of the {{#crossLink \"Container\"}}{{/crossLink}} it is added to. However, it is\nnot rendered to canvas, and as such will retain whatever z-index it has relative to the canvas (ie. it will be\ndrawn in front of or behind the canvas).\n\nThe position of a DOMElement is relative to their parent node in the DOM. It is recommended that\nthe DOM Object be added to a div that also contains the canvas so that they share the same position\non the page.\n\nDOMElement is useful for positioning HTML elements over top of canvas content, and for elements\nthat you want to display outside the bounds of the canvas. For example, a tooltip with rich HTML\ncontent.\n\n<h4>Mouse Interaction</h4>\n\nDOMElement instances are not full EaselJS display objects, and do not participate in EaselJS mouse\nevents or support methods like hitTest. To get mouse events from a DOMElement, you must instead add handlers to\nthe htmlElement (note, this does not support EventDispatcher)\n\n     var domElement = new createjs.DOMElement(htmlElement);\n     domElement.htmlElement.onclick = function() {\n         console.log(\"clicked\");\n     }",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "htmlElement",
                    "description": "A reference or id for the DOM element to manage.",
                    "type": "HTMLElement"
                }
            ]
        },
        "DisplayObject": {
            "name": "DisplayObject",
            "shortname": "DisplayObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/DisplayObject.js",
            "line": 129,
            "description": "DisplayObject is an abstract class that should not be constructed directly. Instead construct subclasses such as\n{{#crossLink \"Container\"}}{{/crossLink}}, {{#crossLink \"Bitmap\"}}{{/crossLink}}, and {{#crossLink \"Shape\"}}{{/crossLink}}.\nDisplayObject is the base class for all display classes in the EaselJS library. It defines the core properties and\nmethods that are shared between all display objects, such as transformation properties (x, y, scaleX, scaleY, etc),\ncaching, and mouse handlers.",
            "extends": "EventDispatcher",
            "is_constructor": 1
        },
        "Graphics": {
            "name": "Graphics",
            "shortname": "Graphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 41,
            "description": "The Graphics class exposes an easy to use API for generating vector drawing instructions and drawing them to a\nspecified context. Note that you can use Graphics without any dependency on the EaselJS framework by calling {{#crossLink \"Graphics/draw\"}}{{/crossLink}}\ndirectly, or it can be used with the {{#crossLink \"Shape\"}}{{/crossLink}} object to draw vector graphics within the\ncontext of an EaselJS display list.\n\nThere are two approaches to working with Graphics object: calling methods on a Graphics instance (the \"Graphics API\"), or\ninstantiating Graphics command objects and adding them to the graphics queue via {{#crossLink \"Graphics/append\"}}{{/crossLink}}.\nThe former abstracts the latter, simplifying beginning and ending paths, fills, and strokes.\n\n     var g = new createjs.Graphics();\n     g.setStrokeStyle(1);\n     g.beginStroke(\"#000000\");\n     g.beginFill(\"red\");\n     g.drawCircle(0,0,30);\n\nAll drawing methods in Graphics return the Graphics instance, so they can be chained together. For example,\nthe following line of code would generate the instructions to draw a rectangle with a red stroke and blue fill:\n\n     myGraphics.beginStroke(\"red\").beginFill(\"blue\").drawRect(20, 20, 100, 50);\n\nEach graphics API call generates a command object (see below). The last command to be created can be accessed via\n{{#crossLink \"Graphics/command:property\"}}{{/crossLink}}:\n\n     var fillCommand = myGraphics.beginFill(\"red\").command;\n     // ... later, update the fill style/color:\n     fillCommand.style = \"blue\";\n     // or change it to a bitmap fill:\n     fillCommand.bitmap(myImage);\n\nFor more direct control of rendering, you can instantiate and append command objects to the graphics queue directly. In this case, you\nneed to manage path creation manually, and ensure that fill/stroke is applied to a defined path:\n\n     // start a new path. Graphics.beginCmd is a reusable BeginPath instance:\n     myGraphics.append(createjs.Graphics.beginCmd);\n     // we need to define the path before applying the fill:\n     var circle = new createjs.Graphics.Circle(0,0,30);\n     myGraphics.append(circle);\n     // fill the path we just defined:\n     var fill = new createjs.Graphics.Fill(\"red\");\n     myGraphics.append(fill);\n\nThese approaches can be used together, for example to insert a custom command:\n\n     myGraphics.beginFill(\"red\");\n     var customCommand = new CustomSpiralCommand(etc);\n     myGraphics.append(customCommand);\n     myGraphics.beginFill(\"blue\");\n     myGraphics.drawCircle(0, 0, 30);\n\nSee {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more info on creating custom commands.\n\n<h4>Tiny API</h4>\nThe Graphics class also includes a \"tiny API\", which is one or two-letter methods that are shortcuts for all of the\nGraphics methods. These methods are great for creating compact instructions, and is used by the Toolkit for CreateJS\nto generate readable code. All tiny methods are marked as protected, so you can view them by enabling protected\ndescriptions in the docs.\n\n<table>\n    <tr><td><b>Tiny</b></td><td><b>Method</b></td><td><b>Tiny</b></td><td><b>Method</b></td></tr>\n    <tr><td>mt</td><td>{{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} </td>\n    <td>lt</td> <td>{{#crossLink \"Graphics/lineTo\"}}{{/crossLink}}</td></tr>\n    <tr><td>a/at</td><td>{{#crossLink \"Graphics/arc\"}}{{/crossLink}} / {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} </td>\n    <td>bt</td><td>{{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} </td></tr>\n    <tr><td>qt</td><td>{{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} (also curveTo)</td>\n    <td>r</td><td>{{#crossLink \"Graphics/rect\"}}{{/crossLink}} </td></tr>\n    <tr><td>cp</td><td>{{#crossLink \"Graphics/closePath\"}}{{/crossLink}} </td>\n    <td>c</td><td>{{#crossLink \"Graphics/clear\"}}{{/crossLink}} </td></tr>\n    <tr><td>f</td><td>{{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} </td>\n    <td>lf</td><td>{{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} </td></tr>\n    <tr><td>rf</td><td>{{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} </td>\n    <td>bf</td><td>{{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} </td></tr>\n    <tr><td>ef</td><td>{{#crossLink \"Graphics/endFill\"}}{{/crossLink}} </td>\n    <td>ss / sd</td><td>{{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} / {{#crossLink \"Graphics/setStrokeDash\"}}{{/crossLink}} </td></tr>\n    <tr><td>s</td><td>{{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} </td>\n    <td>ls</td><td>{{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} </td></tr>\n    <tr><td>rs</td><td>{{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} </td>\n    <td>bs</td><td>{{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} </td></tr>\n    <tr><td>es</td><td>{{#crossLink \"Graphics/endStroke\"}}{{/crossLink}} </td>\n    <td>dr</td><td>{{#crossLink \"Graphics/drawRect\"}}{{/crossLink}} </td></tr>\n    <tr><td>rr</td><td>{{#crossLink \"Graphics/drawRoundRect\"}}{{/crossLink}} </td>\n    <td>rc</td><td>{{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} </td></tr>\n    <tr><td>dc</td><td>{{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} </td>\n    <td>de</td><td>{{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} </td></tr>\n    <tr><td>dp</td><td>{{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} </td>\n    <td>p</td><td>{{#crossLink \"Graphics/decodePath\"}}{{/crossLink}} </td></tr>\n</table>\n\nHere is the above example, using the tiny API instead.\n\n     myGraphics.s(\"red\").f(\"blue\").r(20, 20, 100, 50);",
            "is_constructor": 1
        },
        "Graphics.LineTo": {
            "name": "Graphics.LineTo",
            "shortname": "LineTo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 1636,
            "description": "Graphics command object. See {{#crossLink \"Graphics/lineTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information. See {{#crossLink \"Graphics\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Graphics.MoveTo": {
            "name": "Graphics.MoveTo",
            "shortname": "MoveTo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 1660,
            "description": "Graphics command object. See {{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Graphics.ArcTo": {
            "name": "Graphics.ArcTo",
            "shortname": "ArcTo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 1684,
            "description": "Graphics command object. See {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Graphics.Arc": {
            "name": "Graphics.Arc",
            "shortname": "Arc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 1725,
            "description": "Graphics command object. See {{#crossLink \"Graphics/arc\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "startAngle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "endAngle",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "anticlockwise",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Graphics.QuadraticCurveTo": {
            "name": "Graphics.QuadraticCurveTo",
            "shortname": "QuadraticCurveTo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 1772,
            "description": "Graphics command object. See {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cpx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cpy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Graphics.BezierCurveTo": {
            "name": "Graphics.BezierCurveTo",
            "shortname": "BezierCurveTo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 1807,
            "description": "Graphics command object. See {{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cp1x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp1y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp2x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp2y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Graphics.Rect": {
            "name": "Graphics.Rect",
            "shortname": "Rect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 1853,
            "description": "Graphics command object. See {{#crossLink \"Graphics/rect\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Graphics.ClosePath": {
            "name": "Graphics.ClosePath",
            "shortname": "ClosePath",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 1888,
            "description": "Graphics command object. See {{#crossLink \"Graphics/closePath\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1
        },
        "Graphics.BeginPath": {
            "name": "Graphics.BeginPath",
            "shortname": "BeginPath",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 1901,
            "description": "Graphics command object to begin a new path. See {{#crossLink \"Graphics\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1
        },
        "Graphics.Fill": {
            "name": "Graphics.Fill",
            "shortname": "Fill",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 1914,
            "description": "Graphics command object. See {{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "style",
                    "description": "A valid Context2D fillStyle.",
                    "type": "Object"
                },
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix2D"
                }
            ]
        },
        "Graphics.Stroke": {
            "name": "Graphics.Stroke",
            "shortname": "Stroke",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 2003,
            "description": "Graphics command object. See {{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "style",
                    "description": "A valid Context2D fillStyle.",
                    "type": "Object"
                },
                {
                    "name": "ignoreScale",
                    "description": "",
                    "type": "Boolean"
                }
            ]
        },
        "Graphics.StrokeStyle": {
            "name": "Graphics.StrokeStyle",
            "shortname": "StrokeStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 2074,
            "description": "Graphics command object. See {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "caps",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "butt"
                },
                {
                    "name": "joints",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "miter"
                },
                {
                    "name": "miterLimit",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "10"
                },
                {
                    "name": "ignoreScale",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ]
        },
        "Graphics.StrokeDash": {
            "name": "Graphics.StrokeDash",
            "shortname": "StrokeDash",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 2123,
            "description": "Graphics command object. See {{#crossLink \"Graphics/setStrokeDash\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "segments",
                    "description": "",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ]
        },
        "Graphics.RoundRect": {
            "name": "Graphics.RoundRect",
            "shortname": "RoundRect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 2163,
            "description": "Graphics command object. See {{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radiusTL",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radiusTR",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radiusBR",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radiusBL",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Graphics.Circle": {
            "name": "Graphics.Circle",
            "shortname": "Circle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 2244,
            "description": "Graphics command object. See {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Graphics.Ellipse": {
            "name": "Graphics.Ellipse",
            "shortname": "Ellipse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 2274,
            "description": "Graphics command object. See {{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "Graphics.PolyStar": {
            "name": "Graphics.PolyStar",
            "shortname": "PolyStar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "Graphics",
            "file": "easeljs/display/Graphics.js",
            "line": 2326,
            "description": "Graphics command object. See {{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sides",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pointSize",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "MovieClip": {
            "name": "MovieClip",
            "shortname": "MovieClip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/MovieClip.js",
            "line": 41,
            "description": "The MovieClip class associates a TweenJS Timeline with an EaselJS {{#crossLink \"Container\"}}{{/crossLink}}. It allows\nyou to create objects which encapsulate timeline animations, state changes, and synched actions. Due to the\ncomplexities inherent in correctly setting up a MovieClip, it is largely intended for tool output and is not included\nin the main EaselJS library.\n\nCurrently MovieClip only works properly if it is tick based (as opposed to time based) though some concessions have\nbeen made to support time-based timelines in the future.\n\n<h4>Example</h4>\nThis example animates two shapes back and forth. The grey shape starts on the left, but we jump to a mid-point in\nthe animation using {{#crossLink \"MovieClip/gotoAndPlay\"}}{{/crossLink}}.\n\n     var stage = new createjs.Stage(\"canvas\");\n     createjs.Ticker.addEventListener(\"tick\", stage);\n\n     var mc = new createjs.MovieClip(null, 0, true, {start:20});\n     stage.addChild(mc);\n\n     var child1 = new createjs.Shape(\n         new createjs.Graphics().beginFill(\"#999999\")\n             .drawCircle(30,30,30));\n     var child2 = new createjs.Shape(\n         new createjs.Graphics().beginFill(\"#5a9cfb\")\n             .drawCircle(30,30,30));\n\n     mc.timeline.addTween(\n         createjs.Tween.get(child1)\n             .to({x:0}).to({x:60}, 50).to({x:0}, 50));\n     mc.timeline.addTween(\n         createjs.Tween.get(child2)\n             .to({x:60}).to({x:0}, 50).to({x:60}, 50));\n\n     mc.gotoAndPlay(\"start\");\n\nIt is recommended to use <code>tween.to()</code> to animate and set properties (use no duration to have it set\nimmediately), and the <code>tween.wait()</code> method to create delays between animations. Note that using the\n<code>tween.set()</code> method to affect properties will likely not provide the desired result.",
            "mainName": "MovieClip",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mode",
                    "description": "Initial value for the mode property. One of {{#crossLink \"MovieClip/INDEPENDENT:property\"}}{{/crossLink}},\n{{#crossLink \"MovieClip/SINGLE_FRAME:property\"}}{{/crossLink}}, or {{#crossLink \"MovieClip/SYNCHED:property\"}}{{/crossLink}}.\nThe default is {{#crossLink \"MovieClip/INDEPENDENT:property\"}}{{/crossLink}}.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "independent"
                },
                {
                    "name": "startPosition",
                    "description": "Initial value for the {{#crossLink \"MovieClip/startPosition:property\"}}{{/crossLink}}\nproperty.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "loop",
                    "description": "Initial value for the {{#crossLink \"MovieClip/loop:property\"}}{{/crossLink}}\nproperty. The default is `true`.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "labels",
                    "description": "A hash of labels to pass to the {{#crossLink \"MovieClip/timeline:property\"}}{{/crossLink}}\ninstance associated with this MovieClip. Labels only need to be passed if they need to be used.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "null"
                }
            ]
        },
        "MovieClipPlugin": {
            "name": "MovieClipPlugin",
            "shortname": "MovieClipPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/MovieClip.js",
            "line": 645,
            "description": "This plugin works with <a href=\"http://tweenjs.com\" target=\"_blank\">TweenJS</a> to prevent the startPosition\nproperty from tweening.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "Shadow": {
            "name": "Shadow",
            "shortname": "Shadow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Shadow.js",
            "line": 41,
            "description": "This class encapsulates the properties required to define a shadow to apply to a {{#crossLink \"DisplayObject\"}}{{/crossLink}}\nvia its <code>shadow</code> property.\n\n<h4>Example</h4>\n\n     myImage.shadow = new createjs.Shadow(\"#000000\", 5, 5, 10);",
            "is_constructor": 1,
            "params": [
                {
                    "name": "color",
                    "description": "The color of the shadow. This can be any valid CSS color value.",
                    "type": "String"
                },
                {
                    "name": "offsetX",
                    "description": "The x offset of the shadow in pixels.",
                    "type": "Number"
                },
                {
                    "name": "offsetY",
                    "description": "The y offset of the shadow in pixels.",
                    "type": "Number"
                },
                {
                    "name": "blur",
                    "description": "The size of the blurring effect.",
                    "type": "Number"
                }
            ]
        },
        "Shape": {
            "name": "Shape",
            "shortname": "Shape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Shape.js",
            "line": 41,
            "description": "A Shape allows you to display vector art in the display list. It composites a {{#crossLink \"Graphics\"}}{{/crossLink}}\ninstance which exposes all of the vector drawing methods. The Graphics instance can be shared between multiple Shape\ninstances to display the same vector graphics with different positions or transforms.\n\nIf the vector art will not\nchange between draws, you may want to use the {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method to reduce the\nrendering cost.\n\n<h4>Example</h4>\n\n     var graphics = new createjs.Graphics().beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);\n     var shape = new createjs.Shape(graphics);\n\n     //Alternatively use can also use the graphics property of the Shape class to renderer the same as above.\n     var shape = new createjs.Shape();\n     shape.graphics.beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "graphics",
                    "description": "Optional. The graphics instance to display. If null, a new Graphics instance will be created.",
                    "type": "Graphics"
                }
            ]
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Sprite.js",
            "line": 41,
            "description": "Displays a frame or sequence of frames (ie. an animation) from a SpriteSheet instance. A sprite sheet is a series of\nimages (usually animation frames) combined into a single image. For example, an animation consisting of 8 100x100\nimages could be combined into a 400x200 sprite sheet (4 frames across by 2 high). You can display individual frames,\nplay frames as an animation, and even sequence animations together.\n\nSee the {{#crossLink \"SpriteSheet\"}}{{/crossLink}} class for more information on setting up frames and animations.\n\n<h4>Example</h4>\n\n     var instance = new createjs.Sprite(spriteSheet);\n     instance.gotoAndStop(\"frameName\");\n\nUntil {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}} is called,\nonly the first defined frame defined in the sprite sheet will be displayed.",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "spriteSheet",
                    "description": "The SpriteSheet instance to play back. This includes the source image(s), frame\ndimensions, and frame data. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.",
                    "type": "SpriteSheet"
                },
                {
                    "name": "frameOrAnimation",
                    "description": "The frame number or animation to play initially.",
                    "type": "String|Number",
                    "optional": true
                }
            ]
        },
        "SpriteContainer": {
            "name": "SpriteContainer",
            "shortname": "SpriteContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/SpriteContainer.js",
            "line": 36,
            "description": "A SpriteContainer is a nestable display list that enables aggressively optimized rendering of bitmap content.\nIn order to accomplish these optimizations, SpriteContainer enforces a few restrictions on its content.\n\nRestrictions:\n    - only Sprite, SpriteContainer, BitmapText and DOMElement are allowed to be added as children.\n    - a spriteSheet MUST be either be passed into the constructor or defined on the first child added.\n    - all children (with the exception of DOMElement) MUST use the same spriteSheet.\n\n<h4>Example</h4>\n\n     var data = {\n         images: [\"sprites.jpg\"],\n         frames: {width:50, height:50},\n         animations: {run:[0,4], jump:[5,8,\"run\"]}\n     };\n     var spriteSheet = new createjs.SpriteSheet(data);\n     var container = new createjs.SpriteContainer(spriteSheet);\n     container.addChild(spriteInstance, spriteInstance2);\n     container.x = 100;\n\n<strong>Note:</strong> SpriteContainer is not included in the minified version of EaselJS.",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "spriteSheet",
                    "description": "The spriteSheet to use for this SpriteContainer and its children.",
                    "type": "SpriteSheet",
                    "optional": true
                }
            ]
        },
        "SpriteSheet": {
            "name": "SpriteSheet",
            "shortname": "SpriteSheet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/SpriteSheet.js",
            "line": 41,
            "description": "Encapsulates the properties and methods associated with a sprite sheet. A sprite sheet is a series of images (usually\nanimation frames) combined into a larger image (or images). For example, an animation consisting of eight 100x100\nimages could be combined into a single 400x200 sprite sheet (4 frames across by 2 high).\n\nThe data passed to the SpriteSheet constructor defines:\n<ol>\n\t<li> The source image or images to use.</li>\n\t<li> The positions of individual image frames.</li>\n\t<li> Sequences of frames that form named animations. Optional.</li>\n\t<li> The target playback framerate. Optional.</li>\n</ol>\n<h3>SpriteSheet Format</h3>\nSpriteSheets are an object with two required properties (`images` and `frames`), and two optional properties\n(`framerate` and `animations`). This makes them easy to define in javascript code, or in JSON.\n\n<h4>images</h4>\nAn array of source images. Images can be either an HTMlimage\ninstance, or a uri to an image. The former is recommended to control preloading.\n\n\timages: [image1, \"path/to/image2.png\"],\n\n<h4>frames</h4>\nDefines the individual frames. There are two supported formats for frame data:\nWhen all of the frames are the same size (in a grid), use an object with `width`, `height`, `regX`, `regY`,\nand `count` properties.\n\n<ul>\n <li>`width` & `height` are required and specify the dimensions of the frames</li>\n <li>`regX` & `regY` indicate the registration point or \"origin\" of the frames</li>\n <li>`spacing` indicate the spacing between frames</li>\n <li>`margin` specify the margin around the image(s)</li>\n <li>`count` allows you to specify the total number of frames in the spritesheet; if omitted, this will\n be calculated based on the dimensions of the source images and the frames. Frames will be assigned\n indexes based on their position in the source images (left to right, top to bottom).</li>\n</ul>\n\n \tframes: {width:64, height:64, count:20, regX: 32, regY:64, spacing:0, margin:0}\n\nIf the frames are of different sizes, use an array of frame definitions. Each definition is itself an array\nwith 4 required and 3 optional entries, in the order:\n\n<ul>\n <li>The first four, `x`, `y`, `width`, and `height` are required and define the frame rectangle.</li>\n <li>The fifth, `imageIndex`, specifies the index of the source image (defaults to 0)</li>\n <li>The last two, `regX` and `regY` specify the registration point of the frame</li>\n</ul>\n\n\tframes: [\n\t\t// x, y, width, height, imageIndex*, regX*, regY*\n\t\t[64, 0, 96, 64],\n\t\t[0, 0, 64, 64, 1, 32, 32]\n\t\t// etc.\n\t]\n\n<h4>animations</h4>\nOptional. An object defining sequences of frames to play as named animations. Each property corresponds to an\nanimation of the same name. Each animation must specify the frames to play, and may\nalso include a relative playback `speed` (ex. 2 would playback at double speed, 0.5 at half), and\nthe name of the `next` animation to sequence to after it completes.\n\nThere are three formats supported for defining the frames in an animation, which can be mixed and matched as appropriate:\n<ol>\n\t<li>for a single frame animation, you can simply specify the frame index\n\n\t\tanimations: {\n\t\t\tsit: 7\n\t\t}\n\n</li>\n<li>\n     for an animation of consecutive frames, you can use an array with two required, and two optional entries\n\t\tin the order: `start`, `end`, `next`, and `speed`. This will play the frames from start to end inclusive.\n\n\t\tanimations: {\n\t\t\t// start, end, next*, speed*\n\t\t\trun: [0, 8],\n\t\t\tjump: [9, 12, \"run\", 2]\n\t\t}\n\n </li>\n <li>\n    for non-consecutive frames, you can use an object with a `frames` property defining an array of frame\n    indexes to play in order. The object can also specify `next` and `speed` properties.\n\n\t\tanimations: {\n\t\t\twalk: {\n\t\t\t\tframes: [1,2,3,3,2,1]\n\t\t\t},\n\t\t\tshoot: {\n\t\t\t\tframes: [1,4,5,6],\n\t\t\t\tnext: \"walk\",\n\t\t\t\tspeed: 0.5\n\t\t\t}\n\t\t}\n\n </li>\n</ol>\n<strong>Note:</strong> the `speed` property was added in EaselJS 0.7.0. Earlier versions had a `frequency`\nproperty instead, which was the inverse of `speed`. For example, a value of \"4\" would be 1/4 normal speed in\nearlier versions, but is 4x normal speed in EaselJS 0.7.0+.\n\n<h4>framerate</h4>\nOptional. Indicates the default framerate to play this spritesheet at in frames per second. See\n{{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} for more information.\n\n\t\tframerate: 20\n\nNote that the Sprite framerate will only work if the stage update method is provided with the {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\nevent generated by the {{#crossLink \"Ticker\"}}{{/crossLink}}.\n\n\t\tcreatejs.Ticker.on(\"tick\", handleTick);\n\t\tfunction handleTick(event) {\n\t\t\tstage.update(event);\n\t\t}\n\n<h3>Example</h3>\nTo define a simple sprite sheet, with a single image \"sprites.jpg\" arranged in a regular 50x50 grid with three\nanimations: \"stand\" showing the first frame, \"run\" looping frame 1-5 inclusive, and \"jump\" playing frame 6-8 and\nsequencing back to run.\n\n\t\tvar data = {\n\t\t\timages: [\"sprites.jpg\"],\n\t\t\tframes: {width:50, height:50},\n\t\t\tanimations: {\n\t\t\t\tstand:0,\n\t\t\t\trun:[1,5],\n\t\t\t\tjump:[6,8,\"run\"]\n\t\t\t}\n\t\t};\n\t\tvar spriteSheet = new createjs.SpriteSheet(data);\n\t\tvar animation = new createjs.Sprite(spriteSheet, \"run\");\n\n<h3>Generating SpriteSheet Images</h3>\nSpritesheets can be created manually by combining images in PhotoShop, and specifying the frame size or\ncoordinates manually, however there are a number of tools that facilitate this.\n<ul>\n    <li>Exporting SpriteSheets or HTML5 content from Flash Pro supports the EaselJS SpriteSheet format.</li>\n    <li>The popular <a href=\"https://www.codeandweb.com/texturepacker/easeljs\" target=\"_blank\">Texture Packer</a> has\n    EaselJS support.\n    <li>SWF animations in Flash can be exported to SpriteSheets using <a href=\"http://createjs.com/zoe\" target=\"_blank\"></a></li>\n</ul>\n\n<h3>Cross Origin Issues</h3>\n<strong>Warning:</strong> Images loaded cross-origin will throw cross-origin security errors when interacted with\nusing:\n<ul>\n    <li>a mouse</li>\n    <li>methods such as {{#crossLink \"Container/getObjectUnderPoint\"}}{{/crossLink}}</li>\n    <li>Filters (see {{#crossLink \"Filter\"}}{{/crossLink}})</li>\n    <li>caching (see {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}})</li>\n</ul>\nYou can get around this by setting `crossOrigin` property on your images before passing them to EaselJS, or\nsetting the `crossOrigin` property on PreloadJS' LoadQueue or LoadItems.\n\n\t\tvar image = new Image();\n\t\timg.crossOrigin=\"Anonymous\";\n\t\timg.src = \"http://server-with-CORS-support.com/path/to/image.jpg\";\n\nIf you pass string paths to SpriteSheets, they will not work cross-origin. The server that stores the image must\nsupport cross-origin requests, or this will not work. For more information, check out\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\">CORS overview on MDN</a>.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "An object describing the SpriteSheet data.",
                    "type": "Object"
                }
            ],
            "extends": "EventDispatcher"
        },
        "SpriteStage": {
            "name": "SpriteStage",
            "shortname": "SpriteStage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/SpriteStage.js",
            "line": 49,
            "description": "A sprite stage is the root level {{#crossLink \"Container\"}}{{/crossLink}} for an aggressively optimized display list. Each time its {{#crossLink \"Stage/tick\"}}{{/crossLink}}\nmethod is called, it will render its display list to its target canvas. WebGL content is fully compatible with the existing Context2D renderer.\nOn devices or browsers that don't support WebGL, content will automatically be rendered via canvas 2D.\n\nRestrictions:\n    - only Sprite, SpriteContainer, BitmapText, Bitmap and DOMElement are allowed to be added to the display list.\n    - a child being added (with the exception of DOMElement) MUST have an image or spriteSheet defined on it.\n    - a child's image/spriteSheet MUST never change while being on the display list.\n\n<h4>Example</h4>\nThis example creates a sprite stage, adds a child to it, then uses {{#crossLink \"Ticker\"}}{{/crossLink}} to update the child\nand redraw the stage using {{#crossLink \"SpriteStage/update\"}}{{/crossLink}}.\n\n     var stage = new createjs.SpriteStage(\"canvasElementId\", false, false);\n     stage.updateViewport(800, 600);\n     var image = new createjs.Bitmap(\"imagePath.png\");\n     stage.addChild(image);\n     createjs.Ticker.addEventListener(\"tick\", handleTick);\n     function handleTick(event) {\n         image.x += 10;\n         stage.update();\n     }\n\n<strong>Note:</strong> SpriteStage is not included in the minified version of EaselJS.",
            "extends": "Stage",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvas",
                    "description": "A canvas object that the SpriteStage will render to, or the string id\nof a canvas object in the current document.",
                    "type": "HTMLCanvasElement | String | Object"
                },
                {
                    "name": "preserveDrawingBuffer",
                    "description": "If true, the canvas is NOT auto-cleared by WebGL (spec discourages true). Useful if you want to use p.autoClear = false.",
                    "type": "Boolean"
                },
                {
                    "name": "antialias",
                    "description": "Specifies whether or not the browser's WebGL implementation should try to perform antialiasing.",
                    "type": "Boolean"
                }
            ]
        },
        "Stage": {
            "name": "Stage",
            "shortname": "Stage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Stage.js",
            "line": 41,
            "description": "A stage is the root level {{#crossLink \"Container\"}}{{/crossLink}} for a display list. Each time its {{#crossLink \"Stage/tick\"}}{{/crossLink}}\nmethod is called, it will render its display list to its target canvas.\n\n<h4>Example</h4>\nThis example creates a stage, adds a child to it, then uses {{#crossLink \"Ticker\"}}{{/crossLink}} to update the child\nand redraw the stage using {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n\n     var stage = new createjs.Stage(\"canvasElementId\");\n     var image = new createjs.Bitmap(\"imagePath.png\");\n     stage.addChild(image);\n     createjs.Ticker.addEventListener(\"tick\", handleTick);\n     function handleTick(event) {\n         image.x += 10;\n         stage.update();\n     }",
            "extends": "Container",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvas",
                    "description": "A canvas object that the Stage will render to, or the string id\nof a canvas object in the current document.",
                    "type": "HTMLCanvasElement | String | Object"
                }
            ]
        },
        "Text": {
            "name": "Text",
            "shortname": "Text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/display/Text.js",
            "line": 41,
            "description": "Display one or more lines of dynamic text (not user editable) in the display list. Line wrapping support (using the\nlineWidth) is very basic, wrapping on spaces and tabs only. Note that as an alternative to Text, you can position HTML\ntext above or below the canvas relative to items in the display list using the {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\nmethod, or using {{#crossLink \"DOMElement\"}}{{/crossLink}}.\n\n<b>Please note that Text does not support HTML text, and can only display one font style at a time.</b> To use\nmultiple font styles, you will need to create multiple text instances, and position them manually.\n\n<h4>Example</h4>\n\n     var text = new createjs.Text(\"Hello World\", \"20px Arial\", \"#ff7700\");\n     text.x = 100;\n     text.textBaseline = \"alphabetic\";\n\nCreateJS Text supports web fonts (the same rules as Canvas). The font must be loaded and supported by the browser\nbefore it can be displayed.\n\n<strong>Note:</strong> Text can be expensive to generate, so cache instances where possible. Be aware that not all\nbrowsers will render Text exactly the same.",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "The text to display.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "font",
                    "description": "The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold\n36px Arial\").",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "color",
                    "description": "The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex.\n\"#F00\", \"red\", or \"#FF0000\").",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "MouseEvent": {
            "name": "MouseEvent",
            "shortname": "MouseEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/events/MouseEvent.js",
            "line": 41,
            "description": "Passed as the parameter to all mouse/pointer/touch related events. For a listing of mouse events and their properties,\nsee the {{#crossLink \"DisplayObject\"}}{{/crossLink}} and {{#crossLink \"Stage\"}}{{/crossLink}} event listings.",
            "params": [
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether the event will bubble through the display list.",
                    "type": "Boolean"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the default behaviour of this event can be cancelled.",
                    "type": "Boolean"
                },
                {
                    "name": "stageX",
                    "description": "The normalized x position relative to the stage.",
                    "type": "Number"
                },
                {
                    "name": "stageY",
                    "description": "The normalized y position relative to the stage.",
                    "type": "Number"
                },
                {
                    "name": "nativeEvent",
                    "description": "The native DOM event related to this mouse event.",
                    "type": "MouseEvent"
                },
                {
                    "name": "pointerID",
                    "description": "The unique id for the pointer.",
                    "type": "Number"
                },
                {
                    "name": "primary",
                    "description": "Indicates whether this is the primary pointer in a multitouch environment.",
                    "type": "Boolean"
                },
                {
                    "name": "rawX",
                    "description": "The raw x position relative to the stage.",
                    "type": "Number"
                },
                {
                    "name": "rawY",
                    "description": "The raw y position relative to the stage.",
                    "type": "Number"
                },
                {
                    "name": "relatedTarget",
                    "description": "The secondary target for the event.",
                    "type": "DisplayObject"
                }
            ],
            "extends": "Event",
            "is_constructor": 1
        },
        "AlphaMapFilter": {
            "name": "AlphaMapFilter",
            "shortname": "AlphaMapFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/filters/AlphaMapFilter.js",
            "line": 41,
            "description": "Applies a greyscale alpha map image (or canvas) to the target, such that the alpha channel of the result will\nbe copied from the red channel of the map, and the RGB channels will be copied from the target.\n\nGenerally, it is recommended that you use {{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}, because it has much\nbetter performance.\n\n<h4>Example</h4>\nThis example draws a red->blue box, caches it, and then uses the cache canvas as an alpha map on a 100x100 image.\n\n      var box = new createjs.Shape();\n      box.graphics.beginLinearGradientFill([\"#ff0000\", \"#0000ff\"], [0, 1], 0, 0, 0, 100)\n      box.graphics.drawRect(0, 0, 100, 100);\n      box.cache(0, 0, 100, 100);\n\n      var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n      bmp.filters = [\n          new createjs.AlphaMapFilter(box.cacheCanvas)\n      ];\n      bmp.cache(0, 0, 100, 100);\n      stage.addChild(bmp);\n\nSee {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.",
            "extends": "Filter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "alphaMap",
                    "description": "The greyscale image (or canvas) to use as the alpha value for the\nresult. This should be exactly the same dimensions as the target.",
                    "type": "HTMLImageElement|HTMLCanvasElement"
                }
            ]
        },
        "AlphaMaskFilter": {
            "name": "AlphaMaskFilter",
            "shortname": "AlphaMaskFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/filters/AlphaMaskFilter.js",
            "line": 41,
            "description": "Applies the alpha from the mask image (or canvas) to the target, such that the alpha channel of the result will\nbe derived from the mask, and the RGB channels will be copied from the target. This can be used, for example, to\napply an alpha mask to a display object. This can also be used to combine a JPG compressed RGB image with a PNG32\nalpha mask, which can result in a much smaller file size than a single PNG32 containing ARGB.\n\n<b>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.</b>\n\n<h4>Example</h4>\nThis example draws a gradient box, then caches it and uses the \"cacheCanvas\" as the alpha mask on a 100x100 image.\n\n     var box = new createjs.Shape();\n     box.graphics.beginLinearGradientFill([\"#000000\", \"rgba(0, 0, 0, 0)\"], [0, 1], 0, 0, 100, 100)\n     box.graphics.drawRect(0, 0, 100, 100);\n     box.cache(0, 0, 100, 100);\n\n     var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n     bmp.filters = [\n         new createjs.AlphaMaskFilter(box.cacheCanvas)\n     ];\n     bmp.cache(0, 0, 100, 100);\n\nSee {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.",
            "extends": "Filter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mask",
                    "description": "",
                    "type": "HTMLImageElement|HTMLCanvasElement"
                }
            ]
        },
        "BlurFilter": {
            "name": "BlurFilter",
            "shortname": "BlurFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/filters/BlurFilter.js",
            "line": 43,
            "description": "Applies a box blur to DisplayObjects. Note that this filter is fairly CPU intensive, particularly if the quality is\nset higher than 1.\n\n<h4>Example</h4>\nThis example creates a red circle, and then applies a 5 pixel blur to it. It uses the {{#crossLink \"Filter/getBounds\"}}{{/crossLink}}\nmethod to account for the spread that the blur causes.\n\n     var shape = new createjs.Shape().set({x:100,y:100});\n     shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\n     var blurFilter = new createjs.BlurFilter(5, 5, 1);\n     shape.filters = [blurFilter];\n     var bounds = blurFilter.getBounds();\n\n     shape.cache(-50+bounds.x, -50+bounds.y, 100+bounds.width, 100+bounds.height);\n\nSee {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.",
            "extends": "Filter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "blurX",
                    "description": "The horizontal blur radius in pixels.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "blurY",
                    "description": "The vertical blur radius in pixels.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "quality",
                    "description": "The number of blur iterations.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ]
        },
        "ColorFilter": {
            "name": "ColorFilter",
            "shortname": "ColorFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/filters/ColorFilter.js",
            "line": 41,
            "description": "Applies a color transform to DisplayObjects.\n\n<h4>Example</h4>\nThis example draws a red circle, and then transforms it to Blue. This is accomplished by multiplying all the channels\nto 0 (except alpha, which is set to 1), and then adding 255 to the blue channel.\n\n     var shape = new createjs.Shape().set({x:100,y:100});\n     shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\n     shape.filters = [\n         new createjs.ColorFilter(0,0,0,1, 0,0,255,0)\n     ];\n     shape.cache(-50, -50, 100, 100);\n\nSee {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.",
            "params": [
                {
                    "name": "redMultiplier",
                    "description": "The amount to multiply against the red channel. This is a range between 0 and 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "greenMultiplier",
                    "description": "The amount to multiply against the green channel. This is a range between 0 and 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "blueMultiplier",
                    "description": "The amount to multiply against the blue channel. This is a range between 0 and 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "alphaMultiplier",
                    "description": "The amount to multiply against the alpha channel. This is a range between 0 and 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "redOffset",
                    "description": "The amount to add to the red channel after it has been multiplied. This is a range\nbetween -255 and 255.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "greenOffset",
                    "description": "The amount to add to the green channel after it has been multiplied. This is a range\nbetween -255 and 255.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "blueOffset",
                    "description": "The amount to add to the blue channel after it has been multiplied. This is a range\nbetween -255 and 255.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "alphaOffset",
                    "description": "The amount to add to the alpha channel after it has been multiplied. This is a range\nbetween -255 and 255.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "is_constructor": 1,
            "extends": "Filter"
        },
        "ColorMatrix": {
            "name": "ColorMatrix",
            "shortname": "ColorMatrix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 41,
            "description": "Provides helper functions for assembling a matrix for use with the {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}.\nMost methods return the instance to facilitate chained calls.\n\n<h4>Example</h4>\n\n     myColorMatrix.adjustHue(20).adjustBrightness(50);\n\nSee {{#crossLink \"Filter\"}}{{/crossLink}} for an example of how to apply filters, or {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}\nfor an example of how to use ColorMatrix to change a DisplayObject's color.",
            "params": [
                {
                    "name": "brightness",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "contrast",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "hue",
                    "description": "",
                    "type": "Number"
                }
            ],
            "is_constructor": 1
        },
        "ColorMatrixFilter": {
            "name": "ColorMatrixFilter",
            "shortname": "ColorMatrixFilter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/filters/ColorMatrixFilter.js",
            "line": 41,
            "description": "Allows you to carry out complex color operations such as modifying saturation, brightness, or inverting. See the\n{{#crossLink \"ColorMatrix\"}}{{/crossLink}} for more information on changing colors. For an easier color transform,\nconsider the {{#crossLink \"ColorFilter\"}}{{/crossLink}}.\n\n<h4>Example</h4>\nThis example creates a red circle, inverts its hue, and then saturates it to brighten it up.\n\n     var shape = new createjs.Shape().set({x:100,y:100});\n     shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\n     var matrix = new createjs.ColorMatrix().adjustHue(180).adjustSaturation(100);\n     shape.filters = [\n         new createjs.ColorMatrixFilter(matrix)\n     ];\n\n     shape.cache(-50, -50, 100, 100);\n\nSee {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.",
            "is_constructor": 1,
            "extends": "Filter",
            "params": [
                {
                    "name": "matrix",
                    "description": "A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}\nclass.",
                    "type": "Array | ColorMatrix"
                }
            ]
        },
        "Filter": {
            "name": "Filter",
            "shortname": "Filter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/filters/Filter.js",
            "line": 41,
            "description": "Base class that all filters should inherit from. Filters need to be applied to objects that have been cached using\nthe {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method. If an object changes, please cache it again, or use\n{{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}}. Note that the filters must be applied before caching.\n\n<h4>Example</h4>\n\n     myInstance.filters = [\n         new createjs.ColorFilter(0, 0, 0, 1, 255, 0, 0),\n         new createjs.BlurFilter(5, 5, 10)\n     ];\n     myInstance.cache(0,0, 100, 100);\n\nNote that each filter can implement a {{#crossLink \"Filter/getBounds\"}}{{/crossLink}} method, which returns the\nmargins that need to be applied in order to fully display the filter. For example, the {{#crossLink \"BlurFilter\"}}{{/crossLink}}\nwill cause an object to feather outwards, resulting in a margin around the shape.\n\n<h4>EaselJS Filters</h4>\nEaselJS comes with a number of pre-built filters:\n<ul><li>{{#crossLink \"AlphaMapFilter\"}}{{/crossLink}} : Map a greyscale image to the alpha channel of a display object</li>\n     <li>{{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}: Map an image's alpha channel to the alpha channel of a display object</li>\n     <li>{{#crossLink \"BlurFilter\"}}{{/crossLink}}: Apply vertical and horizontal blur to a display object</li>\n     <li>{{#crossLink \"ColorFilter\"}}{{/crossLink}}: Color transform a display object</li>\n     <li>{{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}: Transform an image using a {{#crossLink \"ColorMatrix\"}}{{/crossLink}}</li>\n</ul>",
            "is_constructor": 1
        },
        "DisplayProps": {
            "name": "DisplayProps",
            "shortname": "DisplayProps",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/geom/DisplayProps.js",
            "line": 39,
            "description": "Used for calculating and encapsulating display related properties.",
            "params": [
                {
                    "name": "visible",
                    "description": "Visible value.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "alpha",
                    "description": "Alpha value.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "shadow",
                    "description": "A Shadow instance or null.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "compositeOperation",
                    "description": "A compositeOperation value or null.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "matrix",
                    "description": "A transformation matrix. Defaults to a new identity matrix.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "Matrix2D": {
            "name": "Matrix2D",
            "shortname": "Matrix2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/geom/Matrix2D.js",
            "line": 41,
            "description": "Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.\n\nThis matrix can be visualized as:\n\n\t[ a  c  tx\n\t  b  d  ty\n\t  0  0  1  ]\n\nNote the locations of b and c.",
            "params": [
                {
                    "name": "a",
                    "description": "Specifies the a property for the new matrix.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "b",
                    "description": "Specifies the b property for the new matrix.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "c",
                    "description": "Specifies the c property for the new matrix.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "d",
                    "description": "Specifies the d property for the new matrix.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "tx",
                    "description": "Specifies the tx property for the new matrix.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "ty",
                    "description": "Specifies the ty property for the new matrix.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "is_constructor": 1
        },
        "Point": {
            "name": "Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/geom/Point.js",
            "line": 41,
            "description": "Represents a point on a 2 dimensional x / y coordinate system.\n\n<h4>Example</h4>\n\n     var point = new createjs.Point(0, 100);",
            "params": [
                {
                    "name": "x",
                    "description": "X position.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Y position.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "is_constructor": 1
        },
        "Rectangle": {
            "name": "Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/geom/Rectangle.js",
            "line": 41,
            "description": "Represents a rectangle as defined by the points (x, y) and (x+width, y+height).\n\n<h4>Example</h4>\n\n     var rect = new createjs.Rectangle(0, 0, 100, 100);",
            "params": [
                {
                    "name": "x",
                    "description": "X position.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Y position.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "width",
                    "description": "The width of the Rectangle.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "height",
                    "description": "The height of the Rectangle.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "is_constructor": 1
        },
        "ButtonHelper": {
            "name": "ButtonHelper",
            "shortname": "ButtonHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 41,
            "description": "The ButtonHelper is a helper class to create interactive buttons from {{#crossLink \"MovieClip\"}}{{/crossLink}} or\n{{#crossLink \"Sprite\"}}{{/crossLink}} instances. This class will intercept mouse events from an object, and\nautomatically call {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}},\nto the respective animation labels, add a pointer cursor, and allows the user to define a hit state frame.\n\nThe ButtonHelper instance does not need to be added to the stage, but a reference should be maintained to prevent\ngarbage collection.\n\nNote that over states will not work unless you call {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n\n     var helper = new createjs.ButtonHelper(myInstance, \"out\", \"over\", \"down\", false, myInstance, \"hit\");\n     myInstance.addEventListener(\"click\", handleClick);\n     function handleClick(event) {\n         // Click Happened.\n     }",
            "params": [
                {
                    "name": "target",
                    "description": "The instance to manage.",
                    "type": "Sprite|MovieClip"
                },
                {
                    "name": "outLabel",
                    "description": "The label or animation to go to when the user rolls out of the button.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"out\""
                },
                {
                    "name": "overLabel",
                    "description": "The label or animation to go to when the user rolls over the button.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"over\""
                },
                {
                    "name": "downLabel",
                    "description": "The label or animation to go to when the user presses the button.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"down\""
                },
                {
                    "name": "play",
                    "description": "If the helper should call \"gotoAndPlay\" or \"gotoAndStop\" on the button when changing\nstates.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "hitArea",
                    "description": "An optional item to use as the hit state for the button. If this is not defined,\nthen the button's visible states will be used instead. Note that the same instance as the \"target\" argument can be\nused for the hitState.",
                    "type": "DisplayObject",
                    "optional": true
                },
                {
                    "name": "hitLabel",
                    "description": "The label or animation on the hitArea instance that defines the hitArea bounds. If this is\nnull, then the default state of the hitArea will be used. *",
                    "type": "String",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "Touch": {
            "name": "Touch",
            "shortname": "Touch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/ui/Touch.js",
            "line": 41,
            "description": "Global utility for working with multi-touch enabled devices in EaselJS. Currently supports W3C Touch API (iOS and\nmodern Android browser) and the Pointer API (IE), including ms-prefixed events in IE10, and unprefixed in IE11.\n\nEnsure that you {{#crossLink \"Touch/disable\"}}{{/crossLink}} touch when cleaning up your application. You do not have\nto check if touch is supported to enable it, as it will fail gracefully if it is not supported.\n\n<h4>Example</h4>\n\n     var stage = new createjs.Stage(\"canvasId\");\n     createjs.Touch.enable(stage);\n\n<strong>Note:</strong> It is important to disable Touch on a stage that you are no longer using:\n\n     createjs.Touch.disable(stage);",
            "static": 1
        },
        "SpriteSheetBuilder": {
            "name": "SpriteSheetBuilder",
            "shortname": "SpriteSheetBuilder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 41,
            "description": "The SpriteSheetBuilder allows you to generate {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances at run time\nfrom any display object. This can allow you to maintain your assets as vector graphics (for low file size), and\nrender them at run time as SpriteSheets for better performance.\n\nSpriteSheets can be built either synchronously, or asynchronously, so that large SpriteSheets can be generated\nwithout locking the UI.\n\nNote that the \"images\" used in the generated SpriteSheet are actually canvas elements, and that they will be\nsized to the nearest power of 2 up to the value of {{#crossLink \"SpriteSheetBuilder/maxWidth:property\"}}{{/crossLink}}\nor {{#crossLink \"SpriteSheetBuilder/maxHeight:property\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "framerate",
                    "description": "The {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} of\n{{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances that are created.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "extends": "EventDispatcher",
            "is_constructor": 1
        },
        "SpriteSheetUtils": {
            "name": "SpriteSheetUtils",
            "shortname": "SpriteSheetUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/utils/SpriteSheetUtils.js",
            "line": 41,
            "description": "The SpriteSheetUtils class is a collection of static methods for working with {{#crossLink \"SpriteSheet\"}}{{/crossLink}}s.\nA sprite sheet is a series of images (usually animation frames) combined into a single image on a regular grid. For\nexample, an animation consisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across\nby 2 high). The SpriteSheetUtils class uses a static interface and should not be instantiated.",
            "static": 1
        },
        "UID": {
            "name": "UID",
            "shortname": "UID",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/utils/UID.js",
            "line": 41,
            "description": "Global utility for generating sequential unique ID numbers. The UID class uses a static interface (ex. <code>UID.get()</code>)\nand should not be instantiated.",
            "static": 1
        },
        "EaselJS": {
            "name": "EaselJS",
            "shortname": "EaselJS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EaselJS",
            "namespace": "",
            "file": "easeljs/version.js",
            "line": 9,
            "description": "Static class holding library specific information such as the version and buildDate of\nthe library."
        }
    },
    "classitems": [
        {
            "file": "createjs/events/Event.js",
            "line": 64,
            "description": "The type of event.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 71,
            "description": "The object that generated an event.",
            "itemtype": "property",
            "name": "target",
            "type": "Object",
            "default": "null",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 80,
            "description": "The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\nalways be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\nis generated from childObj, then a listener on parentObj would receive the event with\ntarget=childObj (the original target) and currentTarget=parentObj (where the listener was added).",
            "itemtype": "property",
            "name": "currentTarget",
            "type": "Object",
            "default": "null",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 92,
            "description": "For bubbling events, this indicates the current event phase:<OL>\n\t<LI> capture phase: starting from the top parent to the target</LI>\n\t<LI> at target phase: currently being dispatched from the target</LI>\n\t<LI> bubbling phase: from the target to the top parent</LI>\n</OL>",
            "itemtype": "property",
            "name": "eventPhase",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 105,
            "description": "Indicates whether the event will bubble through the display list.",
            "itemtype": "property",
            "name": "bubbles",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 114,
            "description": "Indicates whether the default behaviour of this event can be cancelled via\n{{#crossLink \"Event/preventDefault\"}}{{/crossLink}}. This is set via the Event constructor.",
            "itemtype": "property",
            "name": "cancelable",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 124,
            "description": "The epoch time at which this event was created.",
            "itemtype": "property",
            "name": "timeStamp",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 133,
            "description": "Indicates if {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} has been called\non this event.",
            "itemtype": "property",
            "name": "defaultPrevented",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 143,
            "description": "Indicates if {{#crossLink \"Event/stopPropagation\"}}{{/crossLink}} or\n{{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called on this event.",
            "itemtype": "property",
            "name": "propagationStopped",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 153,
            "description": "Indicates if {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called\non this event.",
            "itemtype": "property",
            "name": "immediatePropagationStopped",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 163,
            "description": "Indicates if {{#crossLink \"Event/remove\"}}{{/crossLink}} has been called on this event.",
            "itemtype": "property",
            "name": "removed",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 174,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 188,
            "description": "Sets {{#crossLink \"Event/defaultPrevented\"}}{{/crossLink}} to true if the event is cancelable.\nMirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\ncancel the default behaviour associated with the event.",
            "itemtype": "method",
            "name": "preventDefault",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 198,
            "description": "Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} to true.\nMirrors the DOM event standard.",
            "itemtype": "method",
            "name": "stopPropagation",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 207,
            "description": "Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} and\n{{#crossLink \"Event/immediatePropagationStopped\"}}{{/crossLink}} to true.\nMirrors the DOM event standard.",
            "itemtype": "method",
            "name": "stopImmediatePropagation",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 217,
            "description": "Causes the active listener to be removed via removeEventListener();\n\n\t\tmyBtn.addEventListener(\"click\", function(evt) {\n\t\t\t// do stuff...\n\t\t\tevt.remove(); // removes this listener.\n\t\t});",
            "itemtype": "method",
            "name": "remove",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 231,
            "description": "Returns a clone of the Event instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Event instance.",
                "type": "Event"
            },
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 240,
            "description": "Provides a chainable shortcut method for setting a number of properties on the instance.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "props",
                    "description": "A generic object containing properties to copy to the instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the instance the method is called on (useful for chaining calls.)",
                "type": "Event"
            },
            "chainable": 1,
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 253,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 99,
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "_listeners",
            "type": "Object",
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 106,
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "_captureListeners",
            "type": "Object",
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 115,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 130,
            "description": "Static initializer to mix EventDispatcher methods into a target object or prototype.\n\n\t\tEventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\n\t\tEventDispatcher.initialize(myObject); // add to a specific instance",
            "itemtype": "method",
            "name": "initialize",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target object to inject EventDispatcher methods into. This can be an instance or a\nprototype.",
                    "type": "Object"
                }
            ],
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 154,
            "description": "Adds the specified event listener. Note that adding multiple listeners to the same function will result in\nmultiple callbacks getting fired.\n\n<h4>Example</h4>\n\n     displayObject.addEventListener(\"click\", handleClick);\n     function handleClick(event) {\n        // Click happened.\n     }",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when\nthe event is dispatched.",
                    "type": "Function | Object"
                },
                {
                    "name": "useCapture",
                    "description": "For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the listener for chaining or assignment.",
                "type": "Function | Object"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 187,
            "description": "A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\nonly run once, associate arbitrary data with the listener, and remove the listener.\n\nThis method works by creating an anonymous wrapper function and subscribing it with addEventListener.\nThe wrapper function is returned for use with `removeEventListener` (or `off`).\n\n<b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener, or use\n{{#crossLink \"Event/remove\"}}{{/crossLink}}. Likewise, each time you call `on` a NEW wrapper function is subscribed, so multiple calls\nto `on` with the same params will create multiple listeners.\n\n<h4>Example</h4>\n\n\t\tvar listener = myBtn.on(\"click\", handleClick, null, false, {count:3});\n\t\tfunction handleClick(evt, data) {\n\t\t\tdata.count -= 1;\n\t\t\tconsole.log(this == myBtn); // true - scope defaults to the dispatcher\n\t\t\tif (data.count == 0) {\n\t\t\t\talert(\"clicked 3 times!\");\n\t\t\t\tmyBtn.off(\"click\", listener);\n\t\t\t\t// alternately: evt.remove();\n\t\t\t}\n\t\t}",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when\nthe event is dispatched.",
                    "type": "Function | Object"
                },
                {
                    "name": "scope",
                    "description": "The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "once",
                    "description": "If true, the listener will remove itself after the first time it is triggered.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "data",
                    "description": "Arbitrary data that will be included as the second parameter when the listener is called.",
                    "type": "*",
                    "optional": true
                },
                {
                    "name": "useCapture",
                    "description": "For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.",
                "type": "Function"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 233,
            "description": "Removes the specified event listener.\n\n<b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\nfunction, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\nclosure will not work.\n\n<h4>Example</h4>\n\n     displayObject.removeEventListener(\"click\", handleClick);",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object.",
                    "type": "Function | Object"
                },
                {
                    "name": "useCapture",
                    "description": "For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 263,
            "description": "A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\n.on method.\n\n<b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener. See \n{{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} for an example.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object.",
                    "type": "Function | Object"
                },
                {
                    "name": "useCapture",
                    "description": "For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 277,
            "description": "Removes all listeners for the specified type, or all listeners of all types.\n\n<h4>Example</h4>\n\n     // Remove all listeners\n     displayObject.removeAllEventListeners();\n\n     // Remove all click listeners\n     displayObject.removeAllEventListeners(\"click\");",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event. If omitted, all listeners for all types will be removed.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 299,
            "description": "Dispatches the specified event to all listeners.\n\n<h4>Example</h4>\n\n     // Use a string event\n     this.dispatchEvent(\"complete\");\n\n     // Use an Event instance\n     var event = new createjs.Event(\"progress\");\n     this.dispatchEvent(event);",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "eventObj",
                    "description": "An object with a \"type\" property, or a string type.\nWhile a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\ndispatchEvent will construct an Event instance if necessary with the specified type. This latter approach can\nbe used to avoid event object instantiation for non-bubbling events that may not have any listeners.",
                    "type": "Object | String | Event"
                },
                {
                    "name": "bubbles",
                    "description": "Specifies the `bubbles` value when a string was passed to eventObj.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "cancelable",
                    "description": "Specifies the `cancelable` value when a string was passed to eventObj.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns false if `preventDefault()` was called on a cancelable event, true otherwise.",
                "type": "Boolean"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 353,
            "description": "Indicates whether there is at least one listener for the specified event type.",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if there is at least one listener for the specified event.",
                "type": "Boolean"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 364,
            "description": "Indicates whether there is at least one listener for the specified event type on this object or any of its\nancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\nspecified type is dispatched from this object, it will trigger at least one listener.\n\nThis is similar to {{#crossLink \"EventDispatcher/hasEventListener\"}}{{/crossLink}}, but it searches the entire\nevent flow for a listener, not just this object.",
            "itemtype": "method",
            "name": "willTrigger",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns `true` if there is at least one listener for the specified event.",
                "type": "Boolean"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 384,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 394,
            "itemtype": "method",
            "name": "_dispatchEvent",
            "params": [
                {
                    "name": "eventObj",
                    "description": "",
                    "type": "Object | String | Event"
                },
                {
                    "name": "eventPhase",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 69,
            "description": "In this mode, Ticker uses the requestAnimationFrame API, but attempts to synch the ticks to target framerate. It\nuses a simple heuristic that compares the time of the RAF return to the target time for the current frame and\ndispatches the tick when the time is within a certain threshold.\n\nThis mode has a higher variance for time between frames than {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}},\nbut does not require that content be time based as with {{#crossLink \"Ticker/RAF:property\"}}{{/crossLink}} while\ngaining the benefits of that API (screen synch, background throttling).\n\nVariance is usually lowest for framerates that are a divisor of the RAF frequency. This is usually 60, so\nframerates of 10, 12, 15, 20, and 30 work well.\n\nFalls back to {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\nsupported.",
            "itemtype": "property",
            "name": "RAF_SYNCHED",
            "static": 1,
            "type": "{String}",
            "default": "\"synched\"",
            "readonly": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 91,
            "description": "In this mode, Ticker passes through the requestAnimationFrame heartbeat, ignoring the target framerate completely.\nBecause requestAnimationFrame frequency is not deterministic, any content using this mode should be time based.\nYou can leverage {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} and the {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\nevent object's \"delta\" properties to make this easier.\n\nFalls back on {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\nsupported.",
            "itemtype": "property",
            "name": "RAF",
            "static": 1,
            "type": "{String}",
            "default": "\"raf\"",
            "readonly": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 107,
            "description": "In this mode, Ticker uses the setTimeout API. This provides predictable, adaptive frame timing, but does not\nprovide the benefits of requestAnimationFrame (screen synch, background throttling).",
            "itemtype": "property",
            "name": "TIMEOUT",
            "static": 1,
            "type": "{String}",
            "default": "\"timeout\"",
            "readonly": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 120,
            "description": "Dispatched each tick. The event will be dispatched to each listener even when the Ticker has been paused using\n{{#crossLink \"Ticker/setPaused\"}}{{/crossLink}}.\n\n<h4>Example</h4>\n\n     createjs.Ticker.addEventListener(\"tick\", handleTick);\n     function handleTick(event) {\n         console.log(\"Paused:\", event.paused, event.delta);\n     }",
            "itemtype": "event",
            "name": "tick",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "paused",
                    "description": "Indicates whether the ticker is currently paused.",
                    "type": "Boolean"
                },
                {
                    "name": "delta",
                    "description": "The time elapsed in ms since the last tick.",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "The total time in ms since Ticker was initialized.",
                    "type": "Number"
                },
                {
                    "name": "runTime",
                    "description": "The total time in ms that Ticker was not paused since it was initialized. For example,\n\tyou could determine the amount of time that the Ticker has been paused since initialization with `time-runTime`.",
                    "type": "Number"
                }
            ],
            "since": "0.6.0",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 144,
            "description": "Deprecated in favour of {{#crossLink \"Ticker/timingMode\"}}{{/crossLink}}, and will be removed in a future version. If true, timingMode will\nuse {{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} by default.",
            "deprecated": true,
            "deprecationMessage": "Deprecated in favour of {{#crossLink \"Ticker/timingMode\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "useRAF",
            "static": 1,
            "type": "{Boolean}",
            "default": "false",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 155,
            "description": "Specifies the timing api (setTimeout or requestAnimationFrame) and mode to use. See\n{{#crossLink \"Ticker/TIMEOUT\"}}{{/crossLink}}, {{#crossLink \"Ticker/RAF\"}}{{/crossLink}}, and\n{{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} for mode details.",
            "itemtype": "property",
            "name": "timingMode",
            "static": 1,
            "type": "{String}",
            "default": "Ticker.TIMEOUT",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 166,
            "description": "Specifies a maximum value for the delta property in the tick event object. This is useful when building time\nbased animations and systems to prevent issues caused by large time gaps caused by background tabs, system sleep,\nalert dialogs, or other blocking routines. Double the expected frame duration is often an effective value\n(ex. maxDelta=50 when running at 40fps).\n\nThis does not impact any other values (ex. time, runTime, etc), so you may experience issues if you enable maxDelta\nwhen using both delta and other values.\n\nIf 0, there is no maximum.",
            "itemtype": "property",
            "name": "maxDelta",
            "static": 1,
            "type": "{number}",
            "default": "0",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 183,
            "description": "When the ticker is paused, all listeners will still receive a tick event, but the <code>paused</code> property\nof the event will be `true`. Also, while paused the `runTime` will not increase. See {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}},\n{{#crossLink \"Ticker/getTime\"}}{{/crossLink}}, and {{#crossLink \"Ticker/getEventTime\"}}{{/crossLink}} for more\ninfo.\n\n<h4>Example</h4>\n\n     createjs.Ticker.addEventListener(\"tick\", handleTick);\n     createjs.Ticker.paused = true;\n     function handleTick(event) {\n         console.log(event.paused,\n         \tcreatejs.Ticker.getTime(false),\n         \tcreatejs.Ticker.getTime(true));\n     }",
            "itemtype": "property",
            "name": "paused",
            "static": 1,
            "type": "{Boolean}",
            "default": "false",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 223,
            "itemtype": "property",
            "name": "_inited",
            "static": 1,
            "type": "{Boolean}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 231,
            "itemtype": "property",
            "name": "_startTime",
            "static": 1,
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 239,
            "itemtype": "property",
            "name": "_pausedTime",
            "static": 1,
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 247,
            "description": "The number of ticks that have passed",
            "itemtype": "property",
            "name": "_ticks",
            "static": 1,
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 256,
            "description": "The number of ticks that have passed while Ticker has been paused",
            "itemtype": "property",
            "name": "_pausedTicks",
            "static": 1,
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 265,
            "itemtype": "property",
            "name": "_interval",
            "static": 1,
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 273,
            "itemtype": "property",
            "name": "_lastTime",
            "static": 1,
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 281,
            "itemtype": "property",
            "name": "_times",
            "static": 1,
            "type": "{Array}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 289,
            "itemtype": "property",
            "name": "_tickTimes",
            "static": 1,
            "type": "{Array}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 297,
            "description": "Stores the timeout or requestAnimationFrame id.",
            "itemtype": "property",
            "name": "_timerId",
            "static": 1,
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 306,
            "description": "True if currently using requestAnimationFrame, false if using setTimeout. This may be different than timingMode\nif that property changed and a tick hasn't fired.",
            "itemtype": "property",
            "name": "_raf",
            "static": 1,
            "type": "{Boolean}",
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 318,
            "description": "Use the {{#crossLink \"Ticker/interval:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "setInterval",
            "static": 1,
            "params": [
                {
                    "name": "interval",
                    "description": "",
                    "type": "Number"
                }
            ],
            "deprecated": true,
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 331,
            "description": "Use the {{#crossLink \"Ticker/interval:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "getInterval",
            "static": 1,
            "return": {
                "description": "",
                "type": "Number"
            },
            "deprecated": true,
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 342,
            "description": "Use the {{#crossLink \"Ticker/framerate:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "setFPS",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "deprecated": true,
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 353,
            "description": "Use the {{#crossLink \"Ticker/framerate:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "getFPS",
            "static": 1,
            "return": {
                "description": "",
                "type": "Number"
            },
            "deprecated": true,
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 364,
            "description": "Indicates the target time (in milliseconds) between ticks. Default is 50 (20 FPS).\nNote that actual time between ticks may be more than specified depending on CPU load.\nThis property is ignored if the ticker is using the `RAF` timing mode.",
            "itemtype": "property",
            "name": "interval",
            "static": 1,
            "type": "{Number}",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 373,
            "description": "Indicates the target frame rate in frames per second (FPS). Effectively just a shortcut to `interval`, where\n`framerate == 1000/interval`.",
            "itemtype": "property",
            "name": "framerate",
            "static": 1,
            "type": "{Number}",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 389,
            "description": "Starts the tick. This is called automatically when the first listener is added.",
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 404,
            "description": "Stops the Ticker and removes all listeners. Use init() to restart the Ticker.",
            "itemtype": "method",
            "name": "reset",
            "static": 1,
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 422,
            "description": "Returns the average time spent within a tick. This can vary significantly from the value provided by getMeasuredFPS\nbecause it only measures the time spent within the tick execution stack. \n\nExample 1: With a target FPS of 20, getMeasuredFPS() returns 20fps, which indicates an average of 50ms between \nthe end of one tick and the end of the next. However, getMeasuredTickTime() returns 15ms. This indicates that \nthere may be up to 35ms of \"idle\" time between the end of one tick and the start of the next.\n\nExample 2: With a target FPS of 30, getFPS() returns 10fps, which indicates an average of 100ms between the end of\none tick and the end of the next. However, getMeasuredTickTime() returns 20ms. This would indicate that something\nother than the tick is using ~80ms (another script, DOM rendering, etc).",
            "itemtype": "method",
            "name": "getMeasuredTickTime",
            "static": 1,
            "params": [
                {
                    "name": "ticks",
                    "description": "The number of previous ticks over which to measure the average time spent in a tick.\nDefaults to the number of ticks per second. To get only the last tick's time, pass in 1.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The average time spent in a tick in milliseconds.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 449,
            "description": "Returns the actual frames / ticks per second.",
            "itemtype": "method",
            "name": "getMeasuredFPS",
            "static": 1,
            "params": [
                {
                    "name": "ticks",
                    "description": "The number of previous ticks over which to measure the actual frames / ticks per second.\nDefaults to the number of ticks per second.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The actual frames / ticks per second. Depending on performance, this may differ\nfrom the target frames per second.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 467,
            "description": "Use the {{#crossLink \"Ticker/paused:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "setPaused",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "deprecated": true,
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 479,
            "description": "Use the {{#crossLink \"Ticker/paused:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "getPaused",
            "static": 1,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "deprecated": true,
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 491,
            "description": "Returns the number of milliseconds that have elapsed since Ticker was initialized via {{#crossLink \"Ticker/init\"}}.\nReturns -1 if Ticker has not been initialized. For example, you could use\nthis in a time synchronized animation to determine the exact amount of time that has elapsed.",
            "itemtype": "method",
            "name": "getTime",
            "static": 1,
            "params": [
                {
                    "name": "runTime",
                    "description": "If true only time elapsed while Ticker was not paused will be returned.\nIf false, the value returned will be total time elapsed since the first tick event listener was added.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Number of milliseconds that have elapsed since Ticker was initialized or -1.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 505,
            "description": "Similar to the {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} method, but returns the time on the most recent {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\nevent object.",
            "itemtype": "method",
            "name": "getEventTime",
            "static": 1,
            "params": [
                {
                    "name": "runTime",
                    "description": "[runTime=false] If true, the runTime property will be returned instead of time.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The time or runTime property from the most recent tick event or -1.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 517,
            "description": "Returns the number of ticks that have been broadcast by Ticker.",
            "itemtype": "method",
            "name": "getTicks",
            "static": 1,
            "params": [
                {
                    "name": "pauseable",
                    "description": "Indicates whether to include ticks that would have been broadcast\nwhile Ticker was paused. If true only tick events broadcast while Ticker is not paused will be returned.\nIf false, tick events that would have been broadcast while Ticker was paused will be included in the return\nvalue. The default value is false.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "of ticks that have been broadcast.",
                "type": "Number"
            },
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 533,
            "itemtype": "method",
            "name": "_handleSynch",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 548,
            "itemtype": "method",
            "name": "_handleRAF",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 559,
            "itemtype": "method",
            "name": "_handleTimeout",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 570,
            "itemtype": "method",
            "name": "_setupTick",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 591,
            "itemtype": "method",
            "name": "_tick",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/Ticker.js",
            "line": 625,
            "itemtype": "method",
            "name": "_getTime",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "Ticker",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/extend.js",
            "line": 40,
            "description": "Sets up the prototype chain and constructor property for a new class.\n\nThis should be called right after creating the class constructor.\n\n\tfunction MySubClass() {}\n\tcreatejs.extend(MySubClass, MySuperClass);\n\tMySubClass.prototype.doSomething = function() { }\n\n\tvar foo = new MySubClass();\n\tconsole.log(foo instanceof MySuperClass); // true\n\tconsole.log(foo.prototype.constructor === MySubClass); // true",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "subclass",
                    "description": "The subclass.",
                    "type": "Function"
                },
                {
                    "name": "superclass",
                    "description": "The superclass to extend.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the subclass's new prototype.",
                "type": "Function"
            },
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/indexOf.js",
            "line": 40,
            "description": "Finds the first occurrence of a specified value searchElement in the passed in array, and returns the index of\nthat value.  Returns -1 if value is not found.\n\n     var i = createjs.indexOf(myArray, myElementToFind);",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "array",
                    "description": "Array to search for searchElement",
                    "type": "Array"
                },
                {
                    "name": "searchElement",
                    "description": "Element to find in array."
                }
            ],
            "return": {
                "description": "The first index of searchElement in array.",
                "type": "Number"
            },
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/promote.js",
            "line": 40,
            "description": "Promotes any methods on the super class that were overridden, by creating an alias in the format `prefix_methodName`.\nIt is recommended to use the super class's name as the prefix.\nAn alias to the super class's constructor is always added in the format `prefix_constructor`.\nThis allows the subclass to call super class methods without using `function.call`, providing better performance.\n\nFor example, if `MySubClass` extends `MySuperClass`, and both define a `draw` method, then calling `promote(MySubClass, \"MySuperClass\")`\nwould add a `MySuperClass_constructor` method to MySubClass and promote the `draw` method on `MySuperClass` to the\nprototype of `MySubClass` as `MySuperClass_draw`.\n\nThis should be called after the class's prototype is fully defined.\n\n\tfunction ClassA(name) {\n\t\tthis.name = name;\n\t}\n\tClassA.prototype.greet = function() {\n\t\treturn \"Hello \"+this.name;\n\t}\n\n\tfunction ClassB(name, punctuation) {\n\t\tthis.ClassA_constructor(name);\n\t\tthis.punctuation = punctuation;\n\t}\n\tcreatejs.extend(ClassB, ClassA);\n\tClassB.prototype.greet = function() {\n\t\treturn this.ClassA_greet()+this.punctuation;\n\t}\n\tcreatejs.promote(ClassB, \"ClassA\");\n\n\tvar foo = new ClassB(\"World\", \"!?!\");\n\tconsole.log(foo.greet()); // Hello World!?!",
            "itemtype": "method",
            "name": "promote",
            "params": [
                {
                    "name": "subclass",
                    "description": "The class to promote super class methods on.",
                    "type": "Function"
                },
                {
                    "name": "prefix",
                    "description": "The prefix to add to the promoted method names. Usually the name of the superclass.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the subclass.",
                "type": "Function"
            },
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 71,
            "description": "The image to render. This can be an Image, a Canvas, or a Video. Not all browsers (especially\nmobile browsers) support drawing video to a canvas.",
            "itemtype": "property",
            "name": "image",
            "type": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement",
            "class": "Bitmap",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 84,
            "description": "Specifies an area of the source image to draw. If omitted, the whole image will be drawn.\nNote that video sources must have a width / height set to work correctly with `sourceRect`.",
            "itemtype": "property",
            "name": "sourceRect",
            "type": "Rectangle",
            "default": "null",
            "class": "Bitmap",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 97,
            "description": "Constructor alias for backwards compatibility. This method will be removed in future versions.\nSubclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "initialize",
            "deprecated": true,
            "deprecationMessage": "in favour of `createjs.promote()`",
            "class": "Bitmap",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 105,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Bitmap",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 119,
            "description": "Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Bitmap",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 151,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should <b>not</b> cache Bitmap instances as it can degrade performance.\n\n<strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\nTo see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "cache",
            "class": "Bitmap",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 161,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should <b>not</b> cache Bitmap instances as it can degrade performance.\n\n<strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\nTo see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "updateCache",
            "class": "Bitmap",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 171,
            "description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should <b>not</b> cache Bitmap instances as it can degrade performance.\n\n<strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\nTo see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "uncache",
            "class": "Bitmap",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 181,
            "description": "Docced in superclass.",
            "class": "Bitmap",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 192,
            "description": "Returns a clone of the Bitmap instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Bitmap instance.",
                "type": "Bitmap"
            },
            "class": "Bitmap",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Bitmap.js",
            "line": 204,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Bitmap",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 55,
            "description": "The text to display.",
            "itemtype": "property",
            "name": "text",
            "type": "String",
            "default": "\"\"",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 63,
            "description": "A SpriteSheet instance that defines the glyphs for this bitmap text. Each glyph/character\nshould have a single frame animation defined in the sprite sheet named the same as\ncorresponding character. For example, the following animation definition:\n\n\t\t\"A\": {frames: [0]}\n\nwould indicate that the frame at index 0 of the spritesheet should be drawn for the \"A\" character. The short form\nis also acceptable:\n\n\t\t\"A\": 0\n\nNote that if a character in the text is not found in the sprite sheet, it will also\ntry to use the alternate case (upper or lower).\n\nSee SpriteSheet for more information on defining sprite sheet data.",
            "itemtype": "property",
            "name": "spriteSheet",
            "type": "SpriteSheet",
            "default": "null",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 85,
            "description": "The height of each line of text. If 0, then it will use a line height calculated\nby checking for the height of the \"1\", \"T\", or \"L\" character (in that order). If\nthose characters are not defined, it will use the height of the first frame of the\nsprite sheet.",
            "itemtype": "property",
            "name": "lineHeight",
            "type": "Number",
            "default": "0",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 96,
            "description": "This spacing (in pixels) will be added after each character in the output.",
            "itemtype": "property",
            "name": "letterSpacing",
            "type": "Number",
            "default": "0",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 104,
            "description": "If a space character is not defined in the sprite sheet, then empty pixels equal to\nspaceWidth will be inserted instead. If 0, then it will use a value calculated\nby checking for the width of the \"1\", \"l\", \"E\", or \"A\" character (in that order). If\nthose characters are not defined, it will use the width of the first frame of the\nsprite sheet.",
            "itemtype": "property",
            "name": "spaceWidth",
            "type": "Number",
            "default": "0",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 118,
            "itemtype": "property",
            "name": "_oldProps",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 127,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 141,
            "description": "BitmapText uses Sprite instances to draw text. To reduce the creation and destruction of instances (and thus garbage collection), it maintains\nan internal object pool of sprite instances to reuse. Increasing this value can cause more sprites to be\nretained, slightly increasing memory use, but reducing instantiation.",
            "itemtype": "property",
            "name": "maxPoolSize",
            "type": "Number",
            "static": 1,
            "default": "100",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 152,
            "description": "Sprite object pool.",
            "type": "{Array}",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 162,
            "description": "Docced in superclass.",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 171,
            "description": "Docced in superclass.",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 179,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 195,
            "description": "<strong>Disabled in BitmapText.</strong>",
            "itemtype": "method",
            "name": "addChild",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 199,
            "description": "<strong>Disabled in BitmapText.</strong>",
            "itemtype": "method",
            "name": "addChildAt",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 203,
            "description": "<strong>Disabled in BitmapText.</strong>",
            "itemtype": "method",
            "name": "removeChild",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 207,
            "description": "<strong>Disabled in BitmapText.</strong>",
            "itemtype": "method",
            "name": "removeChildAt",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 211,
            "description": "<strong>Disabled in BitmapText.</strong>",
            "itemtype": "method",
            "name": "removeAllChildren",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 219,
            "itemtype": "method",
            "name": "_cloneProps",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "BitmapText"
                }
            ],
            "return": {
                "description": "o",
                "type": "BitmapText"
            },
            "access": "protected",
            "tagname": "",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 233,
            "itemtype": "method",
            "name": "_getFrameIndex",
            "params": [
                {
                    "name": "character",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "spriteSheet",
                    "description": "",
                    "type": "SpriteSheet"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "protected",
            "tagname": "",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 249,
            "itemtype": "method",
            "name": "_getFrame",
            "params": [
                {
                    "name": "character",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "spriteSheet",
                    "description": "",
                    "type": "SpriteSheet"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 261,
            "itemtype": "method",
            "name": "_getLineHeight",
            "params": [
                {
                    "name": "ss",
                    "description": "",
                    "type": "SpriteSheet"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "protected",
            "tagname": "",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 271,
            "itemtype": "method",
            "name": "_getSpaceWidth",
            "params": [
                {
                    "name": "ss",
                    "description": "",
                    "type": "SpriteSheet"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "protected",
            "tagname": "",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/BitmapText.js",
            "line": 282,
            "itemtype": "method",
            "name": "_drawText",
            "access": "protected",
            "tagname": "",
            "class": "BitmapText",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 62,
            "description": "The array of children in the display list. You should usually use the child management methods such as\n{{#crossLink \"Container/addChild\"}}{{/crossLink}}, {{#crossLink \"Container/removeChild\"}}{{/crossLink}},\n{{#crossLink \"Container/swapChildren\"}}{{/crossLink}}, etc, rather than accessing this directly, but it is\nincluded for advanced uses.",
            "itemtype": "property",
            "name": "children",
            "type": "Array",
            "default": "null",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 73,
            "description": "Indicates whether the children of this container are independently enabled for mouse/pointer interaction.\nIf false, the children will be aggregated under the container - for example, a click on a child shape would\ntrigger a click event on the container.",
            "itemtype": "property",
            "name": "mouseChildren",
            "type": "Boolean",
            "default": "true",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 83,
            "description": "If false, the tick will not be propagated to children of this Container. This can provide some performance benefits.\nIn addition to preventing the \"tick\" event from being dispatched, it will also prevent tick related updates\non some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).",
            "itemtype": "property",
            "name": "tickChildren",
            "type": "Boolean",
            "default": "true",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 97,
            "description": "Use the {{#crossLink \"Container/numChildren:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "getNumChildren",
            "return": {
                "description": "",
                "type": "Number"
            },
            "deprecated": true,
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 107,
            "description": "Returns the number of children in the container.",
            "itemtype": "property",
            "name": "numChildren",
            "type": "{Number}",
            "readonly": "",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 121,
            "description": "Constructor alias for backwards compatibility. This method will be removed in future versions.\nSubclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "initialize",
            "deprecated": true,
            "deprecationMessage": "in favour of `createjs.promote()`",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 129,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 142,
            "description": "Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 171,
            "description": "Adds a child to the top of the display list.\n\n<h4>Example</h4>\n\n\t\tcontainer.addChild(bitmapInstance);\n\nYou can also add multiple children at once:\n\n\t\tcontainer.addChild(bitmapInstance, shapeInstance, textInstance);",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "The display object to add.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "The child that was added, or the last child if multiple children were added.",
                "type": "DisplayObject"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 200,
            "description": "Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and\nsetting its parent to this Container.\n\n<h4>Example</h4>\n\n     addChildAt(child1, index);\n\nYou can also add multiple children, such as:\n\n     addChildAt(child1, child2, ..., index);\n\nThe index must be between 0 and numChildren. For example, to add myShape under otherShape in the display list,\nyou could use:\n\n     container.addChildAt(myShape, container.getChildIndex(otherShape));\n\nThis would also bump otherShape's index up by one. Fails silently if the index is out of range.",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "The display object to add.",
                    "type": "DisplayObject"
                },
                {
                    "name": "index",
                    "description": "The index to add the child at.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the last child that was added, or the last child if multiple children were added.",
                "type": "DisplayObject"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 239,
            "description": "Removes the specified child from the display list. Note that it is faster to use removeChildAt() if the index is\nalready known.\n\n<h4>Example</h4>\n\n     container.removeChild(child);\n\nYou can also remove multiple children:\n\n     removeChild(child1, child2, ...);\n\nReturns true if the child (or children) was removed, or false if it was not in the display list.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "The child to remove.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "true if the child (or children) was removed, or false if it was not in the display list.",
                "type": "Boolean"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 266,
            "description": "Removes the child at the specified index from the display list, and sets its parent to null.\n\n<h4>Example</h4>\n\n     container.removeChildAt(2);\n\nYou can also remove multiple children:\n\n     container.removeChild(2, 7, ...)\n\nReturns true if the child (or children) was removed, or false if any index was out of range.",
            "itemtype": "method",
            "name": "removeChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the child to remove.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the child (or children) was removed, or false if any index was out of range.",
                "type": "Boolean"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 300,
            "description": "Removes all children from the display list.\n\n<h4>Example</h4>\n\n\tcontainer.removeAllChildren();",
            "itemtype": "method",
            "name": "removeAllChildren",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 314,
            "description": "Returns the child at the specified index.\n\n<h4>Example</h4>\n\n     container.getChildAt(2);",
            "itemtype": "method",
            "name": "getChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the child to return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The child at the specified index. Returns null if there is no child at the index.",
                "type": "DisplayObject"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 329,
            "description": "Returns the child with the specified name.",
            "itemtype": "method",
            "name": "getChildByName",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the child to return.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The child with the specified name.",
                "type": "DisplayObject"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 343,
            "description": "Performs an array sort operation on the child list.\n\n<h4>Example: Display children with a higher y in front.</h4>\n\n     var sortFunction = function(obj1, obj2, options) {\n         if (obj1.y > obj2.y) { return 1; }\n         if (obj1.y < obj2.y) { return -1; }\n         return 0;\n     }\n     container.sortChildren(sortFunction);",
            "itemtype": "method",
            "name": "sortChildren",
            "params": [
                {
                    "name": "sortFunction",
                    "description": "the function to use to sort the child list. See JavaScript's <code>Array.sort</code>\ndocumentation for details.",
                    "type": "Function"
                }
            ],
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 363,
            "description": "Returns the index of the specified child in the display list, or -1 if it is not in the display list.\n\n<h4>Example</h4>\n\n     var index = container.getChildIndex(child);",
            "itemtype": "method",
            "name": "getChildIndex",
            "params": [
                {
                    "name": "child",
                    "description": "The child to return the index of.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "The index of the specified child. -1 if the child is not found.",
                "type": "Number"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 378,
            "description": "Swaps the children at the specified indexes. Fails silently if either index is out of range.",
            "itemtype": "method",
            "name": "swapChildrenAt",
            "params": [
                {
                    "name": "index1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "index2",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 393,
            "description": "Swaps the specified children's depth in the display list. Fails silently if either child is not a child of this\nContainer.",
            "itemtype": "method",
            "name": "swapChildren",
            "params": [
                {
                    "name": "child1",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "child2",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 413,
            "description": "Changes the depth of the specified child. Fails silently if the child is not a child of this container, or the index is out of range.",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setChildIndex",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 430,
            "description": "Returns true if the specified display object either is this container or is a descendent (child, grandchild, etc)\nof this container.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObject to be checked.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "true if the specified display object either is this container or is a descendent.",
                "type": "Boolean"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 445,
            "description": "Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at the\nspecified position). This ignores the alpha, shadow and compositeOperation of the display object, and all\ntransform properties including regX/Y.",
            "itemtype": "method",
            "name": "hitTest",
            "params": [
                {
                    "name": "x",
                    "description": "The x position to check in the display object's local coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position to check in the display object's local coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Boolean indicating whether there is a visible section of a DisplayObject that overlaps the specified\ncoordinates.",
                "type": "Boolean"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 460,
            "description": "Returns an array of all display objects under the specified coordinates that are in this container's display\nlist. This routine ignores any display objects with {{#crossLink \"DisplayObject/mouseEnabled:property\"}}{{/crossLink}}\nset to `false`. The array will be sorted in order of visual depth, with the top-most display object at index 0.\nThis uses shape based hit detection, and can be an expensive operation to run, so it is best to use it carefully.\nFor example, if testing for objects under the mouse, test on tick (instead of on {{#crossLink \"DisplayObject/mousemove:event\"}}{{/crossLink}}),\nand only if the mouse's position has changed.\n\n<ul>\n    <li>By default (mode=0) this method evaluates all display objects.</li>\n    <li>By setting the `mode` parameter to `1`, the {{#crossLink \"DisplayObject/mouseEnabled:property\"}}{{/crossLink}}\n\t\tand {{#crossLink \"mouseChildren:property\"}}{{/crossLink}} properties will be respected.</li>\n\t   <li>Setting the `mode` to `2` additionally excludes display objects that do not have active mouse event\n\t   \tlisteners or a {{#crossLink \"DisplayObject:cursor:property\"}}{{/crossLink}} property. That is, only objects\n\t   \tthat would normally intercept mouse interaction will be included. This can significantly improve performance\n\t   \tin some cases by reducing the number of display objects that need to be tested.</li>\n</li>\n\nThis method accounts for both {{#crossLink \"DisplayObject/hitArea:property\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/mask:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getObjectsUnderPoint",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the container to test.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position in the container to test.",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "The mode to use to determine which display objects to include. 0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "An Array of DisplayObjects under the specified coordinates.",
                "type": "Array"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 492,
            "description": "Similar to {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}, but returns only the top-most display\nobject. This runs significantly faster than <code>getObjectsUnderPoint()</code>, but is still potentially an expensive\noperation. See {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}} for more information.",
            "itemtype": "method",
            "name": "getObjectUnderPoint",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the container to test.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position in the container to test.",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "The mode to use to determine which display objects to include.  0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The top-most display object under the specified coordinates.",
                "type": "DisplayObject"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 507,
            "description": "Docced in superclass.",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 515,
            "description": "Docced in superclass.",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 522,
            "description": "Returns a clone of this Container. Some properties that are specific to this instance's current context are\nreverted to their defaults (for example .parent).",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "recursive",
                    "description": "If true, all of the descendants of this container will be cloned recursively. If false, the\nproperties of the container will be cloned, but the new instance will not have any children.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "A clone of the current Container instance.",
                "type": "Container"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 536,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 547,
            "itemtype": "method",
            "name": "_tick",
            "params": [
                {
                    "name": "evtObj",
                    "description": "An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 562,
            "description": "Recursively clones all children of this container, and adds them to the target container.",
            "itemtype": "method",
            "name": "cloneChildren",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "o",
                    "description": "The target container.",
                    "type": "Container"
                }
            ],
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 578,
            "itemtype": "method",
            "name": "_getObjectsUnderPoint",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "mouse",
                    "description": "If true, it will respect mouse interaction properties like mouseEnabled, mouseChildren, and active listeners.",
                    "type": "Boolean"
                },
                {
                    "name": "activeListener",
                    "description": "If true, there is an active mouse event listener on a parent object.",
                    "type": "Boolean"
                },
                {
                    "name": "currentDepth",
                    "description": "Indicates the current depth of the search.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "DisplayObject"
            },
            "access": "protected",
            "tagname": "",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 632,
            "itemtype": "method",
            "name": "_testMask",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Indicates whether the x/y is within the masked region.",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Container.js",
            "line": 663,
            "itemtype": "method",
            "name": "_getBounds",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix2D"
                },
                {
                    "name": "ignoreTransform",
                    "description": "If true, does not apply this object's transform.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Rectangle"
            },
            "access": "protected",
            "tagname": "",
            "class": "Container",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 85,
            "description": "The DOM object to manage.",
            "itemtype": "property",
            "name": "htmlElement",
            "type": "HTMLElement",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 94,
            "itemtype": "property",
            "name": "_oldMtx",
            "type": "Matrix2D",
            "access": "protected",
            "tagname": "",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 108,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 119,
            "description": "Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 136,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "cache",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 142,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "uncache",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 148,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "updateCache",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 154,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "hitTest",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 160,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "localToGlobal",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 166,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "globalToLocal",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 172,
            "description": "Not applicable to DOMElement.",
            "itemtype": "method",
            "name": "localToLocal",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 178,
            "description": "DOMElement cannot be cloned. Throws an error.",
            "itemtype": "method",
            "name": "clone",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 186,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 195,
            "description": "Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\nare not full EaselJS display objects and do not participate in EaselJS mouse events.",
            "itemtype": "event",
            "name": "click",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 201,
            "description": "Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\nare not full EaselJS display objects and do not participate in EaselJS mouse events.",
            "itemtype": "event",
            "name": "dblClick",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 207,
            "description": "Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\nare not full EaselJS display objects and do not participate in EaselJS mouse events.",
            "itemtype": "event",
            "name": "mousedown",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 213,
            "description": "The HTMLElement can listen for the mouseover event, not the DOMElement instance.\nSince DOMElement instances are not full EaselJS display objects and do not participate in EaselJS mouse events.",
            "itemtype": "event",
            "name": "mouseover",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 219,
            "description": "Not applicable to DOMElement.",
            "itemtype": "event",
            "name": "tick",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 226,
            "itemtype": "method",
            "name": "_tick",
            "params": [
                {
                    "name": "evtObj",
                    "description": "An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\nfunction.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DOMElement.js",
            "line": 238,
            "itemtype": "method",
            "name": "_handleDrawEnd",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DOMElement",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 144,
            "description": "The alpha (transparency) for this display object. 0 is fully transparent, 1 is fully opaque.",
            "itemtype": "property",
            "name": "alpha",
            "type": "{Number}",
            "default": "1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 152,
            "description": "If a cache is active, this returns the canvas that holds the cached version of this display object. See {{#crossLink \"cache\"}}{{/crossLink}}\nfor more information.",
            "itemtype": "property",
            "name": "cacheCanvas",
            "type": "{HTMLCanvasElement | Object}",
            "default": "null",
            "readonly": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 162,
            "description": "Returns an ID number that uniquely identifies the current cache for this display object. This can be used to\ndetermine if the cache has changed since a previous check.",
            "itemtype": "property",
            "name": "cacheID",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 171,
            "description": "Unique ID for this display object. Makes display objects easier for some uses.",
            "itemtype": "property",
            "name": "id",
            "type": "{Number}",
            "default": "-1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 179,
            "description": "Indicates whether to include this object when running mouse interactions. Setting this to `false` for children\nof a {{#crossLink \"Container\"}}{{/crossLink}} will cause events on the Container to not fire when that child is\nclicked. Setting this property to `false` does not prevent the {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}\nmethod from returning the child.\n\n<strong>Note:</strong> In EaselJS 0.7.0, the mouseEnabled property will not work properly with nested Containers. Please\ncheck out the latest NEXT version in <a href=\"https://github.com/CreateJS/EaselJS/tree/master/lib\">GitHub</a> for an updated version with this issue resolved. The fix will be\nprovided in the next release of EaselJS.",
            "itemtype": "property",
            "name": "mouseEnabled",
            "type": "{Boolean}",
            "default": "true",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 194,
            "description": "If false, the tick will not run on this display object (or its children). This can provide some performance benefits.\nIn addition to preventing the \"tick\" event from being dispatched, it will also prevent tick related updates\non some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).",
            "itemtype": "property",
            "name": "tickEnabled",
            "type": "Boolean",
            "default": "true",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 204,
            "description": "An optional name for this display object. Included in {{#crossLink \"DisplayObject/toString\"}}{{/crossLink}} . Useful for\ndebugging.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 213,
            "description": "A reference to the {{#crossLink \"Container\"}}{{/crossLink}} or {{#crossLink \"Stage\"}}{{/crossLink}} object that\ncontains this display object, or null if it has not been added\nto one.",
            "itemtype": "property",
            "name": "parent",
            "final": 1,
            "type": "{Container}",
            "default": "null",
            "readonly": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 225,
            "description": "The left offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate\naround its center, you would set regX and {{#crossLink \"DisplayObject/regY:property\"}}{{/crossLink}} to 50.",
            "itemtype": "property",
            "name": "regX",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 234,
            "description": "The y offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around\nits center, you would set {{#crossLink \"DisplayObject/regX:property\"}}{{/crossLink}} and regY to 50.",
            "itemtype": "property",
            "name": "regY",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 243,
            "description": "The rotation in degrees for this display object.",
            "itemtype": "property",
            "name": "rotation",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 251,
            "description": "The factor to stretch this display object horizontally. For example, setting scaleX to 2 will stretch the display\nobject to twice its nominal width. To horizontally flip an object, set the scale to a negative number.",
            "itemtype": "property",
            "name": "scaleX",
            "type": "{Number}",
            "default": "1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 260,
            "description": "The factor to stretch this display object vertically. For example, setting scaleY to 0.5 will stretch the display\nobject to half its nominal height. To vertically flip an object, set the scale to a negative number.",
            "itemtype": "property",
            "name": "scaleY",
            "type": "{Number}",
            "default": "1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 269,
            "description": "The factor to skew this display object horizontally.",
            "itemtype": "property",
            "name": "skewX",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 277,
            "description": "The factor to skew this display object vertically.",
            "itemtype": "property",
            "name": "skewY",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 285,
            "description": "A shadow object that defines the shadow to render on this display object. Set to `null` to remove a shadow. If\nnull, this property is inherited from the parent container.",
            "itemtype": "property",
            "name": "shadow",
            "type": "{Shadow}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 294,
            "description": "Indicates whether this display object should be rendered to the canvas and included when running the Stage\n{{#crossLink \"Stage/getObjectsUnderPoint\"}}{{/crossLink}} method.",
            "itemtype": "property",
            "name": "visible",
            "type": "{Boolean}",
            "default": "true",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 303,
            "description": "The x (horizontal) position of the display object, relative to its parent.",
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 311,
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 318,
            "description": "If set, defines the transformation for this display object, overriding all other transformation properties\n(x, y, rotation, scale, skew).",
            "itemtype": "property",
            "name": "transformMatrix",
            "type": "{Matrix2D}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 327,
            "description": "The composite operation indicates how the pixels of this display object will be composited with the elements\nbehind it. If `null`, this property is inherited from the parent container. For more information, read the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\nwhatwg spec on compositing</a>.",
            "itemtype": "property",
            "name": "compositeOperation",
            "type": "{String}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 338,
            "description": "Indicates whether the display object should be drawn to a whole pixel when\n{{#crossLink \"Stage/snapToPixelEnabled\"}}{{/crossLink}} is true. To enable/disable snapping on whole\ncategories of display objects, set this value on the prototype (Ex. Text.prototype.snapToPixel = true).",
            "itemtype": "property",
            "name": "snapToPixel",
            "type": "{Boolean}",
            "default": "true",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 348,
            "description": "An array of Filter objects to apply to this display object. Filters are only applied / updated when {{#crossLink \"cache\"}}{{/crossLink}}\nor {{#crossLink \"updateCache\"}}{{/crossLink}} is called on the display object, and only apply to the area that is\ncached.",
            "itemtype": "property",
            "name": "filters",
            "type": "{Array}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 358,
            "description": "A Shape instance that defines a vector mask (clipping path) for this display object.  The shape's transformation\nwill be applied relative to the display object's parent coordinates (as if it were a child of the parent).",
            "itemtype": "property",
            "name": "mask",
            "type": "{Shape}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 367,
            "description": "A display object that will be tested when checking mouse interactions or testing {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}.\nThe hit area will have its transformation applied relative to this display object's coordinate space (as though\nthe hit test object were a child of this display object and relative to its regX/Y). The hitArea will be tested\nusing only its own `alpha` value regardless of the alpha value on the target display object, or the target's\nancestors (parents).\n\nIf set on a {{#crossLink \"Container\"}}{{/crossLink}}, children of the Container will not receive mouse events.\nThis is similar to setting {{#crossLink \"mouseChildren\"}}{{/crossLink}} to false.\n\nNote that hitArea is NOT currently used by the `hitTest()` method, nor is it supported for {{#crossLink \"Stage\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "hitArea",
            "type": "{DisplayObject}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 384,
            "description": "A CSS cursor (ex. \"pointer\", \"help\", \"text\", etc) that will be displayed when the user hovers over this display\nobject. You must enable mouseover events using the {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}} method to\nuse this property. Setting a non-null cursor on a Container will override the cursor set on its descendants.",
            "itemtype": "property",
            "name": "cursor",
            "type": "{String}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 396,
            "itemtype": "property",
            "name": "_cacheOffsetX",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 404,
            "itemtype": "property",
            "name": "_cacheOffsetY",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 412,
            "itemtype": "property",
            "name": "_filterOffsetX",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 420,
            "itemtype": "property",
            "name": "_filterOffsetY",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 428,
            "itemtype": "property",
            "name": "_cacheScale",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "1",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 436,
            "itemtype": "property",
            "name": "_cacheDataURLID",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 444,
            "itemtype": "property",
            "name": "_cacheDataURL",
            "access": "protected",
            "tagname": "",
            "type": "{String}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 452,
            "itemtype": "property",
            "name": "_props",
            "access": "protected",
            "tagname": "",
            "type": "{DisplayObject}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 460,
            "itemtype": "property",
            "name": "_rectangle",
            "access": "protected",
            "tagname": "",
            "type": "{Rectangle}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 468,
            "itemtype": "property",
            "name": "_bounds",
            "access": "protected",
            "tagname": "",
            "type": "{Rectangle}",
            "default": "null",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 482,
            "description": "Listing of mouse event names. Used in _hasMouseEventListener.",
            "itemtype": "property",
            "name": "_MOUSE_EVENTS",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "type": "{Array}",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 491,
            "description": "Suppresses errors generated when using features like hitTest, mouse events, and {{#crossLink \"getObjectsUnderPoint\"}}{{/crossLink}}\nwith cross domain content.",
            "itemtype": "property",
            "name": "suppressCrossDomainErrors",
            "static": 1,
            "type": "{Boolean}",
            "default": "false",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 501,
            "itemtype": "property",
            "name": "_snapToPixelEnabled",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "type": "{Boolean}",
            "default": "false",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 510,
            "itemtype": "property",
            "name": "_hitTestCanvas",
            "type": "{HTMLCanvasElement | Object}",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 516,
            "itemtype": "property",
            "name": "_hitTestContext",
            "type": "{CanvasRenderingContext2D}",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 529,
            "itemtype": "property",
            "name": "_nextCacheID",
            "type": "{Number}",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 539,
            "description": "Dispatched when the user presses their left mouse button over the display object. See the \n{{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "mousedown",
            "since": "0.6.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 546,
            "description": "Dispatched when the user presses their left mouse button and then releases it while over the display object.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "click",
            "since": "0.6.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 553,
            "description": "Dispatched when the user double clicks their left mouse button over this display object.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "dblclick",
            "since": "0.6.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 560,
            "description": "Dispatched when the user's mouse enters this display object. This event must be enabled using \n{{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}. See also {{#crossLink \"DisplayObject/rollover:event\"}}{{/crossLink}}.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "mouseover",
            "since": "0.6.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 568,
            "description": "Dispatched when the user's mouse leaves this display object. This event must be enabled using \n{{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}. See also {{#crossLink \"DisplayObject/rollout:event\"}}{{/crossLink}}.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "mouseout",
            "since": "0.6.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 576,
            "description": "This event is similar to {{#crossLink \"DisplayObject/mouseover:event\"}}{{/crossLink}}, with the following\ndifferences: it does not bubble, and it considers {{#crossLink \"Container\"}}{{/crossLink}} instances as an\naggregate of their content.\n\nFor example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over\nshapeA and then directly on to shapeB. With a listener for {{#crossLink \"mouseover:event\"}}{{/crossLink}} on\nmyContainer, two events would be received, each targeting a child element:<OL>\n<LI>when the mouse enters shapeA (target=shapeA)</LI>\n<LI>when the mouse enters shapeB (target=shapeB)</LI>\n</OL>\nHowever, with a listener for \"rollover\" instead, only a single event is received when the mouse first enters\nthe aggregate myContainer content (target=myContainer).\n\nThis event must be enabled using {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "rollover",
            "since": "0.7.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 596,
            "description": "This event is similar to {{#crossLink \"DisplayObject/mouseout:event\"}}{{/crossLink}}, with the following\ndifferences: it does not bubble, and it considers {{#crossLink \"Container\"}}{{/crossLink}} instances as an\naggregate of their content.\n\nFor example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over\nshapeA, then directly on to shapeB, then off both. With a listener for {{#crossLink \"mouseout:event\"}}{{/crossLink}}\non myContainer, two events would be received, each targeting a child element:<OL>\n<LI>when the mouse leaves shapeA (target=shapeA)</LI>\n<LI>when the mouse leaves shapeB (target=shapeB)</LI>\n</OL>\nHowever, with a listener for \"rollout\" instead, only a single event is received when the mouse leaves\nthe aggregate myContainer content (target=myContainer).\n\nThis event must be enabled using {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "rollout",
            "since": "0.7.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 616,
            "description": "After a {{#crossLink \"DisplayObject/mousedown:event\"}}{{/crossLink}} occurs on a display object, a pressmove\nevent will be generated on that object whenever the mouse moves until the mouse press is released. This can be\nuseful for dragging and similar operations.",
            "itemtype": "event",
            "name": "pressmove",
            "since": "0.7.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 624,
            "description": "After a {{#crossLink \"DisplayObject/mousedown:event\"}}{{/crossLink}} occurs on a display object, a pressup event\nwill be generated on that object when that mouse press is released. This can be useful for dragging and similar\noperations.",
            "itemtype": "event",
            "name": "pressup",
            "since": "0.7.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 632,
            "description": "Dispatched when the display object is added to a parent container.",
            "itemtype": "event",
            "name": "added",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 637,
            "description": "Dispatched when the display object is removed from its parent container.",
            "itemtype": "event",
            "name": "removed",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 642,
            "description": "Dispatched on each display object on a stage whenever the stage updates. This occurs immediately before the\nrendering (draw) pass. When {{#crossLink \"Stage/update\"}}{{/crossLink}} is called, first all display objects on\nthe stage dispatch the tick event, then all of the display objects are drawn to stage. Children will have their\n{{#crossLink \"tick:event\"}}{{/crossLink}} event dispatched in order of their depth prior to the event being\ndispatched on their parent.",
            "itemtype": "event",
            "name": "tick",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "An array containing any arguments that were passed to the Stage.update() method. For\n     example if you called stage.update(\"hello\"), then the params would be [\"hello\"].",
                    "type": "Array"
                }
            ],
            "since": "0.6.0",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 658,
            "description": "Use the {{#crossLink \"DisplayObject/stage:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "getStage",
            "return": {
                "description": "",
                "type": "Stage"
            },
            "deprecated": true,
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 672,
            "description": "Returns the Stage instance that this display object will be rendered on, or null if it has not been added to one.",
            "itemtype": "property",
            "name": "stage",
            "type": "{Stage}",
            "readonly": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 686,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 698,
            "description": "Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\nReturns <code>true</code> if the draw was handled (useful for overriding functionality).\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache. For example,\nused for drawing the cache (to prevent it from simply drawing an existing cache back into itself).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 717,
            "description": "Applies this display object's transformation, alpha, globalCompositeOperation, clipping path (mask), and shadow\nto the specified context. This is typically called prior to {{#crossLink \"DisplayObject/draw\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "updateContext",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D to update.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 749,
            "description": "Draws the display object into a new canvas, which is then used for subsequent draws. For complex content\nthat does not change frequently (ex. a Container with many children that do not move, or a complex vector Shape),\nthis can provide for much faster rendering because the content does not need to be re-rendered each tick. The\ncached display object can be moved, rotated, faded, etc freely, however if its content changes, you must\nmanually update the cache by calling <code>updateCache()</code> or <code>cache()</code> again. You must specify\nthe cache area via the x, y, w, and h parameters. This defines the rectangle that will be rendered and cached\nusing this display object's coordinates.\n\n<h4>Example</h4>\nFor example if you defined a Shape that drew a circle at 0, 0 with a radius of 25:\n\n     var shape = new createjs.Shape();\n     shape.graphics.beginFill(\"#ff0000\").drawCircle(0, 0, 25);\n     myShape.cache(-25, -25, 50, 50);\n\nNote that filters need to be defined <em>before</em> the cache is applied. Check out the {{#crossLink \"Filter\"}}{{/crossLink}}\nclass for more information. Some filters (ex. BlurFilter) will not work as expected in conjunction with the scale param.\n\nUsually, the resulting cacheCanvas will have the dimensions width*scale by height*scale, however some filters (ex. BlurFilter)\nwill add padding to the canvas dimensions.",
            "itemtype": "method",
            "name": "cache",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate origin for the cache region.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate origin for the cache region.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the cache region.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the cache region.",
                    "type": "Number"
                },
                {
                    "name": "scale",
                    "description": "The scale at which the cache will be created. For example, if you cache a vector shape using\n\tmyShape.cache(0,0,100,100,2) then the resulting cacheCanvas will be 200x200 px. This lets you scale and rotate\n\tcached elements with greater fidelity. Default is 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 792,
            "description": "Redraws the display object to its cache. Calling updateCache without an active cache will throw an error.\nIf compositeOperation is null the current cache will be cleared prior to drawing. Otherwise the display object\nwill be drawn over the existing cache using the specified compositeOperation.\n\n<h4>Example</h4>\nClear the current graphics of a cached shape, draw some new instructions, and then update the cache. The new line\nwill be drawn on top of the old one.\n\n     // Not shown: Creating the shape, and caching it.\n     shapeInstance.clear();\n     shapeInstance.setStrokeStyle(3).beginStroke(\"#ff0000\").moveTo(100, 100).lineTo(200,200);\n     shapeInstance.updateCache();",
            "itemtype": "method",
            "name": "updateCache",
            "params": [
                {
                    "name": "compositeOperation",
                    "description": "The compositeOperation to use, or null to clear the cache and redraw it.\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\nwhatwg spec on compositing</a>.",
                    "type": "String"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 841,
            "description": "Clears the current cache. See {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} for more information.",
            "itemtype": "method",
            "name": "uncache",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 851,
            "description": "Returns a data URL for the cache, or null if this display object is not cached.\nUses cacheID to ensure a new data URL is not generated if the cache has not changed.",
            "itemtype": "method",
            "name": "getCacheDataURL",
            "return": {
                "description": "The image data url for the cache.",
                "type": "String"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 863,
            "description": "Transforms the specified x and y position from the coordinate space of the display object\nto the global (stage) coordinate space. For example, this could be used to position an HTML label\nover a specific point on a nested display object. Returns a Point instance with x and y properties\ncorrelating to the transformed coordinates on the stage.\n\n<h4>Example</h4>\n\n     displayObject.x = 300;\n     displayObject.y = 200;\n     stage.addChild(displayObject);\n     var point = displayObject.localToGlobal(100, 100);\n     // Results in x=400, y=300",
            "itemtype": "method",
            "name": "localToGlobal",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the source display object to transform.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position in the source display object to transform.",
                    "type": "Number"
                },
                {
                    "name": "pt",
                    "description": "An object to copy the result into. If omitted a new Point object with x/y properties will be returned.",
                    "type": "Point | Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A Point instance with x and y properties correlating to the transformed coordinates\non the stage.",
                "type": "Point"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 888,
            "description": "Transforms the specified x and y position from the global (stage) coordinate space to the\ncoordinate space of the display object. For example, this could be used to determine\nthe current mouse position within the display object. Returns a Point instance with x and y properties\ncorrelating to the transformed position in the display object's coordinate space.\n\n<h4>Example</h4>\n\n     displayObject.x = 300;\n     displayObject.y = 200;\n     stage.addChild(displayObject);\n     var point = displayObject.globalToLocal(100, 100);\n     // Results in x=-200, y=-100",
            "itemtype": "method",
            "name": "globalToLocal",
            "params": [
                {
                    "name": "x",
                    "description": "The x position on the stage to transform.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position on the stage to transform.",
                    "type": "Number"
                },
                {
                    "name": "pt",
                    "description": "An object to copy the result into. If omitted a new Point object with x/y properties will be returned.",
                    "type": "Point | Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A Point instance with x and y properties correlating to the transformed position in the\ndisplay object's coordinate space.",
                "type": "Point"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 913,
            "description": "Transforms the specified x and y position from the coordinate space of this display object to the coordinate\nspace of the target display object. Returns a Point instance with x and y properties correlating to the\ntransformed position in the target's coordinate space. Effectively the same as using the following code with\n{{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.\n\n     var pt = this.localToGlobal(x, y);\n     pt = target.globalToLocal(pt.x, pt.y);",
            "itemtype": "method",
            "name": "localToLocal",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the source display object to transform.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position on the source display object to transform.",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "The target display object to which the coordinates will be transformed.",
                    "type": "DisplayObject"
                },
                {
                    "name": "pt",
                    "description": "An object to copy the result into. If omitted a new Point object with x/y properties will be returned.",
                    "type": "Point | Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a Point instance with x and y properties correlating to the transformed position\nin the target's coordinate space.",
                "type": "Point"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 935,
            "description": "Shortcut method to quickly set the transform properties on the display object. All parameters are optional.\nOmitted parameters will have the default value set.\n\n<h4>Example</h4>\n\n     displayObject.setTransform(100, 100, 2, 2);",
            "itemtype": "method",
            "name": "setTransform",
            "params": [
                {
                    "name": "x",
                    "description": "The horizontal translation (x position) in pixels",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "The vertical translation (y position) in pixels",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "scaleX",
                    "description": "The horizontal scale, as a percentage of 1",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "scaleY",
                    "description": "the vertical scale, as a percentage of 1",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "rotation",
                    "description": "The rotation, in degrees",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "skewX",
                    "description": "The horizontal skew factor",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "skewY",
                    "description": "The vertical skew factor",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "regX",
                    "description": "The horizontal registration point in pixels",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "regY",
                    "description": "The vertical registration point in pixels",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Returns this instance. Useful for chaining commands.",
                "type": "DisplayObject"
            },
            "chainable": 1,
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 969,
            "description": "Returns a matrix based on this object's current transform.",
            "itemtype": "method",
            "name": "getMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "Optional. A Matrix2D object to populate with the calculated values. If null, a new\nMatrix object is returned.",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "A matrix representing this display object's transform.",
                "type": "Matrix2D"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 981,
            "description": "Generates a Matrix2D object representing the combined transform of the display object and all of its\nparent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}). This can\nbe used to transform positions between coordinate spaces, such as with {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\nand {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getConcatenatedMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "A {{#crossLink \"Matrix2D\"}}{{/crossLink}} object to populate with the calculated values.\nIf null, a new Matrix2D object is returned.",
                    "type": "Matrix2D",
                    "optional": true
                }
            ],
            "return": {
                "description": "The combined matrix.",
                "type": "Matrix2D"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 999,
            "description": "Generates a DisplayProps object representing the combined display properties of the  object and all of its\nparent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}).",
            "itemtype": "method",
            "name": "getConcatenatedDisplayProps",
            "params": [
                {
                    "name": "props",
                    "description": "A {{#crossLink \"DisplayProps\"}}{{/crossLink}} object to populate with the calculated values.\nIf null, a new DisplayProps object is returned.",
                    "type": "DisplayProps",
                    "optional": true
                }
            ],
            "return": {
                "description": "The combined display properties.",
                "type": "DisplayProps"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1020,
            "description": "Tests whether the display object intersects the specified point in <em>local</em> coordinates (ie. draws a pixel\nwith alpha > 0 at the specified position). This ignores the alpha, shadow, hitArea, mask, and compositeOperation\nof the display object.\n\n<h4>Example</h4>\n\n\t\tvar myShape = new createjs.Shape();\n\t\tmyShape.graphics.beginFill(\"red\").drawRect(100, 100, 20, 50);\n\n\t\tconsole.log(myShape.hitTest(10,10); // false\n\t\tconsole.log(myShape.hitTest(110, 25); // true\n\nNote that to use Stage coordinates (such as {{#crossLink \"Stage/mouseX:property\"}}{{/crossLink}}), they must\nfirst be converted to local coordinates:\n\n     stage.addEventListener(\"stagemousedown\", handleMouseDown);\n     function handleMouseDown(event) {\n     \tvar p = myShape.globalToLocal(stage.mouseX, stage.mouseY);\n         var hit = myShape.hitTest(p.x, p.y);\n     }\n\nShape-to-shape collision is not currently supported by EaselJS.",
            "itemtype": "method",
            "name": "hitTest",
            "params": [
                {
                    "name": "x",
                    "description": "The x position to check in the display object's local coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position to check in the display object's local coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A Boolean indicating whether a visible portion of the DisplayObject intersect the specified\nlocal Point.",
                "type": "Boolean"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1061,
            "description": "Provides a chainable shortcut method for setting a number of properties on the instance.\n\n<h4>Example</h4>\n\n     var myGraphics = new createjs.Graphics().beginFill(\"#ff0000\").drawCircle(0, 0, 25);\n     var shape = stage.addChild(new createjs.Shape()).set({graphics:myGraphics, x:100, y:100, alpha:0.5});",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "props",
                    "description": "A generic object containing properties to copy to the DisplayObject instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the instance the method is called on (useful for chaining calls.)",
                "type": "DisplayObject"
            },
            "chainable": 1,
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1079,
            "description": "Returns a rectangle representing this object's bounds in its local coordinate system (ie. with no transformation).\nObjects that have been cached will return the bounds of the cache.\n\nNot all display objects can calculate their own bounds (ex. Shape). For these objects, you can use \n{{#crossLink \"DisplayObject/setBounds\"}}{{/crossLink}} so that they are included when calculating Container\nbounds.\n\n<table>\n\t<tr><td><b>All</b></td><td>\n\t\tAll display objects support setting bounds manually using setBounds(). Likewise, display objects that\n\t\thave been cached using cache() will return the bounds of their cache. Manual and cache bounds will override\n\t\tthe automatic calculations listed below.\n\t</td></tr>\n\t<tr><td><b>Bitmap</b></td><td>\n\t\tReturns the width and height of the sourceRect (if specified) or image, extending from (x=0,y=0).\n\t</td></tr>\n\t<tr><td><b>Sprite</b></td><td>\n\t\tReturns the bounds of the current frame. May have non-zero x/y if a frame registration point was specified\n\t\tin the spritesheet data. See also {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}}\n\t</td></tr>\n\t<tr><td><b>Container</b></td><td>\n\t\tReturns the aggregate (combined) bounds of all children that return a non-null value from getBounds().\n\t</td></tr>\n\t<tr><td><b>Shape</b></td><td>\n\t\tDoes not currently support automatic bounds calculations. Use setBounds() to manually define bounds.\n\t</td></tr>\n\t<tr><td><b>Text</b></td><td>\n\t\tReturns approximate bounds. Horizontal values (x/width) are quite accurate, but vertical values (y/height) are\n\t\tnot, especially when using textBaseline values other than \"top\".\n\t</td></tr>\n\t<tr><td><b>BitmapText</b></td><td>\n\t\tReturns approximate bounds. Values will be more accurate if spritesheet frame registration points are close\n\t\tto (x=0,y=0).\n\t</td></tr>\n</table>\n\nBounds can be expensive to calculate for some objects (ex. text, or containers with many children), and\nare recalculated each time you call getBounds(). You can prevent recalculation on static objects by setting the\nbounds explicitly:\n\n\tvar bounds = obj.getBounds();\n\tobj.setBounds(bounds.x, bounds.y, bounds.width, bounds.height);\n\t// getBounds will now use the set values, instead of recalculating\n\nTo reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its\nvalues if you need to retain it.\n\n\tvar myBounds = obj.getBounds().clone();\n\t// OR:\n\tmyRect.copy(obj.getBounds());",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "A Rectangle instance representing the bounds, or null if bounds are not available for this\nobject.",
                "type": "Rectangle"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1145,
            "description": "Returns a rectangle representing this object's bounds in its parent's coordinate system (ie. with transformations applied).\nObjects that have been cached will return the transformed bounds of the cache.\n\nNot all display objects can calculate their own bounds (ex. Shape). For these objects, you can use \n{{#crossLink \"DisplayObject/setBounds\"}}{{/crossLink}} so that they are included when calculating Container\nbounds.\n\nTo reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its\nvalues if you need to retain it.\n\nContainer instances calculate aggregate bounds for all children that return bounds via getBounds.",
            "itemtype": "method",
            "name": "getTransformedBounds",
            "return": {
                "description": "A Rectangle instance representing the bounds, or null if bounds are not available for this object.",
                "type": "Rectangle"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1164,
            "description": "Allows you to manually specify the bounds of an object that either cannot calculate their own bounds (ex. Shape &\nText) for future reference, or so the object can be included in Container bounds. Manually set bounds will always\noverride calculated bounds.\n\nThe bounds should be specified in the object's local (untransformed) coordinates. For example, a Shape instance\nwith a 25px radius circle centered at 0,0 would have bounds of (-25, -25, 50, 50).",
            "itemtype": "method",
            "name": "setBounds",
            "params": [
                {
                    "name": "x",
                    "description": "The x origin of the bounds. Pass null to remove the manual bounds.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y origin of the bounds.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the bounds.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height of the bounds.",
                    "type": "Number"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1182,
            "description": "Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are\nreverted to their defaults (for example .parent). Caches are not maintained across clones, and some elements\nare copied by reference (masks, individual filter instances, hit area)",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current DisplayObject instance.",
                "type": "DisplayObject"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1193,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1205,
            "itemtype": "method",
            "name": "_cloneProps",
            "params": [
                {
                    "name": "o",
                    "description": "The DisplayObject instance which will have properties from the current DisplayObject\ninstance copied into.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "o",
                "type": "DisplayObject"
            },
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1238,
            "itemtype": "method",
            "name": "_applyShadow",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "shadow",
                    "description": "",
                    "type": "Shadow"
                }
            ],
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1253,
            "itemtype": "method",
            "name": "_tick",
            "params": [
                {
                    "name": "evtObj",
                    "description": "An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1269,
            "itemtype": "method",
            "name": "_testHit",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1286,
            "itemtype": "method",
            "name": "_applyFilters",
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1301,
            "itemtype": "method",
            "name": "_getFilterBounds",
            "return": {
                "description": "",
                "type": "Rectangle"
            },
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1317,
            "itemtype": "method",
            "name": "_getBounds",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix2D"
                },
                {
                    "name": "ignoreTransform",
                    "description": "If true, does not apply this object's transform.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Rectangle"
            },
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1328,
            "itemtype": "method",
            "name": "_transformBounds",
            "params": [
                {
                    "name": "bounds",
                    "description": "",
                    "type": "Rectangle"
                },
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix2D"
                },
                {
                    "name": "ignoreTransform",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Rectangle"
            },
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/DisplayObject.js",
            "line": 1361,
            "description": "Indicates whether the display object has any mouse event listeners or a cursor.",
            "itemtype": "method",
            "name": "_isMouseOpaque",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "DisplayObject",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 140,
            "description": "Holds a reference to the last command that was created or appended. For example, you could retain a reference\nto a Fill command in order to dynamically update the color later by using:\n\n\t\tvar myFill = myGraphics.beginFill(\"red\").command;\n\t\t// update color later:\n\t\tmyFill.style = \"yellow\";",
            "itemtype": "property",
            "name": "command",
            "type": "Object",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 155,
            "itemtype": "property",
            "name": "_stroke",
            "access": "protected",
            "tagname": "",
            "type": "{Stroke}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 162,
            "itemtype": "property",
            "name": "_strokeStyle",
            "access": "protected",
            "tagname": "",
            "type": "{StrokeStyle}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 169,
            "itemtype": "property",
            "name": "_oldStrokeStyle",
            "access": "protected",
            "tagname": "",
            "type": "{StrokeStyle}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 176,
            "itemtype": "property",
            "name": "_strokeDash",
            "access": "protected",
            "tagname": "",
            "type": "{StrokeDash}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 183,
            "itemtype": "property",
            "name": "_oldStrokeDash",
            "access": "protected",
            "tagname": "",
            "type": "{StrokeDash}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 190,
            "itemtype": "property",
            "name": "_strokeIgnoreScale",
            "access": "protected",
            "tagname": "",
            "type": "Boolean",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 197,
            "itemtype": "property",
            "name": "_fill",
            "access": "protected",
            "tagname": "",
            "type": "{Fill}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 204,
            "itemtype": "property",
            "name": "_instructions",
            "access": "protected",
            "tagname": "",
            "type": "{Array}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 211,
            "description": "Indicates the last instruction index that was committed.",
            "itemtype": "property",
            "name": "_commitIndex",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 219,
            "description": "Uncommitted instructions.",
            "itemtype": "property",
            "name": "_activeInstructions",
            "access": "protected",
            "tagname": "",
            "type": "{Array}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 227,
            "description": "This indicates that there have been changes to the activeInstruction list since the last updateInstructions call.",
            "itemtype": "property",
            "name": "_dirty",
            "access": "protected",
            "tagname": "",
            "type": "{Boolean}",
            "default": "false",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 236,
            "description": "Index to draw from if a store operation has happened.",
            "itemtype": "property",
            "name": "_storeIndex",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 251,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 266,
            "description": "Returns a CSS compatible color string based on the specified RGB numeric color values in the format\n\"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\". For example,\n\n     createjs.Graphics.getRGB(50, 100, 150, 0.5);\n     // Returns \"rgba(50,100,150,0.5)\"\n\nIt also supports passing a single hex color value as the first param, and an optional alpha value as the second\nparam. For example,\n\n     createjs.Graphics.getRGB(0xFF00FF, 0.2);\n     // Returns \"rgba(255,0,255,0.2)\"",
            "itemtype": "method",
            "name": "getRGB",
            "static": 1,
            "params": [
                {
                    "name": "r",
                    "description": "The red component for the color, between 0 and 0xFF (255).",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "The green component for the color, between 0 and 0xFF (255).",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "The blue component for the color, between 0 and 0xFF (255).",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "The alpha component for the color where 0 is fully transparent and 1 is fully opaque.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "A CSS compatible color string based on the specified RGB numeric color values in the format\n\"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\".",
                "type": "String"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 302,
            "description": "Returns a CSS compatible color string based on the specified HSL numeric color values in the format \"hsla(360,100,100,1.0)\",\nor if alpha is null then in the format \"hsl(360,100,100)\".\n\n     createjs.Graphics.getHSL(150, 100, 70);\n     // Returns \"hsl(150,100,70)\"",
            "itemtype": "method",
            "name": "getHSL",
            "static": 1,
            "params": [
                {
                    "name": "hue",
                    "description": "The hue component for the color, between 0 and 360.",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "The saturation component for the color, between 0 and 100.",
                    "type": "Number"
                },
                {
                    "name": "lightness",
                    "description": "The lightness component for the color, between 0 and 100.",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "The alpha component for the color where 0 is fully transparent and 1 is fully opaque.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "A CSS compatible color string based on the specified HSL numeric color values in the format\n\"hsla(360,100,100,1.0)\", or if alpha is null then in the format \"hsl(360,100,100)\".",
                "type": "String"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 328,
            "description": "A reusable instance of {{#crossLink \"Graphics/BeginPath\"}}{{/crossLink}} to avoid\nunnecessary instantiation.",
            "itemtype": "property",
            "name": "beginCmd",
            "type": "{Graphics.BeginPath}",
            "static": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 337,
            "description": "Map of Base64 characters to values. Used by {{#crossLink \"Graphics/decodePath\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "BASE_64",
            "static": 1,
            "final": 1,
            "readonly": "",
            "type": "{Object}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 347,
            "description": "Maps numeric values for the caps parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\ncorresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n\"butt\", 1 to \"round\", and 2 to \"square\".\nFor example, to set the line caps to \"square\":\n\n     myGraphics.ss(16, 2);",
            "itemtype": "property",
            "name": "STROKE_CAPS_MAP",
            "static": 1,
            "final": 1,
            "readonly": "",
            "type": "{Array}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 363,
            "description": "Maps numeric values for the joints parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\ncorresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n\"miter\", 1 to \"round\", and 2 to \"bevel\".\nFor example, to set the line joints to \"bevel\":\n\n     myGraphics.ss(16, 0, 2);",
            "itemtype": "property",
            "name": "STROKE_JOINTS_MAP",
            "static": 1,
            "final": 1,
            "readonly": "",
            "type": "{Array}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 379,
            "itemtype": "property",
            "name": "_ctx",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "type": "{CanvasRenderingContext2D}",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 393,
            "description": "Use the {{#crossLink \"Graphics/instructions:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "getInstructions",
            "return": {
                "description": "",
                "type": "Array"
            },
            "deprecated": true,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 404,
            "description": "Returns the graphics instructions array. Each entry is a graphics command object (ex. Graphics.Fill, Graphics.Rect)\nModifying the returned array directly is not recommended, and is likely to result in unexpected behaviour.\n\nThis property is mainly intended for introspection of the instructions (ex. for graphics export).",
            "itemtype": "property",
            "name": "instructions",
            "type": "{Array}",
            "readonly": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 421,
            "description": "Returns true if this Graphics instance has no drawing commands.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "Returns true if this Graphics instance has no drawing commands.",
                "type": "Boolean"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 430,
            "description": "Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "data",
                    "description": "Optional data that is passed to graphics command exec methods. When called from a Shape instance, the shape passes itself as the data parameter. This can be used by custom graphic commands to insert contextual data.",
                    "type": "Object"
                }
            ],
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 447,
            "description": "Draws only the path described for this Graphics instance, skipping any non-path instructions, including fill and\nstroke descriptions. Used for <code>DisplayObject.mask</code> to draw the clipping path, for example.\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "drawAsPath",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 466,
            "description": "Moves the drawing point to the specified position. A tiny API method \"mt\" also exists.",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate the drawing point should move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate the drawing point should move to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls).",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 478,
            "description": "Draws a line from the current drawing point to the specified position, which become the new current drawing\npoint. Note that you *must* call {{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} before the first `lineTo()`.\nA tiny API method \"lt\" also exists.\n\nFor detailed information, read the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#complex-shapes-(paths)\">\nwhatwg spec</a>.",
            "itemtype": "method",
            "name": "lineTo",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate the drawing point should draw to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate the drawing point should draw to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 496,
            "description": "Draws an arc with the specified control points and radius.  For detailed information, read the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arcto\">\nwhatwg spec</a>. A tiny API method \"at\" also exists.",
            "itemtype": "method",
            "name": "arcTo",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 513,
            "description": "Draws an arc defined by the radius, startAngle and endAngle arguments, centered at the position (x, y). For\nexample, to draw a full circle with a radius of 20 centered at (100, 100):\n\n     arc(100, 100, 20, 0, Math.PI*2);\n\nFor detailed information, read the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arc\">whatwg spec</a>.\nA tiny API method \"a\" also exists.",
            "itemtype": "method",
            "name": "arc",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "startAngle",
                    "description": "Measured in radians.",
                    "type": "Number"
                },
                {
                    "name": "endAngle",
                    "description": "Measured in radians.",
                    "type": "Number"
                },
                {
                    "name": "anticlockwise",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 536,
            "description": "Draws a quadratic curve from the current drawing point to (x, y) using the control point (cpx, cpy). For detailed\ninformation, read the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-quadraticcurveto\">\nwhatwg spec</a>. A tiny API method \"qt\" also exists.",
            "itemtype": "method",
            "name": "quadraticCurveTo",
            "params": [
                {
                    "name": "cpx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cpy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 552,
            "description": "Draws a bezier curve from the current drawing point to (x, y) using the control points (cp1x, cp1y) and (cp2x,\ncp2y). For detailed information, read the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-beziercurveto\">\nwhatwg spec</a>. A tiny API method \"bt\" also exists.",
            "itemtype": "method",
            "name": "bezierCurveTo",
            "params": [
                {
                    "name": "cp1x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp1y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp2x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp2y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 571,
            "description": "Draws a rectangle at (x, y) with the specified width and height using the current fill and/or stroke.\nFor detailed information, read the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-rect\">\nwhatwg spec</a>. A tiny API method \"r\" also exists.",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the rectangle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 588,
            "description": "Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified\nsince the fill or stroke was last set. A tiny API method \"cp\" also exists.",
            "itemtype": "method",
            "name": "closePath",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 601,
            "description": "Clears all drawing instructions, effectively resetting this Graphics instance. Any line and fill styles will need\nto be redefined to draw shapes following a clear call. A tiny API method \"c\" also exists.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 615,
            "description": "Begins a fill with the specified color. This ends the current sub-path. A tiny API method \"f\" also exists.",
            "itemtype": "method",
            "name": "beginFill",
            "params": [
                {
                    "name": "color",
                    "description": "A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\nnull will result in no fill.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 627,
            "description": "Begins a linear gradient fill defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\nexample, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\nsquare to display it:\n\n     myGraphics.beginLinearGradientFill([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n\nA tiny API method \"lf\" also exists.",
            "itemtype": "method",
            "name": "beginLinearGradientFill",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\ndrawing from red to blue.",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\nthe first color to 10% then interpolating to the second color at 90%.",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 651,
            "description": "Begins a radial gradient fill. This ends the current sub-path. For example, the following code defines a red to\nblue radial gradient centered at (100, 100), with a radius of 50, and draws a circle to display it:\n\n     myGraphics.beginRadialGradientFill([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);\n\nA tiny API method \"rf\" also exists.",
            "itemtype": "method",
            "name": "beginRadialGradientFill",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\na gradient drawing from red to blue.",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1,\n0.9] would draw the first color to 10% then interpolating to the second color at 90%.",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r0",
                    "description": "Radius of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r1",
                    "description": "Radius of the outer circle that defines the gradient.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 676,
            "description": "Begins a pattern fill using the specified image. This ends the current sub-path. A tiny API method \"bf\" also\nexists.",
            "itemtype": "method",
            "name": "beginBitmapFill",
            "params": [
                {
                    "name": "image",
                    "description": "The Image, Canvas, or Video object to use\nas the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.",
                    "type": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "repetition",
                    "description": "Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n\"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n\"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".",
                    "type": "String"
                },
                {
                    "name": "matrix",
                    "description": "Optional. Specifies a transformation matrix for the bitmap fill. This transformation\nwill be applied relative to the parent transform.",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 694,
            "description": "Ends the current sub-path, and begins a new one with no fill. Functionally identical to <code>beginFill(null)</code>.\nA tiny API method \"ef\" also exists.",
            "itemtype": "method",
            "name": "endFill",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 705,
            "description": "Sets the stroke style. Like all drawing methods, this can be chained, so you can define\nthe stroke style and color in a single line of code like so:\n\n\tmyGraphics.setStrokeStyle(8,\"round\").beginStroke(\"#F00\");\n\nA tiny API method \"ss\" also exists.",
            "itemtype": "method",
            "name": "setStrokeStyle",
            "params": [
                {
                    "name": "thickness",
                    "description": "The width of the stroke.",
                    "type": "Number"
                },
                {
                    "name": "caps",
                    "description": "Indicates the type of caps to use at the end of lines. One of butt,\nround, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\nthe tiny API.",
                    "type": "String | Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "joints",
                    "description": "Specifies the type of joints that should be used where two lines meet.\nOne of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\nfor use with the tiny API.",
                    "type": "String | Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "miterLimit",
                    "description": "If joints is set to \"miter\", then you can specify a miter limit ratio which\ncontrols at what point a mitered joint will be clipped.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "10"
                },
                {
                    "name": "ignoreScale",
                    "description": "If true, the stroke will be drawn at the specified thickness regardless\nof active transformations.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 737,
            "description": "Sets or clears the stroke dash pattern.\n\n\tmyGraphics.setStrokeDash([20, 10], 0);\n\nA tiny API method `sd` also exists.",
            "itemtype": "method",
            "name": "setStrokeDash",
            "params": [
                {
                    "name": "segments",
                    "description": "An array specifying the dash pattern, alternating between line and gap.\nFor example, `[20,10]` would create a pattern of 20 pixel lines with 10 pixel gaps between them.\nPassing null or an empty array will clear the existing stroke dash.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "The offset of the dash pattern. For example, you could increment this value to create a \"marching ants\" effect.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 757,
            "description": "Begins a stroke with the specified color. This ends the current sub-path. A tiny API method \"s\" also exists.",
            "itemtype": "method",
            "name": "beginStroke",
            "params": [
                {
                    "name": "color",
                    "description": "A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\nnull will result in no stroke.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 769,
            "description": "Begins a linear gradient stroke defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\nexample, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\nsquare to display it:\n\n     myGraphics.setStrokeStyle(10).\n         beginLinearGradientStroke([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n\nA tiny API method \"ls\" also exists.",
            "itemtype": "method",
            "name": "beginLinearGradientStroke",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\na gradient drawing from red to blue.",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1,\n0.9] would draw the first color to 10% then interpolating to the second color at 90%.",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 794,
            "description": "Begins a radial gradient stroke. This ends the current sub-path. For example, the following code defines a red to\nblue radial gradient centered at (100, 100), with a radius of 50, and draws a rectangle to display it:\n\n     myGraphics.setStrokeStyle(10)\n         .beginRadialGradientStroke([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50)\n         .drawRect(50, 90, 150, 110);\n\nA tiny API method \"rs\" also exists.",
            "itemtype": "method",
            "name": "beginRadialGradientStroke",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\na gradient drawing from red to blue.",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1,\n0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\nto 100%.",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r0",
                    "description": "Radius of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r1",
                    "description": "Radius of the outer circle that defines the gradient.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 822,
            "description": "Begins a pattern fill using the specified image. This ends the current sub-path. Note that unlike bitmap fills,\nstrokes do not currently support a matrix parameter due to limitations in the canvas API. A tiny API method \"bs\"\nalso exists.",
            "itemtype": "method",
            "name": "beginBitmapStroke",
            "params": [
                {
                    "name": "image",
                    "description": "The Image, Canvas, or Video object to use\nas the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.",
                    "type": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "repetition",
                    "description": "Optional. Indicates whether to repeat the image in the fill area. One of\n\"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".",
                    "type": "String",
                    "optional": true,
                    "optdefault": "repeat"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 839,
            "description": "Ends the current sub-path, and begins a new one with no stroke. Functionally identical to <code>beginStroke(null)</code>.\nA tiny API method \"es\" also exists.",
            "itemtype": "method",
            "name": "endStroke",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 850,
            "description": "Maps the familiar ActionScript <code>curveTo()</code> method to the functionally similar {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "quadraticCurveTo",
            "params": [
                {
                    "name": "cpx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cpy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 863,
            "description": "Maps the familiar ActionScript <code>drawRect()</code> method to the functionally similar {{#crossLink \"Graphics/rect\"}}{{/crossLink}}\n method.",
            "itemtype": "method",
            "name": "drawRect",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the rectangle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 877,
            "description": "Draws a rounded rectangle with all corners with the specified radius.",
            "itemtype": "method",
            "name": "drawRoundRect",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Corner radius.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 892,
            "description": "Draws a rounded rectangle with different corner radii. Supports positive and negative corner radii. A tiny API\nmethod \"rc\" also exists.",
            "itemtype": "method",
            "name": "drawRoundRectComplex",
            "params": [
                {
                    "name": "x",
                    "description": "The horizontal coordinate to draw the round rect.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The vertical coordinate to draw the round rect.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "The width of the round rect.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The height of the round rect.",
                    "type": "Number"
                },
                {
                    "name": "radiusTL",
                    "description": "Top left corner radius.",
                    "type": "Number"
                },
                {
                    "name": "radiusTR",
                    "description": "Top right corner radius.",
                    "type": "Number"
                },
                {
                    "name": "radiusBR",
                    "description": "Bottom right corner radius.",
                    "type": "Number"
                },
                {
                    "name": "radiusBL",
                    "description": "Bottom left corner radius.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 911,
            "description": "Draws a circle with the specified radius at (x, y).\n\n     var g = new createjs.Graphics();\n\t    g.setStrokeStyle(1);\n\t    g.beginStroke(createjs.Graphics.getRGB(0,0,0));\n\t    g.beginFill(createjs.Graphics.getRGB(255,0,0));\n\t    g.drawCircle(0,0,3);\n\n\t    var s = new createjs.Shape(g);\n\t\ts.x = 100;\n\t\ts.y = 100;\n\n\t    stage.addChild(s);\n\t    stage.update();\n\nA tiny API method \"dc\" also exists.",
            "itemtype": "method",
            "name": "drawCircle",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate center point of circle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y coordinate center point of circle.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Radius of circle.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 939,
            "description": "Draws an ellipse (oval) with a specified width (w) and height (h). Similar to {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}},\nexcept the width and height can be different. A tiny API method \"de\" also exists.",
            "itemtype": "method",
            "name": "drawEllipse",
            "params": [
                {
                    "name": "x",
                    "description": "The left coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\nwhich draws from center.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The top coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\nwhich draws from the center.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this\nnumber.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 957,
            "description": "Draws a star if pointSize is greater than 0, or a regular polygon if pointSize is 0 with the specified number of\npoints. For example, the following code will draw a familiar 5 pointed star shape centered at 100, 100 and with a\nradius of 50:\n\n     myGraphics.beginFill(\"#FF0\").drawPolyStar(100, 100, 50, 5, 0.6, -90);\n     // Note: -90 makes the first point vertical\n\nA tiny API method \"dp\" also exists.",
            "itemtype": "method",
            "name": "drawPolyStar",
            "params": [
                {
                    "name": "x",
                    "description": "Position of the center of the shape.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Position of the center of the shape.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "The outer radius of the shape.",
                    "type": "Number"
                },
                {
                    "name": "sides",
                    "description": "The number of points on the star or sides on the polygon.",
                    "type": "Number"
                },
                {
                    "name": "pointSize",
                    "description": "The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\npolygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "The angle of the first point / corner. For example a value of 0 will draw the first point\ndirectly to the right of the center.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 984,
            "description": "Removed in favour of using custom command objects with {{#crossLink \"Graphics/append\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "inject",
            "deprecated": true,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 990,
            "description": "Appends a graphics command object to the graphics queue. Command objects expose an \"exec\" method\nthat accepts two parameters: the Context2D to operate on, and an arbitrary data object passed into\n{{#crossLink \"Graphics/draw\"}}{{/crossLink}}. The latter will usually be the Shape instance that called draw.\n\nThis method is used internally by Graphics methods, such as drawCircle, but can also be used directly to insert\nbuilt-in or custom graphics commands. For example:\n\n\t\t// attach data to our shape, so we can access it during the draw:\n\t\tmyShape.color = \"red\";\n\n\t\t// append a Circle command object:\n\t\tmyShape.graphics.append(new createjs.Graphics.Circle(50, 50, 30));\n\n\t\t// append a custom command object with an exec method that sets the fill style\n\t\t// based on the shape's data, and then fills the circle.\n\t\tmyShape.graphics.append({exec:function(ctx, shape) {\n\t\t\tctx.fillStyle = shape.color;\n\t\t\tctx.fill();\n\t\t}});",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "command",
                    "description": "A graphics command object exposing an \"exec\" method.",
                    "type": "Object"
                },
                {
                    "name": "clean",
                    "description": "The clean param is primarily for internal use. A value of true indicates that a command does not generate a path that should be stroked or filled.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1024,
            "description": "Decodes a compact encoded path string into a series of draw instructions.\nThis format is not intended to be human readable, and is meant for use by authoring tools.\nThe format uses a base64 character set, with each character representing 6 bits, to define a series of draw\ncommands.\n\nEach command is comprised of a single \"header\" character followed by a variable number of alternating x and y\nposition values. Reading the header bits from left to right (most to least significant): bits 1 to 3 specify the\ntype of operation (0-moveTo, 1-lineTo, 2-quadraticCurveTo, 3-bezierCurveTo, 4-closePath, 5-7 unused). Bit 4\nindicates whether position values use 12 bits (2 characters) or 18 bits (3 characters), with a one indicating the\nlatter. Bits 5 and 6 are currently unused.\n\nFollowing the header is a series of 0 (closePath), 2 (moveTo, lineTo), 4 (quadraticCurveTo), or 6 (bezierCurveTo)\nparameters. These parameters are alternating x/y positions represented by 2 or 3 characters (as indicated by the\n4th bit in the command char). These characters consist of a 1 bit sign (1 is negative, 0 is positive), followed\nby an 11 (2 char) or 17 (3 char) bit integer value. All position values are in tenths of a pixel. Except in the\ncase of move operations which are absolute, this value is a delta from the previous x or y position (as\nappropriate).\n\nFor example, the string \"A3cAAMAu4AAA\" represents a line starting at -150,0 and ending at 150,0.\n<br />A - bits 000000. First 3 bits (000) indicate a moveTo operation. 4th bit (0) indicates 2 chars per\nparameter.\n<br />n0 - 110111011100. Absolute x position of -150.0px. First bit indicates a negative value, remaining bits\nindicate 1500 tenths of a pixel.\n<br />AA - 000000000000. Absolute y position of 0.\n<br />I - 001100. First 3 bits (001) indicate a lineTo operation. 4th bit (1) indicates 3 chars per parameter.\n<br />Au4 - 000000101110111000. An x delta of 300.0px, which is added to the previous x value of -150.0px to\nprovide an absolute position of +150.0px.\n<br />AAA - 000000000000000000. A y delta value of 0.\n\nA tiny API method \"p\" also exists.",
            "itemtype": "method",
            "name": "decodePath",
            "params": [
                {
                    "name": "str",
                    "description": "The path string to decode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1096,
            "description": "Stores all graphics commands so they won't be executed in future draws. Calling store() a second time adds to\nthe existing store. This also affects `drawAsPath()`.\n\nThis is useful in cases where you are creating vector graphics in an iterative manner (ex. generative art), so\nthat only new graphics need to be drawn (which can provide huge performance benefits), but you wish to retain all\nof the vector instructions for later use (ex. scaling, modifying, or exporting).\n\nNote that calling store() will force the active path (if any) to be ended in a manner similar to changing\nthe fill or stroke.\n\nFor example, consider a application where the user draws lines with the mouse. As each line segment (or collection of\nsegments) are added to a Shape, it can be rasterized using {{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}},\nand then stored, so that it can be redrawn at a different scale when the application is resized, or exported to SVG.\n\n\t// set up cache:\n\tmyShape.cache(0,0,500,500,scale);\n\n\t// when the user drags, draw a new line:\n\tmyShape.graphics.moveTo(oldX,oldY).lineTo(newX,newY);\n\t// then draw it into the existing cache:\n\tmyShape.updateCache(\"source-over\");\n\t// store the new line, so it isn't redrawn next time:\n\tmyShape.store();\n\n\t// then, when the window resizes, we can re-render at a different scale:\n\t// first, unstore all our lines:\n\tmyShape.unstore();\n\t// then cache using the new scale:\n\tmyShape.cache(0,0,500,500,newScale);\n\t// finally, store the existing commands again:\n\tmyShape.store();",
            "itemtype": "method",
            "name": "store",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1139,
            "description": "Unstores any graphics commands that were previously stored using {{#crossLink \"Graphics/store\"}}{{/crossLink}}\nso that they will be executed in subsequent draw calls.",
            "itemtype": "method",
            "name": "unstore",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1152,
            "description": "Returns a clone of this Graphics instance. Note that the individual command objects are not cloned.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current Graphics instance.",
                "type": "Graphics"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1173,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1184,
            "description": "Shortcut to moveTo.",
            "itemtype": "method",
            "name": "mt",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate the drawing point should move to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate the drawing point should move to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls).",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1195,
            "description": "Shortcut to lineTo.",
            "itemtype": "method",
            "name": "lt",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinate the drawing point should draw to.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate the drawing point should draw to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1206,
            "description": "Shortcut to arcTo.",
            "itemtype": "method",
            "name": "at",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1220,
            "description": "Shortcut to bezierCurveTo.",
            "itemtype": "method",
            "name": "bt",
            "params": [
                {
                    "name": "cp1x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp1y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp2x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cp2y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1235,
            "description": "Shortcut to quadraticCurveTo / curveTo.",
            "itemtype": "method",
            "name": "qt",
            "params": [
                {
                    "name": "cpx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cpy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1247,
            "description": "Shortcut to arc.",
            "itemtype": "method",
            "name": "a",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "startAngle",
                    "description": "Measured in radians.",
                    "type": "Number"
                },
                {
                    "name": "endAngle",
                    "description": "Measured in radians.",
                    "type": "Number"
                },
                {
                    "name": "anticlockwise",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "access": "protected",
            "tagname": "",
            "chainable": 1,
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1262,
            "description": "Shortcut to rect.",
            "itemtype": "method",
            "name": "r",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the rectangle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1275,
            "description": "Shortcut to closePath.",
            "itemtype": "method",
            "name": "cp",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1284,
            "description": "Shortcut to clear.",
            "itemtype": "method",
            "name": "c",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1293,
            "description": "Shortcut to beginFill.",
            "itemtype": "method",
            "name": "f",
            "params": [
                {
                    "name": "color",
                    "description": "A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\nnull will result in no fill.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1304,
            "description": "Shortcut to beginLinearGradientFill.",
            "itemtype": "method",
            "name": "lf",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\ndrawing from red to blue.",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\nthe first color to 10% then interpolating to the second color at 90%.",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1321,
            "description": "Shortcut to beginRadialGradientFill.",
            "itemtype": "method",
            "name": "rf",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\na gradient drawing from red to blue.",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1,\n0.9] would draw the first color to 10% then interpolating to the second color at 90%.",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r0",
                    "description": "Radius of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r1",
                    "description": "Radius of the outer circle that defines the gradient.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1340,
            "description": "Shortcut to beginBitmapFill.",
            "itemtype": "method",
            "name": "bf",
            "params": [
                {
                    "name": "image",
                    "description": "The Image, Canvas, or Video object to use\nas the pattern.",
                    "type": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "repetition",
                    "description": "Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n\"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n\"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".",
                    "type": "String"
                },
                {
                    "name": "matrix",
                    "description": "Optional. Specifies a transformation matrix for the bitmap fill. This transformation\nwill be applied relative to the parent transform.",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1356,
            "description": "Shortcut to endFill.",
            "itemtype": "method",
            "name": "ef",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1365,
            "description": "Shortcut to setStrokeStyle.",
            "itemtype": "method",
            "name": "ss",
            "params": [
                {
                    "name": "thickness",
                    "description": "The width of the stroke.",
                    "type": "Number"
                },
                {
                    "name": "caps",
                    "description": "Indicates the type of caps to use at the end of lines. One of butt,\nround, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\nthe tiny API.",
                    "type": "String | Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "joints",
                    "description": "Specifies the type of joints that should be used where two lines meet.\nOne of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\nfor use with the tiny API.",
                    "type": "String | Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "miterLimit",
                    "description": "If joints is set to \"miter\", then you can specify a miter limit ratio which\ncontrols at what point a mitered joint will be clipped.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "10"
                },
                {
                    "name": "ignoreScale",
                    "description": "If true, the stroke will be drawn at the specified thickness regardless\nof active transformations.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1385,
            "description": "Shortcut to setStrokeDash.",
            "itemtype": "method",
            "name": "sd",
            "params": [
                {
                    "name": "segments",
                    "description": "An array specifying the dash pattern, alternating between line and gap.\nFor example, [20,10] would create a pattern of 20 pixel lines with 10 pixel gaps between them.\nPassing null or an empty array will clear any existing dash.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "The offset of the dash pattern. For example, you could increment this value to create a \"marching ants\" effect.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1398,
            "description": "Shortcut to beginStroke.",
            "itemtype": "method",
            "name": "s",
            "params": [
                {
                    "name": "color",
                    "description": "A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\nnull will result in no stroke.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1409,
            "description": "Shortcut to beginLinearGradientStroke.",
            "itemtype": "method",
            "name": "ls",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\na gradient drawing from red to blue.",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1,\n0.9] would draw the first color to 10% then interpolating to the second color at 90%.",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "The position of the first point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "The position of the second point defining the line that defines the gradient direction and size.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1426,
            "description": "Shortcut to beginRadialGradientStroke.",
            "itemtype": "method",
            "name": "rs",
            "params": [
                {
                    "name": "colors",
                    "description": "An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\na gradient drawing from red to blue.",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "An array of gradient positions which correspond to the colors. For example, [0.1,\n0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\nto 100%.",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "Center position of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r0",
                    "description": "Radius of the inner circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "Center position of the outer circle that defines the gradient.",
                    "type": "Number"
                },
                {
                    "name": "r1",
                    "description": "Radius of the outer circle that defines the gradient.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1446,
            "description": "Shortcut to beginBitmapStroke.",
            "itemtype": "method",
            "name": "bs",
            "params": [
                {
                    "name": "image",
                    "description": "The Image, Canvas, or Video object to use\nas the pattern.",
                    "type": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "repetition",
                    "description": "Optional. Indicates whether to repeat the image in the fill area. One of\n\"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".",
                    "type": "String",
                    "optional": true,
                    "optdefault": "repeat"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1459,
            "description": "Shortcut to endStroke.",
            "itemtype": "method",
            "name": "es",
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1468,
            "description": "Shortcut to drawRect.",
            "itemtype": "method",
            "name": "dr",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the rectangle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1481,
            "description": "Shortcut to drawRoundRect.",
            "itemtype": "method",
            "name": "rr",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Corner radius.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1495,
            "description": "Shortcut to drawRoundRectComplex.",
            "itemtype": "method",
            "name": "rc",
            "params": [
                {
                    "name": "x",
                    "description": "The horizontal coordinate to draw the round rect.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The vertical coordinate to draw the round rect.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "The width of the round rect.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The height of the round rect.",
                    "type": "Number"
                },
                {
                    "name": "radiusTL",
                    "description": "Top left corner radius.",
                    "type": "Number"
                },
                {
                    "name": "radiusTR",
                    "description": "Top right corner radius.",
                    "type": "Number"
                },
                {
                    "name": "radiusBR",
                    "description": "Bottom right corner radius.",
                    "type": "Number"
                },
                {
                    "name": "radiusBL",
                    "description": "Bottom left corner radius.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1512,
            "description": "Shortcut to drawCircle.",
            "itemtype": "method",
            "name": "dc",
            "params": [
                {
                    "name": "x",
                    "description": "x coordinate center point of circle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y coordinate center point of circle.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "Radius of circle.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1524,
            "description": "Shortcut to drawEllipse.",
            "itemtype": "method",
            "name": "de",
            "params": [
                {
                    "name": "x",
                    "description": "The left coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\nwhich draws from center.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The top coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\nwhich draws from the center.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this\nnumber.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1540,
            "description": "Shortcut to drawPolyStar.",
            "itemtype": "method",
            "name": "dp",
            "params": [
                {
                    "name": "x",
                    "description": "Position of the center of the shape.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Position of the center of the shape.",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "The outer radius of the shape.",
                    "type": "Number"
                },
                {
                    "name": "sides",
                    "description": "The number of points on the star or sides on the polygon.",
                    "type": "Number"
                },
                {
                    "name": "pointSize",
                    "description": "The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\npolygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.",
                    "type": "Number"
                },
                {
                    "name": "angle",
                    "description": "The angle of the first point / corner. For example a value of 0 will draw the first point\ndirectly to the right of the center.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1557,
            "description": "Shortcut to decodePath.",
            "itemtype": "method",
            "name": "p",
            "params": [
                {
                    "name": "str",
                    "description": "The path string to decode.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The Graphics instance the method is called on (useful for chaining calls.)",
                "type": "Graphics"
            },
            "chainable": 1,
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1569,
            "itemtype": "method",
            "name": "_updateInstructions",
            "params": [
                {
                    "name": "commit",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1608,
            "itemtype": "method",
            "name": "_setFill",
            "params": [
                {
                    "name": "fill",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1619,
            "itemtype": "method",
            "name": "_setStroke",
            "params": [
                {
                    "name": "stroke",
                    "description": ""
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Graphics",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1633,
            "class": "Graphics",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1643,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Graphics.LineTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1647,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Graphics.LineTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1651,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.LineTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1667,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Graphics.MoveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1671,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Graphics.MoveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1675,
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.MoveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1694,
            "itemtype": "property",
            "name": "x1",
            "type": "Number",
            "class": "Graphics.ArcTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1698,
            "itemtype": "property",
            "name": "y1",
            "type": "Number",
            "class": "Graphics.ArcTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1702,
            "itemtype": "property",
            "name": "x2",
            "type": "Number",
            "class": "Graphics.ArcTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1706,
            "itemtype": "property",
            "name": "y2",
            "type": "Number",
            "class": "Graphics.ArcTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1710,
            "itemtype": "property",
            "name": "radius",
            "type": "Number",
            "class": "Graphics.ArcTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1714,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.ArcTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1736,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Graphics.Arc",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1740,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Graphics.Arc",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1744,
            "itemtype": "property",
            "name": "radius",
            "type": "Number",
            "class": "Graphics.Arc",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1748,
            "itemtype": "property",
            "name": "startAngle",
            "type": "Number",
            "class": "Graphics.Arc",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1752,
            "itemtype": "property",
            "name": "endAngle",
            "type": "Number",
            "class": "Graphics.Arc",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1756,
            "itemtype": "property",
            "name": "anticlockwise",
            "type": "Number",
            "class": "Graphics.Arc",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1760,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.Arc",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1781,
            "itemtype": "property",
            "name": "cpx",
            "type": "Number",
            "class": "Graphics.QuadraticCurveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1785,
            "itemtype": "property",
            "name": "cpy",
            "type": "Number",
            "class": "Graphics.QuadraticCurveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1789,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Graphics.QuadraticCurveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1793,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Graphics.QuadraticCurveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1797,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.QuadraticCurveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1818,
            "itemtype": "property",
            "name": "cp1x",
            "type": "Number",
            "class": "Graphics.BezierCurveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1822,
            "itemtype": "property",
            "name": "cp1y",
            "type": "Number",
            "class": "Graphics.BezierCurveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1826,
            "itemtype": "property",
            "name": "cp2x",
            "type": "Number",
            "class": "Graphics.BezierCurveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1830,
            "itemtype": "property",
            "name": "cp2y",
            "type": "Number",
            "class": "Graphics.BezierCurveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1834,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Graphics.BezierCurveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1838,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Graphics.BezierCurveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1842,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.BezierCurveTo",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1862,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Graphics.Rect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1866,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Graphics.Rect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1870,
            "itemtype": "property",
            "name": "w",
            "type": "Number",
            "class": "Graphics.Rect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1874,
            "itemtype": "property",
            "name": "h",
            "type": "Number",
            "class": "Graphics.Rect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1878,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.Rect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1893,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.ClosePath",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1906,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.BeginPath",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1921,
            "description": "A valid Context2D fillStyle.",
            "itemtype": "property",
            "name": "style",
            "type": "Object",
            "class": "Graphics.Fill",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1926,
            "itemtype": "property",
            "name": "matrix",
            "type": "Matrix2D",
            "class": "Graphics.Fill",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1930,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.Fill",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1947,
            "description": "Creates a linear gradient style and assigns it to {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\nSee {{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} for more information.",
            "itemtype": "method",
            "name": "linearGradient",
            "params": [
                {
                    "name": "colors",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns this Fill object for chaining or assignment.",
                "type": "Fill"
            },
            "class": "Graphics.Fill",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1966,
            "description": "Creates a radial gradient style and assigns it to {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\nSee {{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} for more information.",
            "itemtype": "method",
            "name": "radialGradient",
            "params": [
                {
                    "name": "colors",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "r0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "r1",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns this Fill object for chaining or assignment.",
                "type": "Fill"
            },
            "class": "Graphics.Fill",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 1986,
            "description": "Creates a bitmap fill style and assigns it to the {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\nSee {{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} for more information.",
            "itemtype": "method",
            "name": "bitmap",
            "params": [
                {
                    "name": "image",
                    "description": "Must be loaded prior to creating a bitmap fill, or the fill will be empty.",
                    "type": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
                },
                {
                    "name": "repetition",
                    "description": "One of: repeat, repeat-x, repeat-y, or no-repeat.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns this Fill object for chaining or assignment.",
                "type": "Fill"
            },
            "class": "Graphics.Fill",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2010,
            "description": "A valid Context2D strokeStyle.",
            "itemtype": "property",
            "name": "style",
            "type": "Object",
            "class": "Graphics.Stroke",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2015,
            "itemtype": "property",
            "name": "ignoreScale",
            "type": "Boolean",
            "class": "Graphics.Stroke",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2019,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.Stroke",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2035,
            "description": "Creates a linear gradient style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\nSee {{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} for more information.",
            "itemtype": "method",
            "name": "linearGradient",
            "params": [
                {
                    "name": "colors",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns this Stroke object for chaining or assignment.",
                "type": "Fill"
            },
            "class": "Graphics.Stroke",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2048,
            "description": "Creates a radial gradient style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\nSee {{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} for more information.",
            "itemtype": "method",
            "name": "radialGradient",
            "params": [
                {
                    "name": "colors",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ratios",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "x0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "r0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "r1",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns this Stroke object for chaining or assignment.",
                "type": "Fill"
            },
            "class": "Graphics.Stroke",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2063,
            "description": "Creates a bitmap fill style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\nSee {{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} for more information.",
            "itemtype": "method",
            "name": "bitmap",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "HTMLImageElement"
                },
                {
                    "name": "repetition",
                    "description": "One of: repeat, repeat-x, repeat-y, or no-repeat.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns this Stroke object for chaining or assignment.",
                "type": "Fill"
            },
            "class": "Graphics.Stroke",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2084,
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "Graphics.StrokeStyle",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2088,
            "description": "One of: butt, round, square",
            "itemtype": "property",
            "name": "caps",
            "type": "String",
            "class": "Graphics.StrokeStyle",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2093,
            "description": "One of: round, bevel, miter",
            "itemtype": "property",
            "name": "joints",
            "type": "String",
            "class": "Graphics.StrokeStyle",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2098,
            "itemtype": "property",
            "name": "miterLimit",
            "type": "Number",
            "class": "Graphics.StrokeStyle",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2102,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.StrokeStyle",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2130,
            "itemtype": "property",
            "name": "segments",
            "type": "Array",
            "class": "Graphics.StrokeDash",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2134,
            "itemtype": "property",
            "name": "offset",
            "type": "Number",
            "class": "Graphics.StrokeDash",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2138,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.StrokeDash",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2152,
            "description": "The default value for segments (ie. no dash).",
            "itemtype": "property",
            "name": "EMPTY_SEGMENTS",
            "static": 1,
            "final": 1,
            "readonly": "",
            "access": "protected",
            "tagname": "",
            "type": "{Array}",
            "class": "Graphics.StrokeDash",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2176,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Graphics.RoundRect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2180,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Graphics.RoundRect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2184,
            "itemtype": "property",
            "name": "w",
            "type": "Number",
            "class": "Graphics.RoundRect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2188,
            "itemtype": "property",
            "name": "h",
            "type": "Number",
            "class": "Graphics.RoundRect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2192,
            "itemtype": "property",
            "name": "radiusTL",
            "type": "Number",
            "class": "Graphics.RoundRect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2196,
            "itemtype": "property",
            "name": "radiusTR",
            "type": "Number",
            "class": "Graphics.RoundRect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2200,
            "itemtype": "property",
            "name": "radiusBR",
            "type": "Number",
            "class": "Graphics.RoundRect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2204,
            "itemtype": "property",
            "name": "radiusBL",
            "type": "Number",
            "class": "Graphics.RoundRect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2208,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.RoundRect",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2252,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Graphics.Circle",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2256,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Graphics.Circle",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2260,
            "itemtype": "property",
            "name": "radius",
            "type": "Number",
            "class": "Graphics.Circle",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2264,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.Circle",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2283,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Graphics.Ellipse",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2287,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Graphics.Ellipse",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2291,
            "itemtype": "property",
            "name": "w",
            "type": "Number",
            "class": "Graphics.Ellipse",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2295,
            "itemtype": "property",
            "name": "h",
            "type": "Number",
            "class": "Graphics.Ellipse",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2299,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.Ellipse",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2337,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Graphics.PolyStar",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2341,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Graphics.PolyStar",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2345,
            "itemtype": "property",
            "name": "radius",
            "type": "Number",
            "class": "Graphics.PolyStar",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2349,
            "itemtype": "property",
            "name": "sides",
            "type": "Number",
            "class": "Graphics.PolyStar",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2353,
            "itemtype": "property",
            "name": "pointSize",
            "type": "Number",
            "class": "Graphics.PolyStar",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2357,
            "itemtype": "property",
            "name": "angle",
            "type": "Number",
            "class": "Graphics.PolyStar",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/Graphics.js",
            "line": 2361,
            "description": "Execute the Graphics command in the provided Canvas context.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Graphics.PolyStar",
            "module": "EaselJS",
            "namespace": "Graphics"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 100,
            "description": "Controls how this MovieClip advances its time. Must be one of 0 (INDEPENDENT), 1 (SINGLE_FRAME), or 2 (SYNCHED).\nSee each constant for a description of the behaviour.",
            "itemtype": "property",
            "name": "mode",
            "type": "String",
            "default": "null",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 109,
            "description": "Specifies what the first frame to play in this movieclip, or the only frame to display if mode is SINGLE_FRAME.",
            "itemtype": "property",
            "name": "startPosition",
            "type": "Number",
            "default": "0",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 117,
            "description": "Indicates whether this MovieClip should loop when it reaches the end of its timeline.",
            "itemtype": "property",
            "name": "loop",
            "type": "Boolean",
            "default": "true",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 125,
            "description": "The current frame of the movieclip.",
            "itemtype": "property",
            "name": "currentFrame",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 134,
            "description": "The TweenJS Timeline that is associated with this MovieClip. This is created automatically when the MovieClip\ninstance is initialized. Animations are created by adding <a href=\"http://tweenjs.com\">TweenJS</a> Tween\ninstances to the timeline.\n\n<h4>Example</h4>\n\n     var tween = createjs.Tween.get(target).to({x:0}).to({x:100}, 30);\n     var mc = new createjs.MovieClip();\n     mc.timeline.addTween(tween);\n\nElements can be added and removed from the timeline by toggling an \"_off\" property\nusing the <code>tweenInstance.to()</code> method. Note that using <code>Tween.set</code> is not recommended to\ncreate MovieClip animations. The following example will toggle the target off on frame 0, and then back on for\nframe 1. You can use the \"visible\" property to achieve the same effect.\n\n     var tween = createjs.Tween.get(target).to({_off:false})\n         .wait(1).to({_off:true})\n         .wait(1).to({_off:false});",
            "itemtype": "property",
            "name": "timeline",
            "type": "Timeline",
            "default": "null",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 160,
            "description": "If true, the MovieClip's position will not advance when ticked.",
            "itemtype": "property",
            "name": "paused",
            "type": "Boolean",
            "default": "false",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 168,
            "description": "If true, actions in this MovieClip's tweens will be run when the playhead advances.",
            "itemtype": "property",
            "name": "actionsEnabled",
            "type": "Boolean",
            "default": "true",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 176,
            "description": "If true, the MovieClip will automatically be reset to its first frame whenever the timeline adds\nit back onto the display list. This only applies to MovieClip instances with mode=INDEPENDENT.\n<br><br>\nFor example, if you had a character animation with a \"body\" child MovieClip instance\nwith different costumes on each frame, you could set body.autoReset = false, so that\nyou can manually change the frame it is on, without worrying that it will be reset\nautomatically.",
            "itemtype": "property",
            "name": "autoReset",
            "type": "Boolean",
            "default": "true",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 190,
            "description": "An array of bounds for each frame in the MovieClip. This is mainly intended for tool output.",
            "itemtype": "property",
            "name": "frameBounds",
            "type": "Array",
            "default": "null",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 198,
            "description": "By default MovieClip instances advance one frame per tick. Specifying a framerate for the MovieClip\nwill cause it to advance based on elapsed time between ticks as appropriate to maintain the target\nframerate.\n\nFor example, if a MovieClip with a framerate of 10 is placed on a Stage being updated at 40fps, then the MovieClip will\nadvance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will\nvary slightly between frames.\n\nThis feature is dependent on the tick event object (or an object with an appropriate \"delta\" property) being\npassed into {{#crossLink \"Stage/update\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "framerate",
            "type": "{Number}",
            "default": "null",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 217,
            "itemtype": "property",
            "name": "_synchOffset",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 225,
            "itemtype": "property",
            "name": "_prevPos",
            "type": "Number",
            "default": "-1",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 233,
            "itemtype": "property",
            "name": "_prevPosition",
            "type": "Number",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 241,
            "description": "The time remaining from the previous tick, only applicable when .framerate is set.",
            "itemtype": "property",
            "name": "_t",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 249,
            "description": "List of display objects that are actively being managed by the MovieClip.",
            "itemtype": "property",
            "name": "_managed",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 261,
            "description": "The MovieClip will advance independently of its parent, even if its parent is paused.\nThis is the default mode.",
            "itemtype": "property",
            "name": "INDEPENDENT",
            "static": 1,
            "type": "String",
            "default": "\"independent\"",
            "readonly": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 272,
            "description": "The MovieClip will only display a single frame (as determined by the startPosition property).",
            "itemtype": "property",
            "name": "SINGLE_FRAME",
            "static": 1,
            "type": "String",
            "default": "\"single\"",
            "readonly": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 282,
            "description": "The MovieClip will be advanced only when its parent advances and will be synched to the position of\nthe parent MovieClip.",
            "itemtype": "property",
            "name": "SYNCHED",
            "static": 1,
            "type": "String",
            "default": "\"synched\"",
            "readonly": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 308,
            "description": "Use the {{#crossLink \"MovieClip/labels:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "getLabels",
            "return": {
                "description": "",
                "type": "Array"
            },
            "deprecated": true,
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 318,
            "description": "Use the {{#crossLink \"MovieClip/currentLabel:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "getCurrentLabel",
            "return": {
                "description": "",
                "type": "String"
            },
            "deprecated": true,
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 329,
            "description": "Use the {{#crossLink \"MovieClip/duration:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "getDuration",
            "return": {
                "description": "",
                "type": "Number"
            },
            "access": "protected",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 339,
            "description": "Returns an array of objects with label and position (aka frame) properties, sorted by position.\nShortcut to TweenJS: Timeline.getLabels();",
            "itemtype": "property",
            "name": "labels",
            "type": "{Array}",
            "readonly": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 347,
            "description": "Returns the name of the label on or immediately before the current frame. See TweenJS: Timeline.getCurrentLabel()\nfor more information.",
            "itemtype": "property",
            "name": "currentLabel",
            "type": "{String}",
            "readonly": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 355,
            "description": "Returns the duration of this MovieClip in seconds or ticks. Identical to {{#crossLink \"MovieClip/duration:property\"}}{{/crossLink}}\nand provided for Flash API compatibility.",
            "itemtype": "property",
            "name": "totalFrames",
            "type": "{Number}",
            "readonly": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 363,
            "description": "Returns the duration of this MovieClip in seconds or ticks.",
            "itemtype": "property",
            "name": "duration",
            "type": "{Number}",
            "readonly": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 380,
            "description": "Constructor alias for backwards compatibility. This method will be removed in future versions.\nSubclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "initialize",
            "deprecated": true,
            "deprecationMessage": "in favour of `createjs.promote()`",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 388,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 400,
            "description": "Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 418,
            "description": "Sets paused to false.",
            "itemtype": "method",
            "name": "play",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 426,
            "description": "Sets paused to true.",
            "itemtype": "method",
            "name": "stop",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 434,
            "description": "Advances this movie clip to the specified position or label and sets paused to false.",
            "itemtype": "method",
            "name": "gotoAndPlay",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": "The animation name or frame number to go to.",
                    "type": "String|Number"
                }
            ],
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 444,
            "description": "Advances this movie clip to the specified position or label and sets paused to true.",
            "itemtype": "method",
            "name": "gotoAndStop",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": "The animation or frame name to go to.",
                    "type": "String|Number"
                }
            ],
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 454,
            "description": "Advances the playhead. This occurs automatically each tick by default.",
            "params": [
                {
                    "name": "time",
                    "description": "The amount of time in ms to advance by. Only applicable if framerate is set.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "advance",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 480,
            "description": "MovieClip instances cannot be cloned.",
            "itemtype": "method",
            "name": "clone",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 489,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 500,
            "itemtype": "method",
            "name": "_tick",
            "params": [
                {
                    "name": "evtObj",
                    "description": "An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\nfunction.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 511,
            "itemtype": "method",
            "name": "_goto",
            "params": [
                {
                    "name": "positionOrLabel",
                    "description": "The animation name or frame number to go to.",
                    "type": "String|Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 526,
            "itemtype": "method",
            "name": "_reset",
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 536,
            "itemtype": "method",
            "name": "_updateTimeline",
            "access": "protected",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 586,
            "itemtype": "method",
            "name": "_setState",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "offset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 603,
            "description": "Adds a child to the timeline, and sets it up as a managed child.",
            "itemtype": "method",
            "name": "_addManagedChild",
            "params": [
                {
                    "name": "child",
                    "description": "The child MovieClip to manage",
                    "type": "MovieClip"
                },
                {
                    "name": "offset",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 622,
            "itemtype": "method",
            "name": "_getBounds",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix2D"
                },
                {
                    "name": "ignoreTransform",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Rectangle"
            },
            "access": "protected",
            "tagname": "",
            "class": "MovieClip",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 656,
            "itemtype": "method",
            "name": "priority",
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 662,
            "itemtype": "method",
            "name": "install",
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 670,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "tween",
                    "description": "",
                    "type": "Tween"
                },
                {
                    "name": "prop",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String|Number|Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 681,
            "itemtype": "method",
            "name": "step",
            "access": "private",
            "tagname": "",
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/MovieClip.js",
            "line": 689,
            "itemtype": "method",
            "name": "tween",
            "params": [
                {
                    "name": "tween",
                    "description": "",
                    "type": "Tween"
                },
                {
                    "name": "prop",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String | Number | Boolean"
                },
                {
                    "name": "startValues",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "endValues",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "ratio",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "wait",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "MovieClipPlugin",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 60,
            "description": "The color of the shadow. This can be any valid CSS color value.",
            "itemtype": "property",
            "name": "color",
            "type": "String",
            "default": "null",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 68,
            "itemtype": "property",
            "name": "offsetX",
            "type": "Number",
            "default": "0",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 75,
            "itemtype": "property",
            "name": "offsetY",
            "type": "Number",
            "default": "0",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 82,
            "itemtype": "property",
            "name": "blur",
            "type": "Number",
            "default": "0",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 91,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 106,
            "description": "An identity shadow object (all properties are set to 0).",
            "itemtype": "property",
            "name": "identity",
            "type": "Shadow",
            "static": 1,
            "final": 1,
            "readonly": "",
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 118,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shadow.js",
            "line": 127,
            "description": "Returns a clone of this Shadow instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current Shadow instance.",
                "type": "Shadow"
            },
            "class": "Shadow",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 69,
            "description": "The graphics instance to display.",
            "itemtype": "property",
            "name": "graphics",
            "type": "Graphics",
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 83,
            "description": "Returns true or false indicating whether the Shape would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the Shape would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 95,
            "description": "Draws the Shape into the specified context ignoring its visible, alpha, shadow, and transform. Returns true if\nthe draw was handled (useful for overriding functionality).\n\n<i>NOTE: This method is mainly for internal use, though it may be useful for advanced uses.</i>",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache. For example,\nused for drawing the cache (to prevent it from simply drawing an existing cache back into itself).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 112,
            "description": "Returns a clone of this Shape. Some properties that are specific to this instance's current context are reverted to\ntheir defaults (for example .parent).",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "recursive",
                    "description": "If true, this Shape's {{#crossLink \"Graphics\"}}{{/crossLink}} instance will also be\ncloned. If false, the Graphics instance will be shared with the new Shape.",
                    "type": "Boolean"
                }
            ],
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Shape.js",
            "line": 124,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Shape",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 69,
            "description": "The frame index that will be drawn when draw is called. Note that with some {{#crossLink \"SpriteSheet\"}}{{/crossLink}}\ndefinitions, this will advance non-sequentially. This will always be an integer value.",
            "itemtype": "property",
            "name": "currentFrame",
            "type": "{Number}",
            "default": "0",
            "readonly": "",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 79,
            "description": "Returns the name of the currently playing animation.",
            "itemtype": "property",
            "name": "currentAnimation",
            "type": "{String}",
            "final": 1,
            "readonly": "",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 88,
            "description": "Prevents the animation from advancing each tick automatically. For example, you could create a sprite\nsheet of icons, set paused to true, and display the appropriate icon by setting <code>currentFrame</code>.",
            "itemtype": "property",
            "name": "paused",
            "type": "{Boolean}",
            "default": "false",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 97,
            "description": "The SpriteSheet instance to play back. This includes the source image, frame dimensions, and frame\ndata. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.",
            "itemtype": "property",
            "name": "spriteSheet",
            "type": "{SpriteSheet}",
            "readonly": "",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 106,
            "description": "Specifies the current frame index within the currently playing animation. When playing normally, this will increase\nfrom 0 to n-1, where n is the number of frames in the current animation.\n\nThis could be a non-integer value if\nusing time-based playback (see {{#crossLink \"Sprite/framerate\"}}{{/crossLink}}, or if the animation's speed is\nnot an integer.",
            "itemtype": "property",
            "name": "currentAnimationFrame",
            "type": "{Number}",
            "default": "0",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 119,
            "description": "By default Sprite instances advance one frame per tick. Specifying a framerate for the Sprite (or its related\nSpriteSheet) will cause it to advance based on elapsed time between ticks as appropriate to maintain the target\nframerate.\n\nFor example, if a Sprite with a framerate of 10 is placed on a Stage being updated at 40fps, then the Sprite will\nadvance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will\nvary slightly between frames.\n\nThis feature is dependent on the tick event object (or an object with an appropriate \"delta\" property) being\npassed into {{#crossLink \"Stage/update\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "framerate",
            "type": "{Number}",
            "default": "0",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 138,
            "description": "Current animation object.",
            "itemtype": "property",
            "name": "_animation",
            "access": "protected",
            "tagname": "",
            "type": "{Object}",
            "default": "null",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 147,
            "description": "Current frame index.",
            "itemtype": "property",
            "name": "_currentFrame",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "null",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 156,
            "description": "Skips the next auto advance. Used by gotoAndPlay to avoid immediately jumping to the next frame",
            "itemtype": "property",
            "name": "_skipAdvance",
            "access": "protected",
            "tagname": "",
            "type": "{Boolean}",
            "default": "false",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 170,
            "description": "Constructor alias for backwards compatibility. This method will be removed in future versions.\nSubclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "initialize",
            "deprecated": true,
            "deprecationMessage": "in favour of `createjs.promote()`",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 180,
            "description": "Dispatched when an animation reaches its ends.",
            "itemtype": "event",
            "name": "animationend",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "The name of the animation that just ended.",
                    "type": "String"
                },
                {
                    "name": "next",
                    "description": "The name of the next animation that will be played, or null. This will be the same as name if the animation is looping.",
                    "type": "String"
                }
            ],
            "since": "0.6.0",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 190,
            "description": "Dispatched any time the current frame changes. For example, this could be due to automatic advancement on a tick,\nor calling gotoAndPlay() or gotoAndStop().",
            "itemtype": "event",
            "name": "change",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 200,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Boolean indicating whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 212,
            "description": "Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 235,
            "description": "Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\nYou should not cache Sprite instances as it can degrade performance.",
            "itemtype": "method",
            "name": "cache",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 241,
            "description": "Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\nYou should not cache Sprite instances as it can degrade performance.",
            "itemtype": "method",
            "name": "updateCache",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 247,
            "description": "Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\nYou should not cache Sprite instances as it can degrade performance.",
            "itemtype": "method",
            "name": "uncache",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 253,
            "description": "Play (unpause) the current animation. The Sprite will be paused if either {{#crossLink \"Sprite/stop\"}}{{/crossLink}}\nor {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} is called. Single frame animations will remain\nunchanged.",
            "itemtype": "method",
            "name": "play",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 263,
            "description": "Stop playing a running animation. The Sprite will be playing if {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}}\nis called. Note that calling {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}} or {{#crossLink \"Sprite/play\"}}{{/crossLink}}\nwill resume playback.",
            "itemtype": "method",
            "name": "stop",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 273,
            "description": "Sets paused to false and plays the specified animation name, named frame, or frame number.",
            "itemtype": "method",
            "name": "gotoAndPlay",
            "params": [
                {
                    "name": "frameOrAnimation",
                    "description": "The frame number or animation name that the playhead should move to\nand begin playing.",
                    "type": "String|Number"
                }
            ],
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 285,
            "description": "Sets paused to true and seeks to the specified animation name, named frame, or frame number.",
            "itemtype": "method",
            "name": "gotoAndStop",
            "params": [
                {
                    "name": "frameOrAnimation",
                    "description": "The frame number or animation name that the playhead should move to\nand stop.",
                    "type": "String|Number"
                }
            ],
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 296,
            "description": "Advances the playhead. This occurs automatically each tick by default.",
            "params": [
                {
                    "name": "time",
                    "description": "The amount of time in ms to advance by. Only applicable if framerate is set on the Sprite\nor its SpriteSheet.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "advance",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 308,
            "description": "Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the current frame relative to\nthe origin. For example, a 90 x 70 frame with <code>regX=50</code> and <code>regY=40</code> would return a\nrectangle with [x=-50, y=-40, width=90, height=70]. This ignores transformations on the display object.\n\nAlso see the SpriteSheet {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}} method.",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "A Rectangle instance. Returns null if the frame does not exist, or the image is not fully\nloaded.",
                "type": "Rectangle"
            },
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 323,
            "description": "Returns a clone of the Sprite instance. Note that the same SpriteSheet is shared between cloned\ninstances.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Sprite instance.",
                "type": "Sprite"
            },
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 333,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 343,
            "itemtype": "method",
            "name": "_cloneProps",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "o",
                "type": "Sprite"
            },
            "access": "protected",
            "tagname": "",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 363,
            "description": "Advances the <code>currentFrame</code> if paused is not true. This is called automatically when the {{#crossLink \"Stage\"}}{{/crossLink}}\nticks.",
            "params": [
                {
                    "name": "evtObj",
                    "description": "An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_tick",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 379,
            "description": "Normalizes the current frame, advancing animations and dispatching callbacks as appropriate.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_normalizeFrame",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 430,
            "description": "Dispatches the \"animationend\" event. Returns true if a handler changed the animation (ex. calling {{#crossLink \"Sprite/stop\"}}{{/crossLink}},\n{{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}}, etc.)",
            "itemtype": "property",
            "name": "_dispatchAnimationEnd",
            "access": "private",
            "tagname": "",
            "type": "{Function}",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Sprite.js",
            "line": 452,
            "description": "Moves the playhead to the specified frame number or animation.",
            "itemtype": "method",
            "name": "_goto",
            "params": [
                {
                    "name": "frameOrAnimation",
                    "description": "The frame number or animation that the playhead should move to.",
                    "type": "String|Number"
                },
                {
                    "name": "frame",
                    "description": "The frame of the animation to go to. Defaults to 0.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Sprite",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteContainer.js",
            "line": 69,
            "description": "The SpriteSheet that this container enforces use of.",
            "itemtype": "property",
            "name": "spriteSheet",
            "type": "{SpriteSheet}",
            "readonly": "",
            "class": "SpriteContainer",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteContainer.js",
            "line": 79,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "SpriteContainer",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteContainer.js",
            "line": 94,
            "description": "Adds a child to the top of the display list.\nOnly children of type SpriteContainer, Sprite, Bitmap, BitmapText, or DOMElement are allowed.\nThe child must have the same spritesheet as this container (unless it's a DOMElement).\nIf a spritesheet hasn't been defined, this container uses this child's spritesheet.\n\n<h4>Example</h4>\n     container.addChild(bitmapInstance);\n\n You can also add multiple children at once:\n\n     container.addChild(bitmapInstance, shapeInstance, textInstance);",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "The display object to add.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "The child that was added, or the last child if multiple children were added.",
                "type": "DisplayObject"
            },
            "class": "SpriteContainer",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteContainer.js",
            "line": 120,
            "description": "Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and\nsetting its parent to this Container.\nOnly children of type SpriteContainer, Sprite, Bitmap, BitmapText, or DOMElement are allowed.\nThe child must have the same spritesheet as this container (unless it's a DOMElement).\nIf a spritesheet hasn't been defined, this container uses this child's spritesheet.\n\n<h4>Example</h4>\n     addChildAt(child1, index);\n\nYou can also add multiple children, such as:\n\n     addChildAt(child1, child2, ..., index);\n\nThe index must be between 0 and numChildren. For example, to add myShape under otherShape in the display list,\nyou could use:\n\n     container.addChildAt(myShape, container.getChildIndex(otherShape));\n\nThis would also bump otherShape's index up by one. Fails silently if the index is out of range.",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "The display object to add.",
                    "type": "DisplayObject"
                },
                {
                    "name": "index",
                    "description": "The index to add the child at.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the last child that was added, or the last child if multiple children were added.",
                "type": "DisplayObject"
            },
            "class": "SpriteContainer",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteContainer.js",
            "line": 174,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "SpriteContainer",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 214,
            "description": "Indicates whether all images are finished loading.",
            "itemtype": "property",
            "name": "complete",
            "type": "Boolean",
            "readonly": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 222,
            "description": "Specifies the framerate to use by default for Sprite instances using the SpriteSheet. See the Sprite class\n{{#crossLink \"Sprite/framerate:property\"}}{{/crossLink}} for more information.",
            "itemtype": "property",
            "name": "framerate",
            "type": "Number",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 232,
            "itemtype": "property",
            "name": "_animations",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 239,
            "itemtype": "property",
            "name": "_frames",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 246,
            "itemtype": "property",
            "name": "_images",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 253,
            "itemtype": "property",
            "name": "_data",
            "access": "protected",
            "tagname": "",
            "type": "Object",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 260,
            "itemtype": "property",
            "name": "_loadCount",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 268,
            "itemtype": "property",
            "name": "_frameHeight",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 275,
            "itemtype": "property",
            "name": "_frameWidth",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 282,
            "itemtype": "property",
            "name": "_numFrames",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 289,
            "itemtype": "property",
            "name": "_regX",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 296,
            "itemtype": "property",
            "name": "_regY",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 303,
            "itemtype": "property",
            "name": "_spacing",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 310,
            "itemtype": "property",
            "name": "_margin",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 327,
            "description": "Dispatched when all images are loaded.  Note that this only fires if the images\nwere not fully loaded when the sprite sheet was initialized. You should check the complete property\nto prior to adding a listener. Ex.\n\n\tvar sheet = new createjs.SpriteSheet(data);\n\tif (!sheet.complete) {\n\t\t// not preloaded, listen for the complete event:\n\t\tsheet.addEventListener(\"complete\", handler);\n\t}",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.6.0",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 344,
            "description": "Dispatched when getFrame is called with a valid frame index. This is primarily intended for use by {{#crossLink \"SpriteSheetBuilder\"}}{{/crossLink}}\nwhen doing on-demand rendering.",
            "itemtype": "event",
            "name": "getframe",
            "params": [
                {
                    "name": "index",
                    "description": "The frame index.",
                    "type": "Number"
                },
                {
                    "name": "frame",
                    "description": "The frame object that getFrame will return.",
                    "type": "Object"
                }
            ],
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 352,
            "description": "Dispatched when an image encounters an error. A SpriteSheet will dispatch an error event for each image that\nencounters an error, and will still dispatch a {{#crossLink \"SpriteSheet/complete:event\"}}{{/crossLink}}\nevent once all images are finished processing, even if an error is encountered.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "src",
                    "description": "The source of the image that failed to load.",
                    "type": "String"
                }
            ],
            "since": "0.8.2",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 363,
            "description": "Use the {{#crossLink \"SpriteSheet/animations:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "getAnimations",
            "return": {
                "description": "",
                "type": "Array"
            },
            "deprecated": true,
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 373,
            "description": "Returns an array of all available animation names available on this sprite sheet as strings.",
            "itemtype": "property",
            "name": "animations",
            "type": "{Array}",
            "readonly": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 387,
            "description": "Returns the total number of frames in the specified animation, or in the whole sprite\nsheet if the animation param is omitted. Returns 0 if the spritesheet relies on calculated frame counts, and\nthe images have not been fully loaded.",
            "itemtype": "method",
            "name": "getNumFrames",
            "params": [
                {
                    "name": "animation",
                    "description": "The name of the animation to get a frame count for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The number of frames in the animation, or in the entire sprite sheet if the animation param is omitted.",
                "type": "Number"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 405,
            "description": "Returns an object defining the specified animation. The returned object contains:<UL>\n\t<li>frames: an array of the frame ids in the animation</li>\n\t<li>speed: the playback speed for this animation</li>\n\t<li>name: the name of the animation</li>\n\t<li>next: the default animation to play next. If the animation loops, the name and next property will be the\n\tsame.</li>\n</UL>",
            "itemtype": "method",
            "name": "getAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a generic object with frames, speed, name, and next properties.",
                "type": "Object"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 421,
            "description": "Returns an object specifying the image and source rect of the specified frame. The returned object has:<UL>\n\t<li>an image property holding a reference to the image object in which the frame is found</li>\n\t<li>a rect property containing a Rectangle instance which defines the boundaries for the frame within that\n\timage.</li>\n\t<li> A regX and regY property corresponding to the regX/Y values for the frame.\n</UL>",
            "itemtype": "method",
            "name": "getFrame",
            "params": [
                {
                    "name": "frameIndex",
                    "description": "The index of the frame.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "a generic object with image and rect properties. Returns null if the frame does not exist.",
                "type": "Object"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 438,
            "description": "Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the specified frame relative\nto the origin. For example, a 90 x 70 frame with a regX of 50 and a regY of 40 would return:\n\n\t[x=-50, y=-40, width=90, height=70]",
            "itemtype": "method",
            "name": "getFrameBounds",
            "params": [
                {
                    "name": "frameIndex",
                    "description": "The index of the frame.",
                    "type": "Number"
                },
                {
                    "name": "rectangle",
                    "description": "A Rectangle instance to copy the values into. By default a new instance is created.",
                    "type": "Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "A Rectangle instance. Returns null if the frame does not exist, or the image is not fully loaded.",
                "type": "Rectangle"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 454,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 463,
            "description": "SpriteSheet cannot be cloned. A SpriteSheet can be shared by multiple Sprite instances without cloning it.",
            "itemtype": "method",
            "name": "clone",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 472,
            "itemtype": "method",
            "name": "_parseData",
            "params": [
                {
                    "name": "data",
                    "description": "An object describing the SpriteSheet data.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 559,
            "itemtype": "method",
            "name": "_handleImageLoad",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 571,
            "itemtype": "method",
            "name": "_handleImageError",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteSheet.js",
            "line": 586,
            "itemtype": "method",
            "name": "_calculateFrames",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheet",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 88,
            "description": "Specifies whether or not the canvas is auto-cleared by WebGL. Spec discourages true.\nIf true, the canvas is NOT auto-cleared by WebGL. Value is ignored if `_alphaEnabled` is false.\nUseful if you want to use `autoClear = false`.",
            "itemtype": "property",
            "name": "_preserveDrawingBuffer",
            "access": "protected",
            "tagname": "",
            "type": "{Boolean}",
            "default": "false",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 99,
            "description": "Specifies whether or not the browser's WebGL implementation should try to perform antialiasing.",
            "itemtype": "property",
            "name": "_antialias",
            "access": "protected",
            "tagname": "",
            "type": "{Boolean}",
            "default": "false",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 108,
            "description": "The width of the canvas element.",
            "itemtype": "property",
            "name": "_viewportWidth",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 117,
            "description": "The height of the canvas element.",
            "itemtype": "property",
            "name": "_viewportHeight",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "0",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 126,
            "description": "A 2D projection matrix used to convert WebGL's clipspace into normal pixels.",
            "itemtype": "property",
            "name": "_projectionMatrix",
            "access": "protected",
            "tagname": "",
            "type": "{Float32Array}",
            "default": "null",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 135,
            "description": "The current WebGL canvas context.",
            "itemtype": "property",
            "name": "_webGLContext",
            "access": "protected",
            "tagname": "",
            "type": "{WebGLRenderingContext}",
            "default": "null",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 144,
            "description": "Indicates whether or not an error has been detected when dealing with WebGL.\nIf the is true, the behavior should be to use Canvas 2D rendering instead.",
            "itemtype": "property",
            "name": "_webGLErrorDetected",
            "access": "protected",
            "tagname": "",
            "type": "{Boolean}",
            "default": "false",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 154,
            "description": "The color to use when the WebGL canvas has been cleared.",
            "itemtype": "property",
            "name": "_clearColor",
            "access": "protected",
            "tagname": "",
            "type": "{Object}",
            "default": "null",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 163,
            "description": "The maximum number of textures WebGL can work with per draw call.",
            "itemtype": "property",
            "name": "_maxTexturesPerDraw",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "1",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 172,
            "description": "The maximum total number of boxes points that can be defined per draw call.",
            "itemtype": "property",
            "name": "_maxBoxesPointsPerDraw",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "null",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 181,
            "description": "The maximum number of boxes (sprites) that can be drawn in one draw call.",
            "itemtype": "property",
            "name": "_maxBoxesPerDraw",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "null",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 190,
            "description": "The maximum number of indices that can be drawn in one draw call.",
            "itemtype": "property",
            "name": "_maxIndicesPerDraw",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "null",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 199,
            "description": "The shader program used to draw everything.",
            "itemtype": "property",
            "name": "_shaderProgram",
            "access": "protected",
            "tagname": "",
            "type": "{WebGLProgram}",
            "default": "null",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 208,
            "description": "The vertices data for the current draw call.",
            "itemtype": "property",
            "name": "_vertices",
            "access": "protected",
            "tagname": "",
            "type": "{Float32Array}",
            "default": "null",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 217,
            "description": "The buffer that contains all the vertices data.",
            "itemtype": "property",
            "name": "_verticesBuffer",
            "access": "protected",
            "tagname": "",
            "type": "{WebGLBuffer}",
            "default": "null",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 226,
            "description": "The indices to the vertices defined in this._vertices.",
            "itemtype": "property",
            "name": "_indices",
            "access": "protected",
            "tagname": "",
            "type": "{Uint16Array}",
            "default": "null",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 235,
            "description": "The buffer that contains all the indices data.",
            "itemtype": "property",
            "name": "_indicesBuffer",
            "access": "protected",
            "tagname": "",
            "type": "{WebGLBuffer}",
            "default": "null",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 244,
            "description": "The current box index being defined for drawing.",
            "itemtype": "property",
            "name": "_currentBoxIndex",
            "access": "protected",
            "tagname": "",
            "type": "{Number}",
            "default": "-1",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 253,
            "description": "The current texture that will be used to draw into the GPU.",
            "itemtype": "property",
            "name": "_drawTexture",
            "access": "protected",
            "tagname": "",
            "type": "{WebGLTexture}",
            "default": "null",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 273,
            "description": "The number of properties defined per vertex in p._verticesBuffer.\nx, y, textureU, textureV, alpha",
            "itemtype": "property",
            "name": "NUM_VERTEX_PROPERTIES",
            "static": 1,
            "final": 1,
            "type": "{Number}",
            "readonly": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 284,
            "description": "The number of points in a box...obviously :)",
            "itemtype": "property",
            "name": "POINTS_PER_BOX",
            "static": 1,
            "final": 1,
            "type": "{Number}",
            "readonly": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 294,
            "description": "The number of vertex properties per box.",
            "itemtype": "property",
            "name": "NUM_VERTEX_PROPERTIES_PER_BOX",
            "static": 1,
            "final": 1,
            "type": "{Number}",
            "readonly": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 304,
            "description": "The number of indices needed to define a box using triangles.\n6 indices = 2 triangles = 1 box",
            "itemtype": "property",
            "name": "INDICES_PER_BOX",
            "static": 1,
            "final": 1,
            "type": "{Number}",
            "readonly": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 315,
            "description": "The maximum size WebGL allows for element index numbers: 16 bit unsigned integer",
            "itemtype": "property",
            "name": "MAX_INDEX_SIZE",
            "static": 1,
            "final": 1,
            "type": "{Number}",
            "readonly": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 325,
            "description": "The amount used to increment p._maxBoxesPointsPerDraw when the maximum has been reached.\nIf the maximum size of element index WebGL allows for (SpriteStage.MAX_INDEX_SIZE) was used,\nthe array size for p._vertices would equal 1280kb and p._indices 192kb. But since mobile phones\nwith less memory need to be accounted for, the maximum size is somewhat arbitrarily divided by 4,\nreducing the array sizes to 320kb and 48kb respectively.",
            "itemtype": "property",
            "name": "MAX_BOXES_POINTS_INCREMENT",
            "static": 1,
            "final": 1,
            "type": "{Number}",
            "readonly": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 341,
            "description": "Indicates whether WebGL is being used for rendering. For example, this would be false if WebGL is not\nsupported in the browser.",
            "readonly": "",
            "itemtype": "property",
            "name": "isWebGL",
            "type": "{Boolean}",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 360,
            "description": "Adds a child to the top of the display list.\nOnly children of type SpriteContainer, Sprite, Bitmap, BitmapText, or DOMElement are allowed.\nChildren also MUST have either an image or spriteSheet defined on them (unless it's a DOMElement).\n\n<h4>Example</h4>\n     container.addChild(bitmapInstance);\n\n You can also add multiple children at once:\n\n     container.addChild(bitmapInstance, shapeInstance, textInstance);",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "The display object to add.",
                    "type": "DisplayObject"
                }
            ],
            "return": {
                "description": "The child that was added, or the last child if multiple children were added.",
                "type": "DisplayObject"
            },
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 385,
            "description": "Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and\nsetting its parent to this Container.\nOnly children of type SpriteContainer, Sprite, Bitmap, BitmapText, or DOMElement are allowed.\nChildren also MUST have either an image or spriteSheet defined on them (unless it's a DOMElement).\n\n<h4>Example</h4>\n\n     addChildAt(child1, index);\n\nYou can also add multiple children, such as:\n\n     addChildAt(child1, child2, ..., index);\n\nThe index must be between 0 and numChildren. For example, to add myShape under otherShape in the display list,\nyou could use:\n\n     container.addChildAt(myShape, container.getChildIndex(otherShape));\n\nThis would also bump otherShape's index up by one. Fails silently if the index is out of range.",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "The display object to add.",
                    "type": "DisplayObject"
                },
                {
                    "name": "index",
                    "description": "The index to add the child at.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the last child that was added, or the last child if multiple children were added.",
                "type": "DisplayObject"
            },
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 435,
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 456,
            "description": "Clears the target canvas. Useful if {{#crossLink \"Stage/autoClear:property\"}}{{/crossLink}} is set to `false`.",
            "itemtype": "method",
            "name": "clear",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 474,
            "description": "Draws the stage into the specified context (using WebGL) ignoring its visible, alpha, shadow, and transform.\nIf WebGL is not supported in the browser, it will default to a 2D context.\nReturns true if the draw was handled (useful for overriding functionality).\n\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 495,
            "description": "Update the WebGL viewport. Note that this does NOT update the canvas element's width/height.",
            "itemtype": "method",
            "name": "updateViewport",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 516,
            "description": "Clears an image's texture to free it up for garbage collection.",
            "itemtype": "method",
            "name": "clearImageTexture",
            "params": [
                {
                    "name": "image",
                    "description": "",
                    "type": "HTMLImageElement"
                }
            ],
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 525,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 536,
            "description": "Initializes rendering with WebGL using the current canvas element.",
            "itemtype": "method",
            "name": "_initializeWebGL",
            "access": "protected",
            "tagname": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 547,
            "description": "Sets the WebGL context to use for future draws.",
            "itemtype": "method",
            "name": "_setWebGLContext",
            "return": {
                "description": "The newly created context.",
                "type": "WebGLRenderingContext"
            },
            "access": "protected",
            "tagname": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 566,
            "description": "Sets up the WebGL context for rendering.",
            "itemtype": "method",
            "name": "_initializeWebGLContext",
            "access": "protected",
            "tagname": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 615,
            "description": "Sets the color to use when the WebGL canvas has been cleared.",
            "itemtype": "method",
            "name": "_setClearColor",
            "params": [
                {
                    "name": "r",
                    "description": "A number between 0 and 1.",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "A number between 0 and 1.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "A number between 0 and 1.",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "A number between 0 and 1.",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 635,
            "description": "Creates the shader program that's going to be used to draw everything.",
            "itemtype": "method",
            "name": "_createShaderProgram",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "WebGLRenderingContext"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 700,
            "description": "Creates a shader from the specified string.",
            "itemtype": "method",
            "name": "_createShader",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "WebGLRenderingContext"
                },
                {
                    "name": "type",
                    "description": "The type of shader to create.",
                    "type": "Number"
                },
                {
                    "name": "str",
                    "description": "The definition for the shader.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "WebGLShader"
            },
            "access": "protected",
            "tagname": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 723,
            "description": "Sets up the necessary vertices and indices buffers.",
            "itemtype": "method",
            "name": "_createBuffers",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "WebGLRenderingContext"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 742,
            "description": "Updates the maximum total number of boxes points that can be defined per draw call,\nand updates the buffers with the new array length sizes.",
            "itemtype": "method",
            "name": "_setMaxBoxesPoints",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "WebGLRenderingContext"
                },
                {
                    "name": "value",
                    "description": "The new this._maxBoxesPointsPerDraw value.",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 776,
            "description": "Sets up an image's WebGL texture.",
            "itemtype": "method",
            "name": "_setupImageTexture",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas WebGL context object to draw into.",
                    "type": "WebGLRenderingContext"
                },
                {
                    "name": "image",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "WebGLTexture"
            },
            "access": "protected",
            "tagname": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 801,
            "description": "Draw all the kids into the WebGL context.",
            "itemtype": "method",
            "name": "_drawWebGLKids",
            "params": [
                {
                    "name": "kids",
                    "description": "The list of kids to draw.",
                    "type": "Array"
                },
                {
                    "name": "ctx",
                    "description": "The canvas WebGL context object to draw into.",
                    "type": "WebGLRenderingContext"
                },
                {
                    "name": "parentMVMatrix",
                    "description": "The parent's global transformation matrix.",
                    "type": "Matrix2D"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/SpriteStage.js",
            "line": 931,
            "description": "Draws all the currently defined boxes to the GPU.",
            "itemtype": "method",
            "name": "_drawToGPU",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas WebGL context object to draw into.",
                    "type": "WebGLRenderingContext"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "SpriteStage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 69,
            "description": "Indicates whether the stage should automatically clear the canvas before each render. You can set this to <code>false</code>\nto manually control clearing (for generative art, or when pointing multiple stages at the same canvas for\nexample).\n\n<h4>Example</h4>\n\n     var stage = new createjs.Stage(\"canvasId\");\n     stage.autoClear = false;",
            "itemtype": "property",
            "name": "autoClear",
            "type": "Boolean",
            "default": "true",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 85,
            "description": "The canvas the stage will render to. Multiple stages can share a single canvas, but you must disable autoClear for all but the\nfirst stage that will be ticked (or they will clear each other's render).\n\nWhen changing the canvas property you must disable the events on the old canvas, and enable events on the\nnew canvas or mouse events will not work as expected. For example:\n\n     myStage.enableDOMEvents(false);\n     myStage.canvas = anotherCanvas;\n     myStage.enableDOMEvents(true);",
            "itemtype": "property",
            "name": "canvas",
            "type": "HTMLCanvasElement | Object",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 101,
            "description": "The current mouse X position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\nposition over the canvas, and mouseInBounds will be set to false.",
            "itemtype": "property",
            "name": "mouseX",
            "type": "Number",
            "readonly": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 110,
            "description": "The current mouse Y position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\nposition over the canvas, and mouseInBounds will be set to false.",
            "itemtype": "property",
            "name": "mouseY",
            "type": "Number",
            "readonly": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 119,
            "description": "Specifies the area of the stage to affect when calling update. This can be use to selectively\nre-draw specific regions of the canvas. If null, the whole canvas area is drawn.",
            "itemtype": "property",
            "name": "drawRect",
            "type": "{Rectangle}",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 127,
            "description": "Indicates whether display objects should be rendered on whole pixels. You can set the\n{{#crossLink \"DisplayObject/snapToPixel\"}}{{/crossLink}} property of\ndisplay objects to false to enable/disable this behaviour on a per instance basis.",
            "itemtype": "property",
            "name": "snapToPixelEnabled",
            "type": "Boolean",
            "default": "false",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 137,
            "description": "Indicates whether the mouse is currently within the bounds of the canvas.",
            "itemtype": "property",
            "name": "mouseInBounds",
            "type": "Boolean",
            "default": "false",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 145,
            "description": "If true, tick callbacks will be called on all display objects on the stage prior to rendering to the canvas.",
            "itemtype": "property",
            "name": "tickOnUpdate",
            "type": "Boolean",
            "default": "true",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 153,
            "description": "If true, mouse move events will continue to be called when the mouse leaves the target canvas. See\n{{#crossLink \"Stage/mouseInBounds:property\"}}{{/crossLink}}, and {{#crossLink \"MouseEvent\"}}{{/crossLink}}\nx/y/rawX/rawY.",
            "itemtype": "property",
            "name": "mouseMoveOutside",
            "type": "Boolean",
            "default": "false",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 164,
            "description": "Prevents selection of other elements in the html page if the user clicks and drags, or double clicks on the canvas.\nThis works by calling `preventDefault()` on any mousedown events (or touch equivalent) originating on the canvas.",
            "itemtype": "property",
            "name": "preventSelection",
            "type": "Boolean",
            "default": "true",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 173,
            "description": "The hitArea property is not supported for Stage.",
            "itemtype": "property",
            "name": "hitArea",
            "type": "{DisplayObject}",
            "default": "null",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 182,
            "description": "Holds objects with data for each active pointer id. Each object has the following properties:\nx, y, event, target, overTarget, overX, overY, inBounds, posEvtObj (native event that last updated position)",
            "itemtype": "property",
            "name": "_pointerData",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 191,
            "description": "Number of active pointers.",
            "itemtype": "property",
            "name": "_pointerCount",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 199,
            "description": "The ID of the primary pointer.",
            "itemtype": "property",
            "name": "_primaryPointerID",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 207,
            "itemtype": "property",
            "name": "_mouseOverIntervalID",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 214,
            "itemtype": "property",
            "name": "_nextStage",
            "access": "protected",
            "tagname": "",
            "type": "Stage",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 221,
            "itemtype": "property",
            "name": "_prevStage",
            "access": "protected",
            "tagname": "",
            "type": "Stage",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 234,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 249,
            "description": "Dispatched when the user moves the mouse over the canvas.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "stagemousemove",
            "since": "0.6.0",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 256,
            "description": "Dispatched when the user presses their left mouse button on the canvas. See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\nclass for a listing of event properties.",
            "itemtype": "event",
            "name": "stagemousedown",
            "since": "0.6.0",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 263,
            "description": "Dispatched when the user the user presses somewhere on the stage, then releases the mouse button anywhere that the page can detect it (this varies slightly between browsers).\nYou can use {{#crossLink \"Stage/mouseInBounds:property\"}}{{/crossLink}} to check whether the mouse is currently within the stage bounds.\nSee the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.",
            "itemtype": "event",
            "name": "stagemouseup",
            "since": "0.6.0",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 271,
            "description": "Dispatched when the mouse moves from within the canvas area (mouseInBounds == true) to outside it (mouseInBounds == false).\nThis is currently only dispatched for mouse input (not touch). See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\nclass for a listing of event properties.",
            "itemtype": "event",
            "name": "mouseleave",
            "since": "0.7.0",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 279,
            "description": "Dispatched when the mouse moves into the canvas area (mouseInBounds == false) from outside it (mouseInBounds == true).\nThis is currently only dispatched for mouse input (not touch). See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\nclass for a listing of event properties.",
            "itemtype": "event",
            "name": "mouseenter",
            "since": "0.7.0",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 287,
            "description": "Dispatched each update immediately before the tick event is propagated through the display list.\nYou can call preventDefault on the event object to cancel propagating the tick event.",
            "itemtype": "event",
            "name": "tickstart",
            "since": "0.7.0",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 294,
            "description": "Dispatched each update immediately after the tick event is propagated through the display list. Does not fire if\ntickOnUpdate is false. Precedes the \"drawstart\" event.",
            "itemtype": "event",
            "name": "tickend",
            "since": "0.7.0",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 301,
            "description": "Dispatched each update immediately before the canvas is cleared and the display list is drawn to it.\nYou can call preventDefault on the event object to cancel the draw.",
            "itemtype": "event",
            "name": "drawstart",
            "since": "0.7.0",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 308,
            "description": "Dispatched each update immediately after the display list is drawn to the canvas and the canvas context is restored.",
            "itemtype": "event",
            "name": "drawend",
            "since": "0.7.0",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 316,
            "description": "Specifies a target stage that will have mouse / touch interactions relayed to it after this stage handles them.\nThis can be useful in cases where you have multiple layered canvases and want user interactions\nevents to pass through. For example, this would relay mouse events from topStage to bottomStage:\n\n     topStage.nextStage = bottomStage;\n\nTo disable relaying, set nextStage to null.\n\nMouseOver, MouseOut, RollOver, and RollOut interactions are also passed through using the mouse over settings\nof the top-most stage, but are only processed if the target stage has mouse over interactions enabled.\nConsiderations when using roll over in relay targets:<OL>\n<LI> The top-most (first) stage must have mouse over interactions enabled (via enableMouseOver)</LI>\n<LI> All stages that wish to participate in mouse over interaction must enable them via enableMouseOver</LI>\n<LI> All relay targets will share the frequency value of the top-most stage</LI>\n</OL>\nTo illustrate, in this example the targetStage would process mouse over interactions at 10hz (despite passing\n30 as it's desired frequency):\n\ttopStage.nextStage = targetStage;\n\ttopStage.enableMouseOver(10);\n\ttargetStage.enableMouseOver(30);\n\nIf the target stage's canvas is completely covered by this stage's canvas, you may also want to disable its\nDOM events using:\n\n\ttargetStage.enableDOMEvents(false);",
            "itemtype": "property",
            "name": "nextStage",
            "type": "{Stage}",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 363,
            "description": "Each time the update method is called, the stage will call {{#crossLink \"Stage/tick\"}}{{/crossLink}}\nunless {{#crossLink \"Stage/tickOnUpdate:property\"}}{{/crossLink}} is set to false,\nand then render the display list to the canvas.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "props",
                    "description": "Props object to pass to `tick()`. Should usually be a {{#crossLink \"Ticker\"}}{{/crossLink}} event object, or similar object with a delta property.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 394,
            "description": "Propagates a tick event through the display list. This is automatically called by {{#crossLink \"Stage/update\"}}{{/crossLink}}\nunless {{#crossLink \"Stage/tickOnUpdate:property\"}}{{/crossLink}} is set to false.\n\nIf a props object is passed to `tick()`, then all of its properties will be copied to the event object that is\npropagated to listeners.\n\nSome time-based features in EaselJS (for example {{#crossLink \"Sprite/framerate\"}}{{/crossLink}} require that\na {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}} event object (or equivalent object with a delta property) be\npassed as the `props` parameter to `tick()`. For example:\n\n\tTicker.on(\"tick\", handleTick);\n\tfunction handleTick(evtObj) {\n\t\t// clone the event object from Ticker, and add some custom data to it:\n\t\tvar evt = evtObj.clone().set({greeting:\"hello\", name:\"world\"});\n\t\t\n\t\t// pass it to stage.update():\n\t\tmyStage.update(evt); // subsequently calls tick() with the same param\n\t}\n\t\n\t// ...\n\tmyDisplayObject.on(\"tick\", handleDisplayObjectTick);\n\tfunction handleDisplayObjectTick(evt) {\n\t\tconsole.log(evt.delta); // the delta property from the Ticker tick event object\n\t\tconsole.log(evt.greeting, evt.name); // custom data: \"hello world\"\n\t}",
            "itemtype": "method",
            "name": "tick",
            "params": [
                {
                    "name": "props",
                    "description": "An object with properties that should be copied to the event object. Should usually be a Ticker event object, or similar object with a delta property.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 436,
            "description": "Default event handler that calls the Stage {{#crossLink \"Stage/update\"}}{{/crossLink}} method when a {{#crossLink \"DisplayObject/tick:event\"}}{{/crossLink}}\nevent is received. This allows you to register a Stage instance as a event listener on {{#crossLink \"Ticker\"}}{{/crossLink}}\ndirectly, using:\n\n     Ticker.addEventListener(\"tick\", myStage\");\n\nNote that if you subscribe to ticks using this pattern, then the tick event object will be passed through to\ndisplay object tick handlers, instead of <code>delta</code> and <code>paused</code> parameters.",
            "itemtype": "property",
            "name": "handleEvent",
            "type": "Function",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 452,
            "description": "Clears the target canvas. Useful if {{#crossLink \"Stage/autoClear:property\"}}{{/crossLink}} is set to `false`.",
            "itemtype": "method",
            "name": "clear",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 463,
            "description": "Returns a data url that contains a Base64-encoded image of the contents of the stage. The returned data url can\nbe specified as the src value of an image element.",
            "itemtype": "method",
            "name": "toDataURL",
            "params": [
                {
                    "name": "backgroundColor",
                    "description": "The background color to be used for the generated image. Any valid CSS color\nvalue is allowed. The default value is a transparent background.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "mimeType",
                    "description": "The MIME type of the image format to be create. The default is \"image/png\". If an unknown MIME type\nis passed in, or if the browser does not support the specified MIME type, the default value will be used.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"image/png\""
                }
            ],
            "return": {
                "description": "a Base64 encoded image.",
                "type": "String"
            },
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 495,
            "description": "Enables or disables (by passing a frequency of 0) mouse over ({{#crossLink \"DisplayObject/mouseover:event\"}}{{/crossLink}}\nand {{#crossLink \"DisplayObject/mouseout:event\"}}{{/crossLink}}) and roll over events ({{#crossLink \"DisplayObject/rollover:event\"}}{{/crossLink}}\nand {{#crossLink \"DisplayObject/rollout:event\"}}{{/crossLink}}) for this stage's display list. These events can\nbe expensive to generate, so they are disabled by default. The frequency of the events can be controlled\nindependently of mouse move events via the optional `frequency` parameter.\n\n<h4>Example</h4>\n\n     var stage = new createjs.Stage(\"canvasId\");\n     stage.enableMouseOver(10); // 10 updates per second",
            "itemtype": "method",
            "name": "enableMouseOver",
            "params": [
                {
                    "name": "frequency",
                    "description": "Optional param specifying the maximum number of times per second to broadcast\nmouse over/out events. Set to 0 to disable mouse over events completely. Maximum is 50. A lower frequency is less\nresponsive, but uses less CPU.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "20"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 526,
            "description": "Enables or disables the event listeners that stage adds to DOM elements (window, document and canvas). It is good\npractice to disable events when disposing of a Stage instance, otherwise the stage will continue to receive\nevents from the page.\n\nWhen changing the canvas property you must disable the events on the old canvas, and enable events on the\nnew canvas or mouse events will not work as expected. For example:\n\n     myStage.enableDOMEvents(false);\n     myStage.canvas = anotherCanvas;\n     myStage.enableDOMEvents(true);",
            "itemtype": "method",
            "name": "enableDOMEvents",
            "params": [
                {
                    "name": "enable",
                    "description": "Indicates whether to enable or disable the events. Default is true.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 566,
            "description": "Stage instances cannot be cloned.",
            "itemtype": "method",
            "name": "clone",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 574,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 585,
            "itemtype": "method",
            "name": "_getElementRect",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 613,
            "itemtype": "method",
            "name": "_getPointerData",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 624,
            "itemtype": "method",
            "name": "_handleMouseMove",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 634,
            "itemtype": "method",
            "name": "_handlePointerMove",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                },
                {
                    "name": "pageX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pageY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "owner",
                    "description": "Indicates that the event has already been captured & handled by the indicated stage.",
                    "type": "Stage"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 662,
            "itemtype": "method",
            "name": "_updatePointerPosition",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                },
                {
                    "name": "pageX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pageY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 699,
            "itemtype": "method",
            "name": "_handleMouseUp",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 708,
            "itemtype": "method",
            "name": "_handlePointerUp",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                },
                {
                    "name": "clear",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "owner",
                    "description": "Indicates that the event has already been captured & handled by the indicated stage.",
                    "type": "Stage"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 736,
            "itemtype": "method",
            "name": "_handleMouseDown",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 745,
            "itemtype": "method",
            "name": "_handlePointerDown",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "Event"
                },
                {
                    "name": "pageX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "pageY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "owner",
                    "description": "Indicates that the event has already been captured & handled by the indicated stage.",
                    "type": "Stage"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 768,
            "itemtype": "method",
            "name": "_testMouseOver",
            "params": [
                {
                    "name": "clear",
                    "description": "If true, clears the mouseover / rollover (ie. no target)",
                    "type": "Boolean"
                },
                {
                    "name": "owner",
                    "description": "Indicates that the event has already been captured & handled by the indicated stage.",
                    "type": "Stage"
                },
                {
                    "name": "eventTarget",
                    "description": "The stage that the cursor is actively over.",
                    "type": "Stage"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 837,
            "itemtype": "method",
            "name": "_handleDoubleClick",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "MouseEvent"
                },
                {
                    "name": "owner",
                    "description": "Indicates that the event has already been captured & handled by the indicated stage.",
                    "type": "Stage"
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Stage.js",
            "line": 852,
            "itemtype": "method",
            "name": "_dispatchMouseEvent",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "pointerId",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "o",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "nativeEvent",
                    "description": "",
                    "type": "MouseEvent",
                    "optional": true
                },
                {
                    "name": "relatedTarget",
                    "description": "",
                    "type": "DisplayObject",
                    "optional": true
                }
            ],
            "class": "Stage",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 75,
            "description": "The text to display.",
            "itemtype": "property",
            "name": "text",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 82,
            "description": "The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold 36px Arial\").",
            "itemtype": "property",
            "name": "font",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 89,
            "description": "The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex. \"#F00\"). Default is \"#000\".\nIt will also accept valid canvas fillStyle values.",
            "itemtype": "property",
            "name": "color",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 97,
            "description": "The horizontal text alignment. Any of \"start\", \"end\", \"left\", \"right\", and \"center\". For detailed\ninformation view the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\nwhatwg spec</a>. Default is \"left\".",
            "itemtype": "property",
            "name": "textAlign",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 107,
            "description": "The vertical alignment point on the font. Any of \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", or\n\"bottom\". For detailed information view the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\nwhatwg spec</a>. Default is \"top\".",
            "itemtype": "property",
            "name": "textBaseline",
            "type": "String",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 116,
            "description": "The maximum width to draw the text. If maxWidth is specified (not null), the text will be condensed or\nshrunk to make it fit in this width. For detailed information view the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\nwhatwg spec</a>.",
            "itemtype": "property",
            "name": "maxWidth",
            "type": "Number",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 126,
            "description": "If greater than 0, the text will be drawn as a stroke (outline) of the specified width.",
            "itemtype": "property",
            "name": "outline",
            "type": "Number",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 133,
            "description": "Indicates the line height (vertical distance between baselines) for multi-line text. If null or 0,\nthe value of getMeasuredLineHeight is used.",
            "itemtype": "property",
            "name": "lineHeight",
            "type": "Number",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 141,
            "description": "Indicates the maximum width for a line of text before it is wrapped to multiple lines. If null,\nthe text will not be wrapped.",
            "itemtype": "property",
            "name": "lineWidth",
            "type": "Number",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 156,
            "itemtype": "property",
            "name": "_workingContext",
            "type": "CanvasRenderingContext2D",
            "access": "private",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 166,
            "description": "Lookup table for the ratio to offset bounds x calculations based on the textAlign property.",
            "itemtype": "property",
            "name": "H_OFFSETS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 175,
            "description": "Lookup table for the ratio to offset bounds y calculations based on the textBaseline property.",
            "itemtype": "property",
            "name": "H_OFFSETS",
            "type": "Object",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 186,
            "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "Whether the display object would be visible if drawn to a canvas",
                "type": "Boolean"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 198,
            "description": "Draws the Text into the specified context ignoring its visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas 2D context object to draw into.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "ignoreCache",
                    "description": "Indicates whether the draw operation should ignore any current cache.\nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself).",
                    "type": "Boolean"
                }
            ],
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 219,
            "description": "Returns the measured, untransformed width of the text without wrapping. Use getBounds for a more robust value.",
            "itemtype": "method",
            "name": "getMeasuredWidth",
            "return": {
                "description": "The measured, untransformed width of the text.",
                "type": "Number"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 228,
            "description": "Returns an approximate line height of the text, ignoring the lineHeight property. This is based on the measured\nwidth of a \"M\" character multiplied by 1.2, which provides an approximate line height for most fonts.",
            "itemtype": "method",
            "name": "getMeasuredLineHeight",
            "return": {
                "description": "an approximate line height of the text, ignoring the lineHeight property. This is\nbased on the measured width of a \"M\" character multiplied by 1.2, which approximates em for most fonts.",
                "type": "Number"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 239,
            "description": "Returns the approximate height of multi-line text by multiplying the number of lines against either the\n<code>lineHeight</code> (if specified) or {{#crossLink \"Text/getMeasuredLineHeight\"}}{{/crossLink}}. Note that\nthis operation requires the text flowing logic to run, which has an associated CPU cost.",
            "itemtype": "method",
            "name": "getMeasuredHeight",
            "return": {
                "description": "The approximate height of the untransformed multi-line text.",
                "type": "Number"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 250,
            "description": "Docced in superclass.",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 265,
            "description": "Returns an object with width, height, and lines properties. The width and height are the visual width and height\nof the drawn text. The lines property contains an array of strings, one for\neach line of text that will be drawn, accounting for line breaks and wrapping. These strings have trailing\nwhitespace removed.",
            "itemtype": "method",
            "name": "getMetrics",
            "return": {
                "description": "An object with width, height, and lines properties.",
                "type": "Object"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 280,
            "description": "Returns a clone of the Text instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Text instance.",
                "type": "Text"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 289,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 300,
            "itemtype": "method",
            "name": "_cloneProps",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "Text"
                }
            ],
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "o",
                "type": "Text"
            },
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 317,
            "itemtype": "method",
            "name": "_getWorkingContext",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "return": {
                "description": "",
                "type": "CanvasRenderingContext2D"
            },
            "access": "protected",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 330,
            "description": "Draws multiline text.",
            "itemtype": "method",
            "name": "_drawText",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "o",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "lines",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 392,
            "itemtype": "method",
            "name": "_drawTextLine",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/display/Text.js",
            "line": 406,
            "itemtype": "method",
            "name": "_getMeasuredWidth",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Text",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 64,
            "description": "The normalized x position on the stage. This will always be within the range 0 to stage width.",
            "itemtype": "property",
            "name": "stageX",
            "type": "Number",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 71,
            "description": "The normalized y position on the stage. This will always be within the range 0 to stage height.",
            "itemtype": "property",
            "name": "stageY",
            "type": "Number",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 78,
            "description": "The raw x position relative to the stage. Normally this will be the same as the stageX value, unless\nstage.mouseMoveOutside is true and the pointer is outside of the stage bounds.",
            "itemtype": "property",
            "name": "rawX",
            "type": "Number",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 86,
            "description": "The raw y position relative to the stage. Normally this will be the same as the stageY value, unless\nstage.mouseMoveOutside is true and the pointer is outside of the stage bounds.",
            "itemtype": "property",
            "name": "rawY",
            "type": "Number",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 94,
            "description": "The native MouseEvent generated by the browser. The properties and API for this\nevent may differ between browsers. This property will be null if the\nEaselJS property was not directly generated from a native MouseEvent.",
            "itemtype": "property",
            "name": "nativeEvent",
            "type": "HtmlMouseEvent",
            "default": "null",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 104,
            "description": "The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system\nsupplied id value.",
            "itemtype": "property",
            "name": "pointerID",
            "type": "{Number}",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 112,
            "description": "Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse.\nFor touch pointers, the first pointer in the current stack will be considered the primary pointer.",
            "itemtype": "property",
            "name": "primary",
            "type": "{Boolean}",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 120,
            "description": "The secondary target for the event, if applicable. This is used for mouseout/rollout\nevents to indicate the object that the mouse entered from, mouseover/rollover for the object the mouse exited,\nand stagemousedown/stagemouseup events for the object that was the under the cursor, if any.\n\nOnly valid interaction targets will be returned (ie. objects with mouse listeners or a cursor set).",
            "itemtype": "property",
            "name": "relatedTarget",
            "type": "{DisplayObject}",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 138,
            "description": "Returns the x position of the mouse in the local coordinate system of the current target (ie. the dispatcher).",
            "itemtype": "property",
            "name": "localX",
            "type": "{Number}",
            "readonly": "",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 148,
            "description": "Returns the y position of the mouse in the local coordinate system of the current target (ie. the dispatcher).",
            "itemtype": "property",
            "name": "localY",
            "type": "{Number}",
            "readonly": "",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 158,
            "description": "Indicates whether the event was generated by a touch input (versus a mouse input).",
            "itemtype": "property",
            "name": "isTouch",
            "type": "{Boolean}",
            "readonly": "",
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 179,
            "description": "Returns a clone of the MouseEvent instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the MouseEvent instance.",
                "type": "MouseEvent"
            },
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/events/MouseEvent.js",
            "line": 188,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "MouseEvent",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/AlphaMapFilter.js",
            "line": 74,
            "description": "The greyscale image (or canvas) to use as the alpha value for the result. This should be exactly the same\ndimensions as the target.",
            "itemtype": "property",
            "name": "alphaMap",
            "type": "HTMLImageElement|HTMLCanvasElement",
            "class": "AlphaMapFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/AlphaMapFilter.js",
            "line": 84,
            "itemtype": "property",
            "name": "_alphaMap",
            "access": "protected",
            "tagname": "",
            "type": "HTMLImageElement|HTMLCanvasElement",
            "class": "AlphaMapFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/AlphaMapFilter.js",
            "line": 91,
            "itemtype": "property",
            "name": "_mapData",
            "access": "protected",
            "tagname": "",
            "type": "Uint8ClampedArray",
            "class": "AlphaMapFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/AlphaMapFilter.js",
            "line": 105,
            "class": "AlphaMapFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/AlphaMapFilter.js",
            "line": 113,
            "class": "AlphaMapFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/AlphaMapFilter.js",
            "line": 120,
            "class": "AlphaMapFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/AlphaMapFilter.js",
            "line": 133,
            "itemtype": "method",
            "name": "_prepAlphaMap",
            "access": "protected",
            "tagname": "",
            "class": "AlphaMapFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/AlphaMaskFilter.js",
            "line": 73,
            "description": "The image (or canvas) to use as the mask.",
            "itemtype": "property",
            "name": "mask",
            "type": "HTMLImageElement|HTMLCanvasElement",
            "class": "AlphaMaskFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/AlphaMaskFilter.js",
            "line": 87,
            "description": "Applies the filter to the specified context.\n\n<strong>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters\ncorrectly.</strong>",
            "itemtype": "method",
            "name": "applyFilter",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D context to use as the source.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "The x position to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "targetCtx",
                    "description": "NOT SUPPORTED IN THIS FILTER. The 2D context to draw the result to. Defaults to the context passed to ctx.",
                    "type": "CanvasRenderingContext2D",
                    "optional": true
                },
                {
                    "name": "targetX",
                    "description": "NOT SUPPORTED IN THIS FILTER. The x position to draw the result to. Defaults to the value passed to x.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "targetY",
                    "description": "NOT SUPPORTED IN THIS FILTER. The y position to draw the result to. Defaults to the value passed to y.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "If the filter was applied successfully.",
                "type": "Boolean"
            },
            "class": "AlphaMaskFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/AlphaMaskFilter.js",
            "line": 122,
            "class": "AlphaMaskFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/AlphaMaskFilter.js",
            "line": 127,
            "class": "AlphaMaskFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BlurFilter.js",
            "line": 75,
            "description": "Horizontal blur radius in pixels",
            "itemtype": "property",
            "name": "blurX",
            "default": "0",
            "type": "Number",
            "class": "BlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BlurFilter.js",
            "line": 83,
            "description": "Vertical blur radius in pixels",
            "itemtype": "property",
            "name": "blurY",
            "default": "0",
            "type": "Number",
            "class": "BlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BlurFilter.js",
            "line": 91,
            "description": "Number of blur iterations. For example, a value of 1 will produce a rough blur. A value of 2 will produce a\nsmoother blur, but take twice as long to run.",
            "itemtype": "property",
            "name": "quality",
            "default": "1",
            "type": "Number",
            "class": "BlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BlurFilter.js",
            "line": 107,
            "description": "Array of multiply values for blur calculations.",
            "itemtype": "property",
            "name": "MUL_TABLE",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "BlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BlurFilter.js",
            "line": 116,
            "description": "Array of shift values for blur calculations.",
            "itemtype": "property",
            "name": "SHG_TABLE",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "BlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BlurFilter.js",
            "line": 126,
            "class": "BlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BlurFilter.js",
            "line": 134,
            "class": "BlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BlurFilter.js",
            "line": 139,
            "class": "BlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/BlurFilter.js",
            "line": 147,
            "class": "BlurFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 77,
            "description": "Red channel multiplier.",
            "itemtype": "property",
            "name": "redMultiplier",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 84,
            "description": "Green channel multiplier.",
            "itemtype": "property",
            "name": "greenMultiplier",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 91,
            "description": "Blue channel multiplier.",
            "itemtype": "property",
            "name": "blueMultiplier",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 98,
            "description": "Alpha channel multiplier.",
            "itemtype": "property",
            "name": "alphaMultiplier",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 105,
            "description": "Red channel offset (added to value).",
            "itemtype": "property",
            "name": "redOffset",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 112,
            "description": "Green channel offset (added to value).",
            "itemtype": "property",
            "name": "greenOffset",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 119,
            "description": "Blue channel offset (added to value).",
            "itemtype": "property",
            "name": "blueOffset",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 126,
            "description": "Alpha channel offset (added to value).",
            "itemtype": "property",
            "name": "alphaOffset",
            "type": "Number",
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 140,
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 145,
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorFilter.js",
            "line": 152,
            "class": "ColorFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 63,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 78,
            "description": "Array of delta values for contrast calculations.",
            "itemtype": "property",
            "name": "DELTA_INDEX",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 99,
            "description": "Identity matrix values.",
            "itemtype": "property",
            "name": "IDENTITY_MATRIX",
            "type": "Array",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 114,
            "description": "The constant length of a color matrix.",
            "itemtype": "property",
            "name": "LENGTH",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 125,
            "description": "Resets the instance with the specified values.",
            "itemtype": "method",
            "name": "setColor",
            "params": [
                {
                    "name": "brightness",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "contrast",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "hue",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "chainable": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 139,
            "description": "Resets the matrix to identity values.",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "chainable": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 149,
            "description": "Shortcut method to adjust brightness, contrast, saturation and hue.\nEquivalent to calling adjustHue(hue), adjustContrast(contrast),\nadjustBrightness(brightness), adjustSaturation(saturation), in that order.",
            "itemtype": "method",
            "name": "adjustColor",
            "params": [
                {
                    "name": "brightness",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "contrast",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "hue",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "chainable": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 168,
            "description": "Adjusts the brightness of pixel color by adding the specified value to the red, green and blue channels.\nPositive values will make the image brighter, negative values will make it darker.",
            "itemtype": "method",
            "name": "adjustBrightness",
            "params": [
                {
                    "name": "value",
                    "description": "A value between -255 & 255 that will be added to the RGB channels.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "chainable": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 189,
            "description": "Adjusts the contrast of pixel color.\nPositive values will increase contrast, negative values will decrease contrast.",
            "itemtype": "method",
            "name": "adjustContrast",
            "params": [
                {
                    "name": "value",
                    "description": "A value between -100 & 100.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "chainable": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 222,
            "description": "Adjusts the color saturation of the pixel.\nPositive values will increase saturation, negative values will decrease saturation (trend towards greyscale).",
            "itemtype": "method",
            "name": "adjustSaturation",
            "params": [
                {
                    "name": "value",
                    "description": "A value between -100 & 100.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "chainable": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 248,
            "description": "Adjusts the hue of the pixel color.",
            "itemtype": "method",
            "name": "adjustHue",
            "params": [
                {
                    "name": "value",
                    "description": "A value between -180 & 180.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "chainable": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 273,
            "description": "Concatenates (multiplies) the specified matrix with this one.",
            "itemtype": "method",
            "name": "concat",
            "params": [
                {
                    "name": "matrix",
                    "description": "An array or ColorMatrix instance.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "chainable": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 287,
            "description": "Returns a clone of this ColorMatrix.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of this ColorMatrix.",
                "type": "ColorMatrix"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 296,
            "description": "Return a length 25 (5x5) array instance containing this matrix's values.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "An array holding this matrix's values.",
                "type": "Array"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 309,
            "description": "Copy the specified matrix's values to this matrix.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "matrix",
                    "description": "An array or ColorMatrix instance.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The ColorMatrix instance the method is called on (useful for chaining calls.)",
                "type": "ColorMatrix"
            },
            "chainable": 1,
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 324,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 335,
            "itemtype": "method",
            "name": "_multiplyMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Array"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 357,
            "description": "Make sure values are within the specified range, hue has a limit of 180, brightness is 255, others are 100.",
            "itemtype": "method",
            "name": "_cleanValue",
            "params": [
                {
                    "name": "value",
                    "description": "The raw number",
                    "type": "Number"
                },
                {
                    "name": "limit",
                    "description": "The maximum that the number can be. The minimum is the limit * -1.",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrix.js",
            "line": 368,
            "description": "Makes sure matrixes are 5x5 (25 long).",
            "itemtype": "method",
            "name": "_fixMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Array"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ColorMatrix",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrixFilter.js",
            "line": 70,
            "description": "A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}",
            "itemtype": "property",
            "name": "matrix",
            "type": "Array | ColorMatrix",
            "class": "ColorMatrixFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrixFilter.js",
            "line": 84,
            "class": "ColorMatrixFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrixFilter.js",
            "line": 89,
            "class": "ColorMatrixFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/ColorMatrixFilter.js",
            "line": 95,
            "class": "ColorMatrixFilter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/Filter.js",
            "line": 73,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/Filter.js",
            "line": 88,
            "description": "Provides padding values for this filter. That is, how much the filter will extend the visual bounds of an object it is applied to.",
            "itemtype": "method",
            "name": "getBounds",
            "params": [
                {
                    "name": "rect",
                    "description": "If specified, the provided Rectangle instance will be expanded by the padding amounts and returned.",
                    "type": "Rectangle",
                    "optional": true
                }
            ],
            "return": {
                "description": "If a `rect` param was provided, it is returned. If not, either a new rectangle with the padding values, or null if no padding is required for this filter.",
                "type": "Rectangle"
            },
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/Filter.js",
            "line": 98,
            "description": "Applies the filter to the specified context.",
            "itemtype": "method",
            "name": "applyFilter",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D context to use as the source.",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "The x position to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The height to use for the source rect.",
                    "type": "Number"
                },
                {
                    "name": "targetCtx",
                    "description": "The 2D context to draw the result to. Defaults to the context passed to ctx.",
                    "type": "CanvasRenderingContext2D",
                    "optional": true
                },
                {
                    "name": "targetX",
                    "description": "The x position to draw the result to. Defaults to the value passed to x.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "targetY",
                    "description": "The y position to draw the result to. Defaults to the value passed to y.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "If the filter was applied successfully.",
                "type": "Boolean"
            },
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/Filter.js",
            "line": 128,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/Filter.js",
            "line": 137,
            "description": "Returns a clone of this Filter instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "A clone of the current Filter instance.",
                "type": "Filter"
            },
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/filters/Filter.js",
            "line": 147,
            "itemtype": "method",
            "name": "_applyFilter",
            "params": [
                {
                    "name": "imageData",
                    "description": "Target ImageData instance.",
                    "type": "ImageData"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Filter",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/DisplayProps.js",
            "line": 54,
            "description": "Property representing the alpha that will be applied to a display object.",
            "itemtype": "property",
            "name": "alpha",
            "type": "Number",
            "class": "DisplayProps",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/DisplayProps.js",
            "line": 60,
            "description": "Property representing the shadow that will be applied to a display object.",
            "itemtype": "property",
            "name": "shadow",
            "type": "Shadow",
            "class": "DisplayProps",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/DisplayProps.js",
            "line": 66,
            "description": "Property representing the compositeOperation that will be applied to a display object.\nYou can find a list of valid composite operations at:\n<a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>",
            "itemtype": "property",
            "name": "compositeOperation",
            "type": "String",
            "class": "DisplayProps",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/DisplayProps.js",
            "line": 74,
            "description": "Property representing the value for visible that will be applied to a display object.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "class": "DisplayProps",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/DisplayProps.js",
            "line": 80,
            "description": "The transformation matrix that will be applied to a display object.",
            "itemtype": "property",
            "name": "matrix",
            "type": "Matrix2D",
            "class": "DisplayProps",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/DisplayProps.js",
            "line": 89,
            "description": "Reinitializes the instance with the specified values.",
            "itemtype": "method",
            "name": "setValues",
            "params": [
                {
                    "name": "visible",
                    "description": "Visible value.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "alpha",
                    "description": "Alpha value.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "shadow",
                    "description": "A Shadow instance or null.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "compositeOperation",
                    "description": "A compositeOperation value or null.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "matrix",
                    "description": "A transformation matrix. Defaults to an identity matrix.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "This instance. Useful for chaining method calls.",
                "type": "DisplayProps"
            },
            "chainable": 1,
            "class": "DisplayProps",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/DisplayProps.js",
            "line": 110,
            "description": "Appends the specified display properties. This is generally used to apply a child's properties its parent's.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "visible",
                    "description": "desired visible value",
                    "type": "Boolean"
                },
                {
                    "name": "alpha",
                    "description": "desired alpha value",
                    "type": "Number"
                },
                {
                    "name": "shadow",
                    "description": "desired shadow value",
                    "type": "Shadow"
                },
                {
                    "name": "compositeOperation",
                    "description": "desired composite operation value",
                    "type": "String"
                },
                {
                    "name": "matrix",
                    "description": "a Matrix2D instance",
                    "type": "Matrix2D",
                    "optional": true
                }
            ],
            "return": {
                "description": "This instance. Useful for chaining method calls.",
                "type": "DisplayProps"
            },
            "chainable": 1,
            "class": "DisplayProps",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/DisplayProps.js",
            "line": 130,
            "description": "Prepends the specified display properties. This is generally used to apply a parent's properties to a child's.\nFor example, to get the combined display properties that would be applied to a child, you could use:\n\n\tvar o = myDisplayObject;\n\tvar props = new createjs.DisplayProps();\n\tdo {\n\t\t// prepend each parent's props in turn:\n\t\tprops.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation, o.getMatrix());\n\t} while (o = o.parent);",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "visible",
                    "description": "desired visible value",
                    "type": "Boolean"
                },
                {
                    "name": "alpha",
                    "description": "desired alpha value",
                    "type": "Number"
                },
                {
                    "name": "shadow",
                    "description": "desired shadow value",
                    "type": "Shadow"
                },
                {
                    "name": "compositeOperation",
                    "description": "desired composite operation value",
                    "type": "String"
                },
                {
                    "name": "matrix",
                    "description": "a Matrix2D instance",
                    "type": "Matrix2D",
                    "optional": true
                }
            ],
            "return": {
                "description": "This instance. Useful for chaining method calls.",
                "type": "DisplayProps"
            },
            "chainable": 1,
            "class": "DisplayProps",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/DisplayProps.js",
            "line": 159,
            "description": "Resets this instance and its matrix to default values.",
            "itemtype": "method",
            "name": "identity",
            "return": {
                "description": "This instance. Useful for chaining method calls.",
                "type": "DisplayProps"
            },
            "chainable": 1,
            "class": "DisplayProps",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/DisplayProps.js",
            "line": 173,
            "description": "Returns a clone of the DisplayProps instance. Clones the associated matrix.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the DisplayProps instance.",
                "type": "DisplayProps"
            },
            "class": "DisplayProps",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 66,
            "description": "Position (0, 0) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "a",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 72,
            "description": "Position (0, 1) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "b",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 78,
            "description": "Position (1, 0) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "c",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 84,
            "description": "Position (1, 1) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "d",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 90,
            "description": "Position (2, 0) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "tx",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 96,
            "description": "Position (2, 1) in a 3x3 affine transformation matrix.",
            "itemtype": "property",
            "name": "ty",
            "type": "Number",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 104,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 119,
            "description": "Multiplier for converting degrees to radians. Used internally by Matrix2D.",
            "itemtype": "property",
            "name": "DEG_TO_RAD",
            "static": 1,
            "final": 1,
            "type": "Number",
            "readonly": "",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 131,
            "description": "An identity matrix, representing a null transformation.",
            "itemtype": "property",
            "name": "identity",
            "static": 1,
            "type": "Matrix2D",
            "readonly": "",
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 142,
            "description": "Sets the specified values on this instance.",
            "itemtype": "method",
            "name": "setValues",
            "params": [
                {
                    "name": "a",
                    "description": "Specifies the a property for the new matrix.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "b",
                    "description": "Specifies the b property for the new matrix.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "c",
                    "description": "Specifies the c property for the new matrix.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "d",
                    "description": "Specifies the d property for the new matrix.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "tx",
                    "description": "Specifies the tx property for the new matrix.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "ty",
                    "description": "Specifies the ty property for the new matrix.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "This instance. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 164,
            "description": "Appends the specified matrix properties to this matrix. All parameters are required.\nThis is the equivalent of multiplying `(this matrix) * (specified matrix)`.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "tx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 192,
            "description": "Prepends the specified matrix properties to this matrix.\nThis is the equivalent of multiplying `(specified matrix) * (this matrix)`.\nAll parameters are required.",
            "itemtype": "method",
            "name": "prepend",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "tx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 219,
            "description": "Appends the specified matrix to this matrix.\nThis is the equivalent of multiplying `(this matrix) * (specified matrix)`.",
            "itemtype": "method",
            "name": "appendMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 230,
            "description": "Prepends the specified matrix to this matrix.\nThis is the equivalent of multiplying `(specified matrix) * (this matrix)`.\nFor example, you could calculate the combined transformation for a child object using:\n\n\tvar o = myDisplayObject;\n\tvar mtx = o.getMatrix();\n\twhile (o = o.parent) {\n\t\t// prepend each parent's transformation in turn:\n\t\to.prependMatrix(o.getMatrix());\n\t}",
            "itemtype": "method",
            "name": "prependMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 249,
            "description": "Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\nFor example, you can use this to generate a matrix representing the transformations of a display object:\n\n\tvar mtx = new createjs.Matrix2D();\n\tmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);",
            "itemtype": "method",
            "name": "appendTransform",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rotation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "regX",
                    "description": "Optional.",
                    "type": "Number"
                },
                {
                    "name": "regY",
                    "description": "Optional.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 295,
            "description": "Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.\nFor example, you could calculate the combined transformation for a child object using:\n\n\tvar o = myDisplayObject;\n\tvar mtx = new createjs.Matrix2D();\n\tdo  {\n\t\t// prepend each parent's transformation in turn:\n\t\tmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n\t} while (o = o.parent);\n\t\n\tNote that the above example would not account for {{#crossLink \"DisplayObject/transformMatrix:property\"}}{{/crossLink}}\n\tvalues. See {{#crossLink \"Matrix2D/prependMatrix\"}}{{/crossLink}} for an example that does.",
            "itemtype": "method",
            "name": "prependTransform",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rotation",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "skewY",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "regX",
                    "description": "Optional.",
                    "type": "Number"
                },
                {
                    "name": "regY",
                    "description": "Optional.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 346,
            "description": "Applies a clockwise rotation transformation to the matrix.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle to rotate by, in degrees. To use a value in radians, multiply it by `180/Math.PI`.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 367,
            "description": "Applies a skew transformation to the matrix.",
            "itemtype": "method",
            "name": "skew",
            "params": [
                {
                    "name": "skewX",
                    "description": "The amount to skew horizontally in degrees. To use a value in radians, multiply it by `180/Math.PI`.",
                    "type": "Number"
                },
                {
                    "name": "skewY",
                    "description": "The amount to skew vertically in degrees.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 381,
            "description": "Applies a scale transformation to the matrix.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "x",
                    "description": "The amount to scale horizontally. E.G. a value of 2 will double the size in the X direction, and 0.5 will halve it.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The amount to scale vertically.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 398,
            "description": "Translates the matrix on the x and y axes.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 411,
            "description": "Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).",
            "itemtype": "method",
            "name": "identity",
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 422,
            "description": "Inverts the matrix, causing it to perform the opposite transformation.",
            "itemtype": "method",
            "name": "invert",
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 444,
            "description": "Returns true if the matrix is an identity matrix.",
            "itemtype": "method",
            "name": "isIdentity",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 453,
            "description": "Returns true if this matrix is equal to the specified matrix (all property values are equal).",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "matrix",
                    "description": "The matrix to compare.",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 463,
            "description": "Transforms a point according to this matrix.",
            "itemtype": "method",
            "name": "transformPoint",
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the point to transform.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y component of the point to transform.",
                    "type": "Number"
                },
                {
                    "name": "pt",
                    "description": "An object to copy the result into. If omitted a generic object with x/y properties will be returned.",
                    "type": "Point | Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Point"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 478,
            "description": "Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that these values\nmay not match the transform properties you used to generate the matrix, though they will produce the same visual\nresults.",
            "itemtype": "method",
            "name": "decompose",
            "params": [
                {
                    "name": "target",
                    "description": "The object to apply the transform properties to. If null, then a new object will be returned.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The target, or a new generic object with the transform properties applied.",
                "type": "Object"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 511,
            "description": "Copies all properties from the specified matrix to this matrix.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "matrix",
                    "description": "The matrix to copy properties from.",
                    "type": "Matrix2D"
                }
            ],
            "return": {
                "description": "This matrix. Useful for chaining method calls.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 521,
            "description": "Returns a clone of the Matrix2D instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Matrix2D instance.",
                "type": "Matrix2D"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Matrix2D.js",
            "line": 530,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Matrix2D",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Point.js",
            "line": 59,
            "description": "X position.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Point.js",
            "line": 65,
            "description": "Y position.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Point.js",
            "line": 73,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Point.js",
            "line": 88,
            "description": "Sets the specified values on this instance.",
            "itemtype": "method",
            "name": "setValues",
            "params": [
                {
                    "name": "x",
                    "description": "X position.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Y position.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "This instance. Useful for chaining method calls.",
                "type": "Point"
            },
            "chainable": 1,
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Point.js",
            "line": 102,
            "description": "Copies all properties from the specified point to this point.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "point",
                    "description": "The point to copy properties from.",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "This point. Useful for chaining method calls.",
                "type": "Point"
            },
            "chainable": 1,
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Point.js",
            "line": 115,
            "description": "Returns a clone of the Point instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Point instance.",
                "type": "Point"
            },
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Point.js",
            "line": 124,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Point",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 61,
            "description": "X position.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 67,
            "description": "Y position.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 73,
            "description": "Width.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 79,
            "description": "Height.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 87,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 102,
            "description": "Sets the specified values on this instance.",
            "itemtype": "method",
            "name": "setValues",
            "params": [
                {
                    "name": "x",
                    "description": "X position.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Y position.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "width",
                    "description": "The width of the Rectangle.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "height",
                    "description": "The height of the Rectangle.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "This instance. Useful for chaining method calls.",
                "type": "Rectangle"
            },
            "chainable": 1,
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 121,
            "description": "Extends the rectangle's bounds to include the described point or rectangle.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the point or rectangle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of the point or rectangle.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the rectangle.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "height",
                    "description": "The height of the rectangle.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "This instance. Useful for chaining method calls.",
                "type": "Rectangle"
            },
            "chainable": 1,
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 141,
            "description": "Adds the specified padding to the rectangle's bounds.",
            "itemtype": "method",
            "name": "pad",
            "params": [
                {
                    "name": "top",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "left",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bottom",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This instance. Useful for chaining method calls.",
                "type": "Rectangle"
            },
            "chainable": 1,
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 159,
            "description": "Copies all properties from the specified rectangle to this rectangle.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "rectangle",
                    "description": "The rectangle to copy properties from.",
                    "type": "Rectangle"
                }
            ],
            "return": {
                "description": "This rectangle. Useful for chaining method calls.",
                "type": "Rectangle"
            },
            "chainable": 1,
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 170,
            "description": "Returns true if this rectangle fully encloses the described point or rectangle.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "X position of the point or rectangle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y position of the point or rectangle.",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the rectangle.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "height",
                    "description": "The height of the rectangle.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "True if the described point or rectangle is contained within this rectangle.",
                "type": "Boolean"
            },
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 185,
            "description": "Returns a new rectangle which contains this rectangle and the specified rectangle.",
            "itemtype": "method",
            "name": "union",
            "params": [
                {
                    "name": "rect",
                    "description": "The rectangle to calculate a union with.",
                    "type": "Rectangle"
                }
            ],
            "return": {
                "description": "A new rectangle describing the union.",
                "type": "Rectangle"
            },
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 195,
            "description": "Returns a new rectangle which describes the intersection (overlap) of this rectangle and the specified rectangle,\nor null if they do not intersect.",
            "itemtype": "method",
            "name": "intersection",
            "params": [
                {
                    "name": "rect",
                    "description": "The rectangle to calculate an intersection with.",
                    "type": "Rectangle"
                }
            ],
            "return": {
                "description": "A new rectangle describing the intersection or null.",
                "type": "Rectangle"
            },
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 211,
            "description": "Returns true if the specified rectangle intersects (has any overlap) with this rectangle.",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "rect",
                    "description": "The rectangle to compare.",
                    "type": "Rectangle"
                }
            ],
            "return": {
                "description": "True if the rectangles intersect.",
                "type": "Boolean"
            },
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 221,
            "description": "Returns true if the width or height are equal or less than 0.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "True if the rectangle is empty.",
                "type": "Boolean"
            },
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 230,
            "description": "Returns a clone of the Rectangle instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Rectangle instance.",
                "type": "Rectangle"
            },
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/geom/Rectangle.js",
            "line": 239,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Rectangle",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 79,
            "description": "The target for this button helper.",
            "itemtype": "property",
            "name": "target",
            "type": "MovieClip | Sprite",
            "readonly": "",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 87,
            "description": "The label name or frame number to display when the user mouses out of the target. Defaults to \"over\".",
            "itemtype": "property",
            "name": "overLabel",
            "type": "String | Number",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 94,
            "description": "The label name or frame number to display when the user mouses over the target. Defaults to \"out\".",
            "itemtype": "property",
            "name": "outLabel",
            "type": "String | Number",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 101,
            "description": "The label name or frame number to display when the user presses on the target. Defaults to \"down\".",
            "itemtype": "property",
            "name": "downLabel",
            "type": "String | Number",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 108,
            "description": "If true, then ButtonHelper will call gotoAndPlay, if false, it will use gotoAndStop. Default is false.",
            "itemtype": "property",
            "name": "play",
            "default": "false",
            "type": "Boolean",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 118,
            "itemtype": "property",
            "name": "_isPressed",
            "type": "Boolean",
            "access": "protected",
            "tagname": "",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 125,
            "itemtype": "property",
            "name": "_isOver",
            "type": "Boolean",
            "access": "protected",
            "tagname": "",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 132,
            "itemtype": "property",
            "name": "_enabled",
            "type": "Boolean",
            "access": "protected",
            "tagname": "",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 153,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 168,
            "description": "Use the {{#crossLink \"ButtonHelper/enabled:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "deprecated": true,
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 194,
            "description": "Use the {{#crossLink \"ButtonHelper/enabled:property\"}}{{/crossLink}} property instead.",
            "itemtype": "method",
            "name": "getEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "deprecated": true,
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 204,
            "description": "Enables or disables the button functionality on the target.",
            "itemtype": "property",
            "name": "enabled",
            "type": "{Boolean}",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 217,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 228,
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "evt",
                    "description": "The mouse event to handle.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/ButtonHelper.js",
            "line": 255,
            "description": "Injected into target. Preserves the paused state through a reset.",
            "itemtype": "method",
            "name": "_reset",
            "access": "protected",
            "tagname": "",
            "class": "ButtonHelper",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 66,
            "description": "Returns `true` if touch is supported in the current browser.",
            "itemtype": "method",
            "name": "isSupported",
            "return": {
                "description": "Indicates whether touch is supported in the current browser.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 78,
            "description": "Enables touch interaction for the specified EaselJS {{#crossLink \"Stage\"}}{{/crossLink}}. Currently supports iOS\n(and compatible browsers, such as modern Android browsers), and IE10/11. Supports both single touch and\nmulti-touch modes. Extends the EaselJS {{#crossLink \"MouseEvent\"}}{{/crossLink}} model, but without support for\ndouble click or over/out events. See the MouseEvent {{#crossLink \"MouseEvent/pointerId:property\"}}{{/crossLink}}\nfor more information.",
            "itemtype": "method",
            "name": "enable",
            "params": [
                {
                    "name": "stage",
                    "description": "The {{#crossLink \"Stage\"}}{{/crossLink}} to enable touch on.",
                    "type": "Stage"
                },
                {
                    "name": "singleTouch",
                    "description": "If `true`, only a single touch will be active at a time.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "allowDefault",
                    "description": "If `true`, then default gesture actions (ex. scrolling, zooming) will be\nallowed when the user is interacting with the target canvas.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns `true` if touch was successfully enabled on the target stage.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 106,
            "description": "Removes all listeners that were set up when calling `Touch.enable()` on a stage.",
            "itemtype": "method",
            "name": "disable",
            "params": [
                {
                    "name": "stage",
                    "description": "The {{#crossLink \"Stage\"}}{{/crossLink}} to disable touch on.",
                    "type": "Stage"
                }
            ],
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 122,
            "itemtype": "method",
            "name": "_IOS_enable",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                }
            ],
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 137,
            "itemtype": "method",
            "name": "_IOS_disable",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                }
            ],
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 153,
            "itemtype": "method",
            "name": "_IOS_handleEvent",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                },
                {
                    "name": "e",
                    "description": "The event to handle",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 180,
            "itemtype": "method",
            "name": "_IE_enable",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                }
            ],
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 207,
            "itemtype": "method",
            "name": "_IE_disable",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                }
            ],
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 233,
            "itemtype": "method",
            "name": "_IE_handleEvent",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                },
                {
                    "name": "e",
                    "description": "The event to handle.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 262,
            "itemtype": "method",
            "name": "_handleStart",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 281,
            "itemtype": "method",
            "name": "_handleMove",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/ui/Touch.js",
            "line": 295,
            "itemtype": "method",
            "name": "_handleEnd",
            "params": [
                {
                    "name": "stage",
                    "description": "",
                    "type": "Stage"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Number"
                },
                {
                    "name": "e",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Touch",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 62,
            "description": "The maximum width for the images (not individual frames) in the generated SpriteSheet. It is recommended to\nuse a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max\ndimensions, then additional images will be created as needed.",
            "itemtype": "property",
            "name": "maxWidth",
            "type": "Number",
            "default": "2048",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 72,
            "description": "The maximum height for the images (not individual frames) in the generated SpriteSheet. It is recommended to\nuse a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max\ndimensions, then additional images will be created as needed.",
            "itemtype": "property",
            "name": "maxHeight",
            "type": "Number",
            "default": "2048",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 82,
            "description": "The SpriteSheet that was generated. This will be null before a build is completed successfully.",
            "itemtype": "property",
            "name": "spriteSheet",
            "type": "SpriteSheet",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 89,
            "description": "The scale to apply when drawing all frames to the SpriteSheet. This is multiplied against any scale specified\nin the addFrame call. This can be used, for example, to generate a SpriteSheet at run time that is tailored\nto the a specific device resolution (ex. tablet vs mobile).",
            "itemtype": "property",
            "name": "scale",
            "type": "Number",
            "default": "1",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 99,
            "description": "The padding to use between frames. This is helpful to preserve antialiasing on drawn vector content.",
            "itemtype": "property",
            "name": "padding",
            "type": "Number",
            "default": "1",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 107,
            "description": "A number from 0.01 to 0.99 that indicates what percentage of time the builder can use. This can be\nthought of as the number of seconds per second the builder will use. For example, with a timeSlice value of 0.3,\nthe builder will run 20 times per second, using approximately 15ms per build (30% of available time, or 0.3s per second).\nDefaults to 0.3.",
            "itemtype": "property",
            "name": "timeSlice",
            "type": "Number",
            "default": "0.3",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 118,
            "description": "A value between 0 and 1 that indicates the progress of a build, or -1 if a build has not\nbeen initiated.",
            "itemtype": "property",
            "name": "progress",
            "type": "Number",
            "default": "-1",
            "readonly": "",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 128,
            "description": "A {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} value that will be passed to new {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instances that are\ncreated. If no framerate is specified (or it is 0), then SpriteSheets will use the {{#crossLink \"Ticker\"}}{{/crossLink}}\nframerate.",
            "itemtype": "property",
            "name": "framerate",
            "type": "Number",
            "default": "0",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 140,
            "itemtype": "property",
            "name": "_frames",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 147,
            "itemtype": "property",
            "name": "_animations",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 154,
            "itemtype": "property",
            "name": "_data",
            "access": "protected",
            "tagname": "",
            "type": "Array",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 161,
            "itemtype": "property",
            "name": "_nextFrameIndex",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 168,
            "itemtype": "property",
            "name": "_index",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 175,
            "itemtype": "property",
            "name": "_timerID",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 182,
            "itemtype": "property",
            "name": "_scale",
            "access": "protected",
            "tagname": "",
            "type": "Number",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 191,
            "description": "<strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\nSee {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\nfor details.\n\nThere is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.",
            "itemtype": "method",
            "name": "initialize",
            "access": "protected",
            "tagname": "",
            "deprecated": true,
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 210,
            "description": "Dispatched when a build completes.",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.6.0",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 218,
            "description": "Dispatched when an asynchronous build has progress.",
            "itemtype": "event",
            "name": "progress",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "progress",
                    "description": "The current progress value (0-1).",
                    "type": "Number"
                }
            ],
            "since": "0.6.0",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 229,
            "description": "Adds a frame to the {{#crossLink \"SpriteSheet\"}}{{/crossLink}}. Note that the frame will not be drawn until you\ncall {{#crossLink \"SpriteSheetBuilder/build\"}}{{/crossLink}} method. The optional setup params allow you to have\na function run immediately before the draw occurs. For example, this allows you to add a single source multiple\ntimes, but manipulate it or its children to change it to generate different frames.\n\nNote that the source's transformations (x, y, scale, rotate, alpha) will be ignored, except for regX/Y. To apply\ntransforms to a source object and have them captured in the SpriteSheet, simply place it into a {{#crossLink \"Container\"}}{{/crossLink}}\nand pass in the Container as the source.",
            "itemtype": "method",
            "name": "addFrame",
            "params": [
                {
                    "name": "source",
                    "description": "The source {{#crossLink \"DisplayObject\"}}{{/crossLink}}  to draw as the frame.",
                    "type": "DisplayObject"
                },
                {
                    "name": "sourceRect",
                    "description": "A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the\nsource to draw to the frame. If not specified, it will look for a `getBounds` method, bounds property, or\n`nominalBounds` property on the source to use. If one is not found, the frame will be skipped.",
                    "type": "Rectangle",
                    "optional": true
                },
                {
                    "name": "scale",
                    "description": "Optional. The scale to draw this frame at. Default is 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "setupFunction",
                    "description": "A function to call immediately before drawing this frame. It will be called with two parameters: the source, and setupData.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "setupData",
                    "description": "Arbitrary setup data to pass to setupFunction as the second parameter.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The index of the frame that was just added, or null if a sourceRect could not be determined.",
                "type": "Number"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 257,
            "description": "Adds an animation that will be included in the created {{#crossLink \"SpriteSheet\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The name for the animation.",
                    "type": "String"
                },
                {
                    "name": "frames",
                    "description": "An array of frame indexes that comprise the animation. Ex. [3,6,5] would describe an animation\nthat played frame indexes 3, 6, and 5 in that order.",
                    "type": "Array"
                },
                {
                    "name": "next",
                    "description": "Specifies the name of the animation to continue to after this animation ends. You can\nalso pass false to have the animation stop when it ends. By default it will loop to the start of the same animation.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "speed",
                    "description": "Specifies a frame advance speed for this animation. For example, a value of 0.5 would\ncause the animation to advance every second tick. Note that earlier versions used `frequency` instead, which had\nthe opposite effect.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 274,
            "description": "This will take a {{#crossLink \"MovieClip\"}}{{/crossLink}} instance, and add its frames and labels to this\nbuilder. Labels will be added as an animation running from the label index to the next label. For example, if\nthere is a label named \"foo\" at frame 0 and a label named \"bar\" at frame 10, in a MovieClip with 15 frames, it\nwill add an animation named \"foo\" that runs from frame index 0 to 9, and an animation named \"bar\" that runs from\nframe index 10 to 14.\n\nNote that this will iterate through the full MovieClip with {{#crossLink \"MovieClip/actionsEnabled:property\"}}{{/crossLink}}\nset to `false`, ending on the last frame.",
            "itemtype": "method",
            "name": "addMovieClip",
            "params": [
                {
                    "name": "source",
                    "description": "The source MovieClip instance to add to the SpriteSheet.",
                    "type": "MovieClip"
                },
                {
                    "name": "sourceRect",
                    "description": "A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the source to\ndraw to the frame. If not specified, it will look for a {{#crossLink \"DisplayObject/getBounds\"}}{{/crossLink}}\nmethod, `frameBounds` Array, `bounds` property, or `nominalBounds` property on the source to use. If one is not\nfound, the MovieClip will be skipped.",
                    "type": "Rectangle",
                    "optional": true
                },
                {
                    "name": "scale",
                    "description": "The scale to draw the movie clip at.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "setupFunction",
                    "description": "A function to call immediately before drawing each frame. It will be called\nwith three parameters: the source, setupData, and the frame index.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "setupData",
                    "description": "Arbitrary setup data to pass to setupFunction as the second parameter.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "labelFunction",
                    "description": "This method will be called for each MovieClip label that is added with four\nparameters: the label name, the source MovieClip instance, the starting frame index (in the movieclip timeline)\nand the end index. It must return a new name for the label/animation, or `false` to exclude the label.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 332,
            "description": "Builds a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance based on the current frames.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "The created SpriteSheet instance, or null if a build is already running or an error\noccurred.",
                "type": "SpriteSheet"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 346,
            "description": "Asynchronously builds a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance based on the current frames. It will\nrun 20 times per second, using an amount of time defined by `timeSlice`. When it is complete it will call the\nspecified callback.",
            "itemtype": "method",
            "name": "buildAsync",
            "params": [
                {
                    "name": "timeSlice",
                    "description": "Sets the timeSlice property on this instance.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 361,
            "description": "Stops the current asynchronous build.",
            "itemtype": "method",
            "name": "stopAsync",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 370,
            "description": "SpriteSheetBuilder instances cannot be cloned.",
            "itemtype": "method",
            "name": "clone",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 378,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 389,
            "itemtype": "method",
            "name": "_startBuild",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 430,
            "itemtype": "method",
            "name": "_setupMovieClipFrame",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The width & height of the row.",
                "type": "Number"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 443,
            "itemtype": "method",
            "name": "_getSize",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The width & height of the row.",
                "type": "Number"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 454,
            "itemtype": "method",
            "name": "_fillRow",
            "params": [
                {
                    "name": "frames",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "img",
                    "description": "",
                    "type": "HTMLImageElement"
                },
                {
                    "name": "dataFrames",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "pad",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "The width & height of the row.",
                "type": "Number"
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 492,
            "itemtype": "method",
            "name": "_endBuild",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 503,
            "itemtype": "method",
            "name": "_run",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetBuilder.js",
            "line": 528,
            "itemtype": "method",
            "name": "_drawNext",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "Boolean Returns false if this is the last draw."
            },
            "class": "SpriteSheetBuilder",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetUtils.js",
            "line": 55,
            "itemtype": "property",
            "name": "_workingCanvas",
            "static": 1,
            "type": "HTMLCanvasElement | Object",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetUtils.js",
            "line": 61,
            "itemtype": "property",
            "name": "_workingContext",
            "static": 1,
            "type": "CanvasRenderingContext2D",
            "access": "protected",
            "tagname": "",
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetUtils.js",
            "line": 76,
            "description": "<b>This is an experimental method, and may be buggy. Please report issues.</b><br/><br/>\nExtends the existing sprite sheet by flipping the original frames horizontally, vertically, or both,\nand adding appropriate animation & frame data. The flipped animations will have a suffix added to their names\n(_h, _v, _hv as appropriate). Make sure the sprite sheet images are fully loaded before using this method.\n<br/><br/>\nFor example:<br/>\nSpriteSheetUtils.addFlippedFrames(mySpriteSheet, true, true);\nThe above would add frames that are flipped horizontally AND frames that are flipped vertically.\n<br/><br/>\nNote that you can also flip any display object by setting its scaleX or scaleY to a negative value. On some\nbrowsers (especially those without hardware accelerated canvas) this can result in slightly degraded performance,\nwhich is why addFlippedFrames is available.",
            "itemtype": "method",
            "name": "addFlippedFrames",
            "static": 1,
            "params": [
                {
                    "name": "spriteSheet",
                    "description": "",
                    "type": "SpriteSheet"
                },
                {
                    "name": "horizontal",
                    "description": "If true, horizontally flipped frames will be added.",
                    "type": "Boolean"
                },
                {
                    "name": "vertical",
                    "description": "If true, vertically flipped frames will be added.",
                    "type": "Boolean"
                },
                {
                    "name": "both",
                    "description": "If true, frames that are flipped both horizontally and vertically will be added.",
                    "type": "Boolean"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Modern browsers perform better when flipping via a transform (ex. scaleX=-1) rendering this obsolete.",
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetUtils.js",
            "line": 106,
            "description": "Returns a single frame of the specified sprite sheet as a new PNG image. An example of when this may be useful is\nto use a spritesheet frame as the source for a bitmap fill.\n\n<strong>WARNING:</strong> In almost all cases it is better to display a single frame using a {{#crossLink \"Sprite\"}}{{/crossLink}}\nwith a {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} call than it is to slice out a frame using this\nmethod and display it with a Bitmap instance. You can also crop an image using the {{#crossLink \"Bitmap/sourceRect\"}}{{/crossLink}}\nproperty of {{#crossLink \"Bitmap\"}}{{/crossLink}}.\n\nThe extractFrame method may cause cross-domain warnings since it accesses pixels directly on the canvas.",
            "itemtype": "method",
            "name": "extractFrame",
            "static": 1,
            "params": [
                {
                    "name": "spriteSheet",
                    "description": "The SpriteSheet instance to extract a frame from.",
                    "type": "SpriteSheet"
                },
                {
                    "name": "frameOrAnimation",
                    "description": "The frame number or animation name to extract. If an animation\nname is specified, only the first frame of the animation will be extracted.",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "a single frame of the specified sprite sheet as a new PNG image.",
                "type": "HTMLImageElement"
            },
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/SpriteSheetUtils.js",
            "line": 139,
            "description": "Merges the rgb channels of one image with the alpha channel of another. This can be used to combine a compressed\nJPEG image containing color data with a PNG32 monochromatic image containing alpha data. With certain types of\nimages (those with detail that lend itself to JPEG compression) this can provide significant file size savings\nversus a single RGBA PNG32. This method is very fast (generally on the order of 1-2 ms to run).",
            "itemtype": "method",
            "name": "mergeAlpha",
            "static": 1,
            "params": [
                {
                    "name": "rbgImage",
                    "description": "The image (or canvas) containing the RGB channels to use.",
                    "type": "HTMLImageElement"
                },
                {
                    "name": "alphaImage",
                    "description": "The image (or canvas) containing the alpha channel to use.",
                    "type": "HTMLImageElement"
                },
                {
                    "name": "canvas",
                    "description": "Optional. If specified, this canvas will be used and returned. If not, a new canvas will be created.",
                    "type": "HTMLCanvasElement"
                }
            ],
            "return": {
                "description": "A canvas with the combined image data. This can be used as a source for Bitmap or SpriteSheet.",
                "type": "HTMLCanvasElement"
            },
            "deprecated": true,
            "deprecationMessage": "Tools such as ImageAlpha generally provide better results. This will be moved to sandbox in the future.",
            "class": "SpriteSheetUtils",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/UID.js",
            "line": 53,
            "itemtype": "property",
            "name": "_nextID",
            "type": "Number",
            "access": "protected",
            "tagname": "",
            "class": "UID",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/utils/UID.js",
            "line": 62,
            "description": "Returns the next unique id.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "The next unique id",
                "type": "Number"
            },
            "static": 1,
            "class": "UID",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/version.js",
            "line": 16,
            "description": "The version string for this release.",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "static": 1,
            "class": "EaselJS",
            "module": "EaselJS"
        },
        {
            "file": "easeljs/version.js",
            "line": 24,
            "description": "The build date for this release in UTC format.",
            "itemtype": "property",
            "name": "buildDate",
            "type": "String",
            "static": 1,
            "class": "EaselJS",
            "module": "EaselJS"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " createjs/utils/Ticker.js:505"
        },
        {
            "message": "Missing item type\nDocced in superclass.",
            "line": " easeljs/display/Bitmap.js:181"
        },
        {
            "message": "Missing item type\nSprite object pool.",
            "line": " easeljs/display/BitmapText.js:152"
        },
        {
            "message": "Missing item type\nDocced in superclass.",
            "line": " easeljs/display/BitmapText.js:162"
        },
        {
            "message": "Missing item type\nDocced in superclass.",
            "line": " easeljs/display/BitmapText.js:171"
        },
        {
            "message": "Missing item type\nDocced in superclass.",
            "line": " easeljs/display/Container.js:507"
        },
        {
            "message": "Missing item type\nDocced in superclass.",
            "line": " easeljs/display/Container.js:515"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/display/Graphics.js:1633"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/display/SpriteStage.js:435"
        },
        {
            "message": "Missing item type\nDocced in superclass.",
            "line": " easeljs/display/Text.js:250"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/AlphaMapFilter.js:105"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/AlphaMapFilter.js:113"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/AlphaMapFilter.js:120"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/AlphaMaskFilter.js:122"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/AlphaMaskFilter.js:127"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/BlurFilter.js:126"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/BlurFilter.js:134"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/BlurFilter.js:139"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/BlurFilter.js:147"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/ColorFilter.js:140"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/ColorFilter.js:145"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/ColorFilter.js:152"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/ColorMatrixFilter.js:84"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/ColorMatrixFilter.js:89"
        },
        {
            "message": "Missing item type",
            "line": " easeljs/filters/ColorMatrixFilter.js:95"
        }
    ]
}